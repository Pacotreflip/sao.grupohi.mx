{"version":3,"names":[],"mappings":"","sources":["app-vue.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n!function(e,n){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=n():\"function\"==typeof define&&define.amd?define(n):(e.__locale__es=e.__locale__es||{},e.__locale__es.js=n())}(this,function(){\"use strict\";var e={after:function(e,n){return\"El campo \"+e+\" debe ser posterior a \"+n[0]+\".\"},alpha_dash:function(e){return\"El campo \"+e+\" solo debe contener letras, números y guiones.\"},alpha_num:function(e){return\"El campo \"+e+\" solo debe contener letras y números.\"},alpha_spaces:function(e){return\"El campo \"+e+\" solo debe contener letras y espacios.\"},alpha:function(e){return\"El campo \"+e+\" solo debe contener letras.\"},before:function(e,n){return\"El campo \"+e+\" debe ser anterior a \"+n[0]+\".\"},between:function(e,n){return\"El campo \"+e+\" debe estar entre \"+n[0]+\" y \"+n[1]+\".\"},confirmed:function(e,n){return\"El campo \"+e+\" no coincide con \"+n[0]+\".\"},credit_card:function(e,n){n[0];return\"El campo \"+e+\" es inválido.\"},date_between:function(e,n){return\"El campo \"+e+\" debe estar entre \"+n[0]+\" y \"+n[1]+\".\"},date_format:function(e,n){return\"El campo \"+e+\" debe tener formato formato \"+n[0]+\".\"},decimal:function(e,n){void 0===n&&(n=[\"*\"]);var o=n[0];return\"El campo \"+e+\" debe ser númerico y contener \"+(\"*\"===o?\"\":o)+\" puntos decimales.\"},digits:function(e,n){return\"El campo \"+e+\" debe ser númerico y contener exactamente \"+n[0]+\" dígitos.\"},dimensions:function(e,n){return\"El campo \"+e+\" debe ser de \"+n[0]+\" pixeles por \"+n[1]+\" pixeles.\"},email:function(e){return\"El campo \"+e+\" debe ser un correo electrónico válido.\"},ext:function(e){return\"El campo \"+e+\" debe ser un archivo válido.\"},image:function(e){return\"El campo \"+e+\" debe ser una imagen.\"},in:function(e){return\"El campo \"+e+\" debe ser un valor válido.\"},ip:function(e){return\"El campo \"+e+\" debe ser una dirección ip válida.\"},max:function(e,n){return\"El campo \"+e+\" no debe ser mayor a \"+n[0]+\" caracteres.\"},max_value:function(e,n){return\"El campo \"+e+\" debe de ser \"+n[0]+\" o menor.\"},mimes:function(e){return\"El campo \"+e+\" debe ser un tipo de archivo válido.\"},min:function(e,n){return\"El campo \"+e+\" debe tener al menos \"+n[0]+\" caracteres.\"},min_value:function(e,n){return\"El campo \"+e+\" debe ser \"+n[0]+\" o superior.\"},not_in:function(e){return\"El campo \"+e+\" debe ser un valor válido.\"},numeric:function(e){return\"El campo \"+e+\" debe contener solo caracteres númericos.\"},regex:function(e){return\"El formato del campo \"+e+\" no es válido.\"},required:function(e){return\"El campo \"+e+\" es obligatorio.\"},size:function(e,n){return\"El campo \"+e+\" debe ser menor a \"+n[0]+\" KB.\"},url:function(e){return\"El campo \"+e+\" no es una URL válida.\"}},n={name:\"es\",messages:e,attributes:{}};return\"undefined\"!=typeof VeeValidate&&VeeValidate&&(VeeValidate.Validator,!0)&&VeeValidate.Validator.addLocale(n),n});\n},{}],2:[function(require,module,exports){\n/**\n * vee-validate v2.0.0-rc.5\n * (c) 2017 Abdelrahman Awad\n * @license MIT\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.VeeValidate = factory());\n}(this, (function () { 'use strict';\n\n/**\n * Some Alpha Regex helpers.\n * https://github.com/chriso/validator.js/blob/master/src/lib/alpha.js\n */\n\nvar alpha$1 = {\n  en: /^[A-Z]*$/i,\n  cs: /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]*$/i,\n  da: /^[A-ZÆØÅ]*$/i,\n  de: /^[A-ZÄÖÜß]*$/i,\n  es: /^[A-ZÁÉÍÑÓÚÜ]*$/i,\n  fr: /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]*$/i,\n  nl: /^[A-ZÉËÏÓÖÜ]*$/i,\n  hu: /^[A-ZÁÉÍÓÖŐÚÜŰ]*$/i,\n  pl: /^[A-ZĄĆĘŚŁŃÓŻŹ]*$/i,\n  pt: /^[A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]*$/i,\n  ru: /^[А-ЯЁ]*$/i,\n  sr: /^[A-ZČĆŽŠĐ]*$/i,\n  tr: /^[A-ZÇĞİıÖŞÜ]*$/i,\n  uk: /^[А-ЩЬЮЯЄIЇҐ]*$/i,\n  ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]*$/\n};\n\nvar alphaSpaces = {\n  en: /^[A-Z\\s]*$/i,\n  cs: /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ\\s]*$/i,\n  da: /^[A-ZÆØÅ\\s]*$/i,\n  de: /^[A-ZÄÖÜß\\s]*$/i,\n  es: /^[A-ZÁÉÍÑÓÚÜ\\s]*$/i,\n  fr: /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ\\s]*$/i,\n  nl: /^[A-ZÉËÏÓÖÜ\\s]*$/i,\n  hu: /^[A-ZÁÉÍÓÖŐÚÜŰ\\s]*$/i,\n  pl: /^[A-ZĄĆĘŚŁŃÓŻŹ\\s]*$/i,\n  pt: /^[A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ\\s]*$/i,\n  ru: /^[А-ЯЁ\\s]*$/i,\n  sr: /^[A-ZČĆŽŠĐ\\s]*$/i,\n  tr: /^[A-ZÇĞİıÖŞÜ\\s]*$/i,\n  uk: /^[А-ЩЬЮЯЄIЇҐ\\s]*$/i,\n  ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ\\s]*$/\n};\n\nvar alphanumeric = {\n  en: /^[0-9A-Z]*$/i,\n  cs: /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]*$/i,\n  da: /^[0-9A-ZÆØÅ]$/i,\n  de: /^[0-9A-ZÄÖÜß]*$/i,\n  es: /^[0-9A-ZÁÉÍÑÓÚÜ]*$/i,\n  fr: /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]*$/i,\n  hu: /^[0-9A-ZÁÉÍÓÖŐÚÜŰ]*$/i,\n  nl: /^[0-9A-ZÉËÏÓÖÜ]*$/i,\n  pl: /^[0-9A-ZĄĆĘŚŁŃÓŻŹ]*$/i,\n  pt: /^[0-9A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]*$/i,\n  ru: /^[0-9А-ЯЁ]*$/i,\n  sr: /^[0-9A-ZČĆŽŠĐ]*$/i,\n  tr: /^[0-9A-ZÇĞİıÖŞÜ]*$/i,\n  uk: /^[0-9А-ЩЬЮЯЄIЇҐ]*$/i,\n  ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]*$/\n};\n\nvar alphaDash = {\n  en: /^[0-9A-Z_-]*$/i,\n  cs: /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ_-]*$/i,\n  da: /^[0-9A-ZÆØÅ_-]*$/i,\n  de: /^[0-9A-ZÄÖÜß_-]*$/i,\n  es: /^[0-9A-ZÁÉÍÑÓÚÜ_-]*$/i,\n  fr: /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ_-]*$/i,\n  nl: /^[0-9A-ZÉËÏÓÖÜ_-]*$/i,\n  hu: /^[0-9A-ZÁÉÍÓÖŐÚÜŰ_-]*$/i,\n  pl: /^[0-9A-ZĄĆĘŚŁŃÓŻŹ_-]*$/i,\n  pt: /^[0-9A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ_-]*$/i,\n  ru: /^[0-9А-ЯЁ_-]*$/i,\n  sr: /^[0-9A-ZČĆŽŠĐ_-]*$/i,\n  tr: /^[0-9A-ZÇĞİıÖŞÜ_-]*$/i,\n  uk: /^[0-9А-ЩЬЮЯЄIЇҐ_-]*$/i,\n  ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ_-]*$/\n};\n\nvar alpha$$1 = function (value, ref) {\n  if ( ref === void 0 ) ref = [null];\n  var locale = ref[0];\n\n  // Match at least one locale.\n  if (! locale) {\n    return Object.keys(alpha$1).some(function (loc) { return alpha$1[loc].test(value); });\n  }\n\n  return (alpha$1[locale] || alpha$1.en).test(value);\n};\n\nvar alpha_dash = function (value, ref) {\n  if ( ref === void 0 ) ref = [null];\n  var locale = ref[0];\n\n  // Match at least one locale.\n  if (! locale) {\n    return Object.keys(alphaDash).some(function (loc) { return alphaDash[loc].test(value); });\n  }\n\n  return (alphaDash[locale] || alphaDash.en).test(value);\n};\n\nvar alpha_num = function (value, ref) {\n  if ( ref === void 0 ) ref = [null];\n  var locale = ref[0];\n\n  // Match at least one locale.\n  if (! locale) {\n    return Object.keys(alphanumeric).some(function (loc) { return alphanumeric[loc].test(value); });\n  }\n\n  return (alphanumeric[locale] || alphanumeric.en).test(value);\n};\n\nvar alpha_spaces = function (value, ref) {\n  if ( ref === void 0 ) ref = [null];\n  var locale = ref[0];\n\n  // Match at least one locale.\n  if (! locale) {\n    return Object.keys(alphaSpaces).some(function (loc) { return alphaSpaces[loc].test(value); });\n  }\n\n  return (alphaSpaces[locale] || alphaSpaces.en).test(value);\n};\n\nvar between = function (value, ref) {\n\tvar min = ref[0];\n\tvar max = ref[1];\n\n\treturn Number(min) <= value && Number(max) >= value;\n};\n\nvar confirmed = function (value, ref, validatingField) {\n  var confirmedField = ref[0];\n\n  var field = confirmedField\n    ? document.querySelector((\"input[name='\" + confirmedField + \"']\"))\n    : document.querySelector((\"input[name='\" + validatingField + \"_confirmation']\"));\n\n  return !! (field && String(value) === field.value);\n};\n\nfunction unwrapExports (x) {\n\treturn x && x.__esModule ? x['default'] : x;\n}\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar assertString_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = assertString;\nfunction assertString(input) {\n  if (typeof input !== 'string') {\n    throw new TypeError('This library (validator.js) validates strings only');\n  }\n}\nmodule.exports = exports['default'];\n});\n\nvar isCreditCard_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isCreditCard;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable max-len */\nvar creditCard = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})|62[0-9]{14}$/;\n/* eslint-enable max-len */\n\nfunction isCreditCard(str) {\n  (0, _assertString2.default)(str);\n  var sanitized = str.replace(/[^0-9]+/g, '');\n  if (!creditCard.test(sanitized)) {\n    return false;\n  }\n  var sum = 0;\n  var digit = void 0;\n  var tmpNum = void 0;\n  var shouldDouble = void 0;\n  for (var i = sanitized.length - 1; i >= 0; i--) {\n    digit = sanitized.substring(i, i + 1);\n    tmpNum = parseInt(digit, 10);\n    if (shouldDouble) {\n      tmpNum *= 2;\n      if (tmpNum >= 10) {\n        sum += tmpNum % 10 + 1;\n      } else {\n        sum += tmpNum;\n      }\n    } else {\n      sum += tmpNum;\n    }\n    shouldDouble = !shouldDouble;\n  }\n  return !!(sum % 10 === 0 ? sanitized : false);\n}\nmodule.exports = exports['default'];\n});\n\nvar isCreditCard = unwrapExports(isCreditCard_1);\n\nvar credit_card = function (value) { return isCreditCard(String(value)); };\n\nvar decimal = function (value, params) {\n  var decimals = Array.isArray(params) ? (params[0] || '*') : '*';\n  if (Array.isArray(value)) {\n    return false;\n  }\n\n  if (value === null || value === undefined || value === '') {\n    return true;\n  }\n\n    // if is 0.\n  if (Number(decimals) === 0) {\n    return /^-?\\d*$/.test(value);\n  }\n\n  var regexPart = decimals === '*' ? '+' : (\"{1,\" + decimals + \"}\");\n  var regex = new RegExp((\"^-?\\\\d*(\\\\.\\\\d\" + regexPart + \")?$\"));\n\n  if (! regex.test(value)) {\n    return false;\n  }\n\n  var parsedValue = parseFloat(value);\n\n    // eslint-disable-next-line\n    return parsedValue === parsedValue;\n};\n\nvar digits = function (value, ref) {\n  var length = ref[0];\n\n  var strVal = String(value);\n\n  return /^[0-9]*$/.test(strVal) && strVal.length === Number(length);\n};\n\nvar validateImage = function (file, width, height) {\n  var URL = window.URL || window.webkitURL;\n  return new Promise(function (resolve) {\n    var image = new Image();\n    image.onerror = function () { return resolve({ valid: false }); };\n    image.onload = function () { return resolve({\n      valid: image.width === Number(width) && image.height === Number(height)\n    }); };\n\n    image.src = URL.createObjectURL(file);\n  });\n};\n\nvar dimensions = function (files, ref) {\n  var width = ref[0];\n  var height = ref[1];\n\n  var list = [];\n  for (var i = 0; i < files.length; i++) {\n        // if file is not an image, reject.\n    if (! /\\.(jpg|svg|jpeg|png|bmp|gif)$/i.test(files[i].name)) {\n      return false;\n    }\n\n    list.push(files[i]);\n  }\n\n  return Promise.all(list.map(function (file) { return validateImage(file, width, height); }));\n};\n\nvar merge_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = merge;\nfunction merge() {\n  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var defaults = arguments[1];\n\n  for (var key in defaults) {\n    if (typeof obj[key] === 'undefined') {\n      obj[key] = defaults[key];\n    }\n  }\n  return obj;\n}\nmodule.exports = exports['default'];\n});\n\nvar isByteLength_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.default = isByteLength;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable prefer-rest-params */\nfunction isByteLength(str, options) {\n  (0, _assertString2.default)(str);\n  var min = void 0;\n  var max = void 0;\n  if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n    min = options.min || 0;\n    max = options.max;\n  } else {\n    // backwards compatibility: isByteLength(str, min [, max])\n    min = arguments[1];\n    max = arguments[2];\n  }\n  var len = encodeURI(str).split(/%..|./).length - 1;\n  return len >= min && (typeof max === 'undefined' || len <= max);\n}\nmodule.exports = exports['default'];\n});\n\nvar isFQDN = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isFDQN;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\n\n\nvar _merge2 = _interopRequireDefault(merge_1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar default_fqdn_options = {\n  require_tld: true,\n  allow_underscores: false,\n  allow_trailing_dot: false\n};\n\nfunction isFDQN(str, options) {\n  (0, _assertString2.default)(str);\n  options = (0, _merge2.default)(options, default_fqdn_options);\n\n  /* Remove the optional trailing dot before checking validity */\n  if (options.allow_trailing_dot && str[str.length - 1] === '.') {\n    str = str.substring(0, str.length - 1);\n  }\n  var parts = str.split('.');\n  if (options.require_tld) {\n    var tld = parts.pop();\n    if (!parts.length || !/^([a-z\\u00a1-\\uffff]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {\n      return false;\n    }\n  }\n  for (var part, i = 0; i < parts.length; i++) {\n    part = parts[i];\n    if (options.allow_underscores) {\n      part = part.replace(/_/g, '');\n    }\n    if (!/^[a-z\\u00a1-\\uffff0-9-]+$/i.test(part)) {\n      return false;\n    }\n    if (/[\\uff01-\\uff5e]/.test(part)) {\n      // disallow full-width chars\n      return false;\n    }\n    if (part[0] === '-' || part[part.length - 1] === '-') {\n      return false;\n    }\n  }\n  return true;\n}\nmodule.exports = exports['default'];\n});\n\nvar isEmail_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isEmail;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\n\n\nvar _merge2 = _interopRequireDefault(merge_1);\n\n\n\nvar _isByteLength2 = _interopRequireDefault(isByteLength_1);\n\n\n\nvar _isFQDN2 = _interopRequireDefault(isFQDN);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar default_email_options = {\n  allow_display_name: false,\n  require_display_name: false,\n  allow_utf8_local_part: true,\n  require_tld: true\n};\n\n/* eslint-disable max-len */\n/* eslint-disable no-control-regex */\nvar displayName = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\.\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\.\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\s]*<(.+)>$/i;\nvar emailUserPart = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]+$/i;\nvar quotedEmailUser = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]))*$/i;\nvar emailUserUtf8Part = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+$/i;\nvar quotedEmailUserUtf8 = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*$/i;\n/* eslint-enable max-len */\n/* eslint-enable no-control-regex */\n\nfunction isEmail(str, options) {\n  (0, _assertString2.default)(str);\n  options = (0, _merge2.default)(options, default_email_options);\n\n  if (options.require_display_name || options.allow_display_name) {\n    var display_email = str.match(displayName);\n    if (display_email) {\n      str = display_email[1];\n    } else if (options.require_display_name) {\n      return false;\n    }\n  }\n\n  var parts = str.split('@');\n  var domain = parts.pop();\n  var user = parts.join('@');\n\n  var lower_domain = domain.toLowerCase();\n  if (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com') {\n    user = user.replace(/\\./g, '').toLowerCase();\n  }\n\n  if (!(0, _isByteLength2.default)(user, { max: 64 }) || !(0, _isByteLength2.default)(domain, { max: 256 })) {\n    return false;\n  }\n\n  if (!(0, _isFQDN2.default)(domain, { require_tld: options.require_tld })) {\n    return false;\n  }\n\n  if (user[0] === '\"') {\n    user = user.slice(1, user.length - 1);\n    return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);\n  }\n\n  var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;\n\n  var user_parts = user.split('.');\n  for (var i = 0; i < user_parts.length; i++) {\n    if (!pattern.test(user_parts[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\nmodule.exports = exports['default'];\n});\n\nvar isEmail = unwrapExports(isEmail_1);\n\nvar email = function (value) { return isEmail(String(value)); };\n\nvar ext = function (files, extensions) {\n  var regex = new RegExp((\".(\" + (extensions.join('|')) + \")$\"), 'i');\n\n  return files.every(function (file) { return regex.test(file.name); });\n};\n\nvar image = function (files) { return files.every(function (file) { return /\\.(jpg|svg|jpeg|png|bmp|gif)$/i.test(file.name); }\n); };\n\nvar In = function (value, options) { return !! options.filter(function (option) { return option == value; }).length; }; // eslint-disable-line\n\nvar isIP_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isIP;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ipv4Maybe = /^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/;\nvar ipv6Block = /^[0-9A-F]{1,4}$/i;\n\nfunction isIP(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  (0, _assertString2.default)(str);\n  version = String(version);\n  if (!version) {\n    return isIP(str, 4) || isIP(str, 6);\n  } else if (version === '4') {\n    if (!ipv4Maybe.test(str)) {\n      return false;\n    }\n    var parts = str.split('.').sort(function (a, b) {\n      return a - b;\n    });\n    return parts[3] <= 255;\n  } else if (version === '6') {\n    var blocks = str.split(':');\n    var foundOmissionBlock = false; // marker to indicate ::\n\n    // At least some OS accept the last 32 bits of an IPv6 address\n    // (i.e. 2 of the blocks) in IPv4 notation, and RFC 3493 says\n    // that '::ffff:a.b.c.d' is valid for IPv4-mapped IPv6 addresses,\n    // and '::a.b.c.d' is deprecated, but also valid.\n    var foundIPv4TransitionBlock = isIP(blocks[blocks.length - 1], 4);\n    var expectedNumberOfBlocks = foundIPv4TransitionBlock ? 7 : 8;\n\n    if (blocks.length > expectedNumberOfBlocks) {\n      return false;\n    }\n    // initial or final ::\n    if (str === '::') {\n      return true;\n    } else if (str.substr(0, 2) === '::') {\n      blocks.shift();\n      blocks.shift();\n      foundOmissionBlock = true;\n    } else if (str.substr(str.length - 2) === '::') {\n      blocks.pop();\n      blocks.pop();\n      foundOmissionBlock = true;\n    }\n\n    for (var i = 0; i < blocks.length; ++i) {\n      // test for a :: which can not be at the string start/end\n      // since those cases have been handled above\n      if (blocks[i] === '' && i > 0 && i < blocks.length - 1) {\n        if (foundOmissionBlock) {\n          return false; // multiple :: in address\n        }\n        foundOmissionBlock = true;\n      } else if (foundIPv4TransitionBlock && i === blocks.length - 1) {\n        // it has been checked before that the last\n        // block is a valid IPv4 address\n      } else if (!ipv6Block.test(blocks[i])) {\n        return false;\n      }\n    }\n    if (foundOmissionBlock) {\n      return blocks.length >= 1;\n    }\n    return blocks.length === expectedNumberOfBlocks;\n  }\n  return false;\n}\nmodule.exports = exports['default'];\n});\n\nvar isIP = unwrapExports(isIP_1);\n\nvar ip = function (value, ref) {\n\tif ( ref === void 0 ) ref = [4];\n\tvar version = ref[0];\n\n\treturn isIP(value, version);\n};\n\nvar max = function (value, ref) {\n  var length = ref[0];\n\n  if (value === undefined || value === null) {\n    return length >= 0;\n  }\n\n  return String(value).length <= length;\n};\n\nvar max_value = function (value, ref) {\n  var max = ref[0];\n\n  if (Array.isArray(value) || value === null || value === undefined || value === '') {\n    return false;\n  }\n\n  return Number(value) <= max;\n};\n\nvar mimes = function (files, mimes) {\n  var regex = new RegExp(((mimes.join('|').replace('*', '.+')) + \"$\"), 'i');\n\n  return files.every(function (file) { return regex.test(file.type); });\n};\n\nvar min = function (value, ref) {\n  var length = ref[0];\n\n  if (value === undefined || value === null) {\n    return false;\n  }\n  return String(value).length >= length;\n};\n\nvar min_value = function (value, ref) {\n  var min = ref[0];\n\n  if (Array.isArray(value) || value === null || value === undefined || value === '') {\n    return false;\n  }\n\n  return Number(value) >= min;\n};\n\nvar not_in = function (value, options) { return ! options.filter(function (option) { return option == value; }).length; }; // eslint-disable-line\n\nvar numeric = function (value) { return /^[0-9]+$/.test(String(value)); };\n\nvar regex = function (value, ref) {\n  var regex = ref[0];\n  var flags = ref.slice(1);\n\n  if (regex instanceof RegExp) {\n    return regex.test(value);\n  }\n\n  return new RegExp(regex, flags).test(String(value));\n};\n\nvar required = function (value) {\n  if (Array.isArray(value)) {\n    return !! value.length;\n  }\n\n  if (value === undefined || value === null || value === false) {\n    return false;\n  }\n\n  return !! String(value).trim().length;\n};\n\nvar size = function (files, ref) {\n  var size = ref[0];\n\n  if (isNaN(size)) {\n    return false;\n  }\n\n  var nSize = Number(size) * 1024;\n  for (var i = 0; i < files.length; i++) {\n    if (files[i].size > nSize) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nvar isURL_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isURL;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\n\n\nvar _isFQDN2 = _interopRequireDefault(isFQDN);\n\n\n\nvar _isIP2 = _interopRequireDefault(isIP_1);\n\n\n\nvar _merge2 = _interopRequireDefault(merge_1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar default_url_options = {\n  protocols: ['http', 'https', 'ftp'],\n  require_tld: true,\n  require_protocol: false,\n  require_host: true,\n  require_valid_protocol: true,\n  allow_underscores: false,\n  allow_trailing_dot: false,\n  allow_protocol_relative_urls: false\n};\n\nvar wrapped_ipv6 = /^\\[([^\\]]+)\\](?::([0-9]+))?$/;\n\nfunction isRegExp(obj) {\n  return Object.prototype.toString.call(obj) === '[object RegExp]';\n}\n\nfunction checkHost(host, matches) {\n  for (var i = 0; i < matches.length; i++) {\n    var match = matches[i];\n    if (host === match || isRegExp(match) && match.test(host)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isURL(url, options) {\n  (0, _assertString2.default)(url);\n  if (!url || url.length >= 2083 || /[\\s<>]/.test(url)) {\n    return false;\n  }\n  if (url.indexOf('mailto:') === 0) {\n    return false;\n  }\n  options = (0, _merge2.default)(options, default_url_options);\n  var protocol = void 0,\n      auth = void 0,\n      host = void 0,\n      hostname = void 0,\n      port = void 0,\n      port_str = void 0,\n      split = void 0,\n      ipv6 = void 0;\n\n  split = url.split('#');\n  url = split.shift();\n\n  split = url.split('?');\n  url = split.shift();\n\n  split = url.split('://');\n  if (split.length > 1) {\n    protocol = split.shift();\n    if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {\n      return false;\n    }\n  } else if (options.require_protocol) {\n    return false;\n  } else if (options.allow_protocol_relative_urls && url.substr(0, 2) === '//') {\n    split[0] = url.substr(2);\n  }\n  url = split.join('://');\n\n  split = url.split('/');\n  url = split.shift();\n\n  if (url === '' && !options.require_host) {\n    return true;\n  }\n\n  split = url.split('@');\n  if (split.length > 1) {\n    auth = split.shift();\n    if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {\n      return false;\n    }\n  }\n  hostname = split.join('@');\n\n  port_str = ipv6 = null;\n  var ipv6_match = hostname.match(wrapped_ipv6);\n  if (ipv6_match) {\n    host = '';\n    ipv6 = ipv6_match[1];\n    port_str = ipv6_match[2] || null;\n  } else {\n    split = hostname.split(':');\n    host = split.shift();\n    if (split.length) {\n      port_str = split.join(':');\n    }\n  }\n\n  if (port_str !== null) {\n    port = parseInt(port_str, 10);\n    if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {\n      return false;\n    }\n  }\n\n  if (!(0, _isIP2.default)(host) && !(0, _isFQDN2.default)(host, options) && (!ipv6 || !(0, _isIP2.default)(ipv6, 6)) && host !== 'localhost') {\n    return false;\n  }\n\n  host = host || ipv6;\n\n  if (options.host_whitelist && !checkHost(host, options.host_whitelist)) {\n    return false;\n  }\n  if (options.host_blacklist && checkHost(host, options.host_blacklist)) {\n    return false;\n  }\n\n  return true;\n}\nmodule.exports = exports['default'];\n});\n\nvar isURL = unwrapExports(isURL_1);\n\nvar url = function (value, ref) {\n        if ( ref === void 0 ) ref = [true];\n        var requireProtocol = ref[0];\n\n        return isURL(value, { require_protocol: !! requireProtocol });\n};\n\n/* eslint-disable camelcase */\nvar Rules = {\n  alpha_dash: alpha_dash,\n  alpha_num: alpha_num,\n  alpha_spaces: alpha_spaces,\n  alpha: alpha$$1,\n  between: between,\n  confirmed: confirmed,\n  credit_card: credit_card,\n  decimal: decimal,\n  digits: digits,\n  dimensions: dimensions,\n  email: email,\n  ext: ext,\n  image: image,\n  in: In,\n  ip: ip,\n  max: max,\n  max_value: max_value,\n  mimes: mimes,\n  min: min,\n  min_value: min_value,\n  not_in: not_in,\n  numeric: numeric,\n  regex: regex,\n  required: required,\n  size: size,\n  url: url\n};\n\nvar ErrorBag = function ErrorBag() {\n  this.errors = [];\n};\n\n  /**\n   * Adds an error to the internal array.\n   *\n   * @param {string} field The field name.\n   * @param {string} msg The error message.\n   * @param {String} rule The rule that is responsible for the error.\n   * @param {String} scope The Scope name, optional.\n   */\nErrorBag.prototype.add = function add (field, msg, rule, scope) {\n    if ( scope === void 0 ) scope = '__global__';\n\n  this.errors.push({ field: field, msg: msg, rule: rule, scope: scope });\n};\n\n  /**\n   * Gets all error messages from the internal array.\n   *\n   * @param {String} scope The Scope name, optional.\n   * @return {Array} errors Array of all error messages.\n   */\nErrorBag.prototype.all = function all (scope) {\n  if (! scope) {\n    return this.errors.map(function (e) { return e.msg; });\n  }\n\n  return this.errors.filter(function (e) { return e.scope === scope; }).map(function (e) { return e.msg; });\n};\n\n  /**\n   * Checks if there are any errors in the internal array.\n   * @param {String} scope The Scope name, optional.\n   * @return {boolean} result True if there was at least one error, false otherwise.\n   */\nErrorBag.prototype.any = function any (scope) {\n  if (! scope) {\n    return !! this.errors.length;\n  }\n\n  return !! this.errors.filter(function (e) { return e.scope === scope; }).length;\n};\n\n  /**\n   * Removes all items from the internal array.\n   *\n   * @param {String} scope The Scope name, optional.\n   */\nErrorBag.prototype.clear = function clear (scope) {\n  if (! scope) {\n    scope = '__global__';\n  }\n\n  this.errors = this.errors.filter(function (e) { return e.scope !== scope; });\n};\n\n  /**\n   * Collects errors into groups or for a specific field.\n   *\n   * @param{string} field The field name.\n   * @param{string} scope The scope name.\n   * @param {Boolean} map If it should map the errors to strings instead of objects.\n   * @return {Array} errors The errors for the specified field.\n   */\nErrorBag.prototype.collect = function collect (field, scope, map) {\n    if ( map === void 0 ) map = true;\n\n  if (! field) {\n    var collection = {};\n    this.errors.forEach(function (e) {\n      if (! collection[e.field]) {\n        collection[e.field] = [];\n      }\n\n      collection[e.field].push(map ? e.msg : e);\n    });\n\n    return collection;\n  }\n\n  if (! scope) {\n    return this.errors.filter(function (e) { return e.field === field; }).map(function (e) { return (map ? e.msg : e); });\n  }\n\n  return this.errors.filter(function (e) { return e.field === field && e.scope === scope; })\n                    .map(function (e) { return (map ? e.msg : e); });\n};\n  /**\n   * Gets the internal array length.\n   *\n   * @return {Number} length The internal array length.\n   */\nErrorBag.prototype.count = function count () {\n  return this.errors.length;\n};\n\n  /**\n   * Gets the first error message for a specific field.\n   *\n   * @param{string} field The field name.\n   * @return {string|null} message The error message.\n   */\nErrorBag.prototype.first = function first (field, scope) {\n    var this$1 = this;\n    if ( scope === void 0 ) scope = '__global__';\n\n  var selector = this._selector(field);\n  var scoped = this._scope(field);\n\n  if (scoped) {\n    var result = this.first(scoped.name, scoped.scope);\n    // if such result exist, return it. otherwise it could be a field.\n    // with dot in its name.\n    if (result) {\n      return result;\n    }\n  }\n\n  if (selector) {\n    return this.firstByRule(selector.name, selector.rule, scope);\n  }\n\n  for (var i = 0; i < this.errors.length; i++) {\n    if (this$1.errors[i].field === field && (this$1.errors[i].scope === scope)) {\n      return this$1.errors[i].msg;\n    }\n  }\n\n  return null;\n};\n\n  /**\n   * Returns the first error rule for the specified field\n   *\n   * @param {string} field The specified field.\n   * @return {string|null} First error rule on the specified field if one is found, otherwise null\n   */\nErrorBag.prototype.firstRule = function firstRule (field, scope) {\n  var errors = this.collect(field, scope, false);\n\n  return (errors.length && errors[0].rule) || null;\n};\n\n  /**\n   * Checks if the internal array has at least one error for the specified field.\n   *\n   * @param{string} field The specified field.\n   * @return {Boolean} result True if at least one error is found, false otherwise.\n   */\nErrorBag.prototype.has = function has (field, scope) {\n    if ( scope === void 0 ) scope = '__global__';\n\n  return !! this.first(field, scope);\n};\n\n  /**\n   * Gets the first error message for a specific field and a rule.\n   * @param {String} name The name of the field.\n   * @param {String} rule The name of the rule.\n   * @param {String} scope The name of the scope (optional).\n   */\nErrorBag.prototype.firstByRule = function firstByRule (name, rule, scope) {\n  var error = this.collect(name, scope, false).filter(function (e) { return e.rule === rule; })[0];\n\n  return (error && error.msg) || null;\n};\n\n  /**\n   * Removes all error messages associated with a specific field.\n   *\n   * @param{string} field The field which messages are to be removed.\n   * @param {String} scope The Scope name, optional.\n   */\nErrorBag.prototype.remove = function remove (field, scope) {\n  var filter = scope ? (function (e) { return e.field !== field || e.scope !== scope; }) :\n                         (function (e) { return e.field !== field || e.scope !== '__global__'; });\n\n  this.errors = this.errors.filter(filter);\n};\n\n\n  /**\n   * Get the field attributes if there's a rule selector.\n   *\n   * @param{string} field The specified field.\n   * @return {Object|null}\n   */\nErrorBag.prototype._selector = function _selector (field) {\n  if (field.indexOf(':') > -1) {\n    var ref = field.split(':');\n      var name = ref[0];\n      var rule = ref[1];\n\n    return { name: name, rule: rule };\n  }\n\n  return null;\n};\n\n  /**\n   * Get the field scope if specified using dot notation.\n   *\n   * @param {string} field the specifie field.\n   * @return {Object|null}\n   */\nErrorBag.prototype._scope = function _scope (field) {\n  if (field.indexOf('.') > -1) {\n    var ref = field.split('.');\n      var scope = ref[0];\n      var name = ref[1];\n\n    return { name: name, scope: scope };\n  }\n\n  return null;\n};\n\nvar ValidatorException = (function () {\n  function anonymous(msg) {\n    this.msg = \"[vee-validate]: \" + msg;\n  }\n\n  anonymous.prototype.toString = function toString () {\n    return this.msg;\n  };\n\n  return anonymous;\n}());\n\n/**\n * Gets the data attribute. the name must be kebab-case.\n */\nvar getDataAttribute = function (el, name) { return el.getAttribute((\"data-vv-\" + name)); };\n\n/**\n * Determines the input field scope.\n */\nvar getScope = function (el) {\n  var scope = getDataAttribute(el, 'scope');\n  if (! scope && el.form) {\n    scope = getDataAttribute(el.form, 'scope');\n  }\n\n  return scope;\n};\n\n/**\n * Gets the value in an object safely.\n * @param {String} propPath\n * @param {Object} target\n * @param {*} def\n */\nvar getPath = function (propPath, target, def) {\n  if ( def === void 0 ) def = undefined;\n\n  if (!propPath || !target) { return def; }\n\n  var value = target;\n  propPath.split('.').every(function (prop) {\n    if (! Object.prototype.hasOwnProperty.call(value, prop)) {\n      value = def;\n\n      return false;\n    }\n\n    value = value[prop];\n\n    return true;\n  });\n\n  return value;\n};\n\n/**\n * Debounces a function.\n */\nvar debounce = function (callback, wait, immediate) {\n  if ( wait === void 0 ) wait = 0;\n  if ( immediate === void 0 ) immediate = true;\n\n  var timeout;\n\n  return function () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var later = function () {\n      timeout = null;\n      if (!immediate) { callback.apply(void 0, args); }\n    };\n    var callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) { callback.apply(void 0, args); }\n  };\n};\n\n/**\n * Emits a warning to the console.\n */\nvar warn = function (message) {\n  if (! console) {\n    return;\n  }\n\n    console.warn((\"[vee-validate]: \" + message)); // eslint-disable-line\n};\n\n/**\n * Checks if the value is an object.\n */\nvar isObject = function (object) { return object !== null && object && typeof object === 'object' && ! Array.isArray(object); };\n\n/**\n * Checks if a function is callable.\n */\nvar isCallable = function (func) { return typeof func === 'function'; };\n\n/**\n * Check if element has the css class on it.\n */\nvar hasClass = function (el, className) {\n  if (el.classList) {\n    return el.classList.contains(className);\n  }\n\n  return !!el.className.match(new RegExp((\"(\\\\s|^)\" + className + \"(\\\\s|$)\")));\n};\n\n/**\n * Adds the provided css className to the element.\n */\nvar addClass = function (el, className) {\n  if (el.classList) {\n    el.classList.add(className);\n    return;\n  }\n\n  if (!hasClass(el, className)) {\n    el.className += \" \" + className;\n  }\n};\n\n/**\n * Remove the provided css className from the element.\n */\nvar removeClass = function (el, className) {\n  if (el.classList) {\n    el.classList.remove(className);\n    return;\n  }\n\n  if (hasClass(el, className)) {\n    var reg = new RegExp((\"(\\\\s|^)\" + className + \"(\\\\s|$)\"));\n    el.className = el.className.replace(reg, ' ');\n  }\n};\n\n/**\n * Converts an array-like object to array.\n * Simple polyfill for Array.from\n */\nvar toArray = function (arrayLike) {\n  if (Array.from) {\n    return Array.from(arrayLike);\n  }\n\n  var array = [];\n  var length = arrayLike.length;\n  for (var i = 0; i < length; i++) {\n    array.push(arrayLike[i]);\n  }\n\n  return array;\n};\n\n/**\n * Assign polyfill from the mdn.\n */\nvar assign = function (target) {\n  var others = [], len = arguments.length - 1;\n  while ( len-- > 0 ) others[ len ] = arguments[ len + 1 ];\n\n  if (Object.assign) {\n    return Object.assign.apply(Object, [ target ].concat( others ));\n  }\n\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  var to = Object(target);\n  others.forEach(function (arg) {\n    // Skip over if undefined or null\n    if (arg != null) {\n      Object.keys(arg).forEach(function (key) {\n        to[key] = arg[key];\n      });\n    }\n  });\n\n  return to;\n};\n\n/**\n * polyfills array.find\n * @param {Array} array\n * @param {Function} predicate\n */\nvar find = function (array, predicate) {\n  if (array.find) {\n    return array.find(predicate);\n  }\n\n  var result;\n  array.some(function (item) {\n    if (predicate(item)) {\n      result = item;\n      return true;\n    }\n\n    return false;\n  });\n\n  return result;\n};\n\n/**\n * Gets the rules from a binding value or the element dataset.\n *\n * @param {String} expression The binding expression.\n * @param {Object|String} value The binding value.\n * @param {element} el The element.\n * @returns {String|Object}\n */\nvar getRules = function (expression, value, el) {\n  if (! expression) {\n    return getDataAttribute(el, 'rules');\n  }\n\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  if (~['string', 'object'].indexOf(typeof value.rules)) {\n    return value.rules;\n  }\n\n  return value;\n};\n\nvar Dictionary = function Dictionary(dictionary) {\n  if ( dictionary === void 0 ) dictionary = {};\n\n  this.dictionary = {};\n  this.merge(dictionary);\n};\n\nDictionary.prototype.hasLocale = function hasLocale (locale) {\n  return !! this.dictionary[locale];\n};\n\nDictionary.prototype.getMessage = function getMessage (locale, key, fallback) {\n  if (! this.hasMessage(locale, key)) {\n    return fallback || this._getDefaultMessage(locale);\n  }\n\n  return this.dictionary[locale].messages[key];\n};\n\n/**\n * Gets a specific message for field. fallsback to the rule message.\n *\n * @param {String} locale\n * @param {String} field\n * @param {String} key\n */\nDictionary.prototype.getFieldMessage = function getFieldMessage (locale, field, key) {\n  if (! this.hasLocale(locale)) {\n    return this.getMessage(locale, key);\n  }\n\n  var dict = this.dictionary[locale].custom && this.dictionary[locale].custom[field];\n  if (! dict || ! dict[key]) {\n    return this.getMessage(locale, key);\n  }\n\n  return dict[key];\n};\n\nDictionary.prototype._getDefaultMessage = function _getDefaultMessage (locale) {\n  if (this.hasMessage(locale, '_default')) {\n    return this.dictionary[locale].messages._default;\n  }\n\n  return this.dictionary.en.messages._default;\n};\n\nDictionary.prototype.getAttribute = function getAttribute (locale, key, fallback) {\n    if ( fallback === void 0 ) fallback = '';\n\n  if (! this.hasAttribute(locale, key)) {\n    return fallback;\n  }\n\n  return this.dictionary[locale].attributes[key];\n};\n\nDictionary.prototype.hasMessage = function hasMessage (locale, key) {\n  return !! (\n          this.hasLocale(locale) &&\n          this.dictionary[locale].messages &&\n          this.dictionary[locale].messages[key]\n      );\n};\n\nDictionary.prototype.hasAttribute = function hasAttribute (locale, key) {\n  return !! (\n          this.hasLocale(locale) &&\n          this.dictionary[locale].attributes &&\n          this.dictionary[locale].attributes[key]\n      );\n};\n\nDictionary.prototype.merge = function merge (dictionary) {\n  this._merge(this.dictionary, dictionary);\n};\n\nDictionary.prototype.setMessage = function setMessage (locale, key, message) {\n  if (! this.hasLocale(locale)) {\n    this.dictionary[locale] = {\n      messages: {},\n      attributes: {}\n    };\n  }\n\n  this.dictionary[locale].messages[key] = message;\n};\n\nDictionary.prototype.setAttribute = function setAttribute (locale, key, attribute) {\n  if (! this.hasLocale(locale)) {\n    this.dictionary[locale] = {\n      messages: {},\n      attributes: {}\n    };\n  }\n\n  this.dictionary[locale].attributes[key] = attribute;\n};\n\nDictionary.prototype._merge = function _merge (target, source) {\n    var this$1 = this;\n\n  if (! (isObject(target) && isObject(source))) {\n    return target;\n  }\n\n  Object.keys(source).forEach(function (key) {\n    if (isObject(source[key])) {\n      if (! target[key]) {\n        assign(target, ( obj = {}, obj[key] = {}, obj ));\n          var obj;\n      }\n\n      this$1._merge(target[key], source[key]);\n      return;\n    }\n\n    assign(target, ( obj$1 = {}, obj$1[key] = source[key], obj$1 ));\n      var obj$1;\n  });\n\n  return target;\n};\n\n/* istanbul ignore next */\nvar messages = {\n  _default: function (field) { return (\"The \" + field + \" value is not valid.\"); },\n  alpha_dash: function (field) { return (\"The \" + field + \" field may contain alpha-numeric characters as well as dashes and underscores.\"); },\n  alpha_num: function (field) { return (\"The \" + field + \" field may only contain alpha-numeric characters.\"); },\n  alpha_spaces: function (field) { return (\"The \" + field + \" field may only contain alphabetic characters as well as spaces.\"); },\n  alpha: function (field) { return (\"The \" + field + \" field may only contain alphabetic characters.\"); },\n  between: function (field, ref) {\n    var min = ref[0];\n    var max = ref[1];\n\n    return (\"The \" + field + \" field must be between \" + min + \" and \" + max + \".\");\n},\n  confirmed: function (field) { return (\"The \" + field + \" confirmation does not match.\"); },\n  credit_card: function (field) { return (\"The \" + field + \" field is invalid.\"); },\n  decimal: function (field, ref) {\n    if ( ref === void 0 ) ref = ['*'];\n    var decimals = ref[0];\n\n    return (\"The \" + field + \" field must be numeric and may contain \" + (decimals === '*' ? '' : decimals) + \" decimal points.\");\n},\n  digits: function (field, ref) {\n    var length = ref[0];\n\n    return (\"The \" + field + \" field must be numeric and exactly contain \" + length + \" digits.\");\n},\n  dimensions: function (field, ref) {\n    var width = ref[0];\n    var height = ref[1];\n\n    return (\"The \" + field + \" field must be \" + width + \" pixels by \" + height + \" pixels.\");\n},\n  email: function (field) { return (\"The \" + field + \" field must be a valid email.\"); },\n  ext: function (field) { return (\"The \" + field + \" field must be a valid file.\"); },\n  image: function (field) { return (\"The \" + field + \" field must be an image.\"); },\n  in: function (field) { return (\"The \" + field + \" field must be a valid value.\"); },\n  ip: function (field) { return (\"The \" + field + \" field must be a valid ip address.\"); },\n  max: function (field, ref) {\n    var length = ref[0];\n\n    return (\"The \" + field + \" field may not be greater than \" + length + \" characters.\");\n},\n  max_value: function (field, ref) {\n    var max = ref[0];\n\n    return (\"The \" + field + \" field must be \" + max + \" or less.\");\n},\n  mimes: function (field) { return (\"The \" + field + \" field must have a valid file type.\"); },\n  min: function (field, ref) {\n    var length = ref[0];\n\n    return (\"The \" + field + \" field must be at least \" + length + \" characters.\");\n},\n  min_value: function (field, ref) {\n    var min = ref[0];\n\n    return (\"The \" + field + \" field must be \" + min + \" or more.\");\n},\n  not_in: function (field) { return (\"The \" + field + \" field must be a valid value.\"); },\n  numeric: function (field) { return (\"The \" + field + \" field may only contain numeric characters.\"); },\n  regex: function (field) { return (\"The \" + field + \" field format is invalid.\"); },\n  required: function (field) { return (\"The \" + field + \" field is required.\"); },\n  size: function (field, ref) {\n    var size = ref[0];\n\n    return (\"The \" + field + \" field must be less than \" + size + \" KB.\");\n},\n  url: function (field) { return (\"The \" + field + \" field is not a valid URL.\"); }\n};\n\nvar after = function (moment) { return function (value, ref) {\n  var targetField = ref[0];\n  var inclusion = ref[1];\n  var format = ref[2];\n\n  var field = document.querySelector((\"input[name='\" + targetField + \"']\"));\n  if (typeof format === 'undefined') {\n    format = inclusion;\n    inclusion = false;\n  }\n  var dateValue = moment(value, format, true);\n  var otherValue = moment(field ? field.value : targetField, format, true);\n\n  // if either is not valid.\n  if (! dateValue.isValid() || ! otherValue.isValid()) {\n    return false;\n  }\n\n  return dateValue.isAfter(otherValue) || (inclusion && dateValue.isSame(otherValue));\n}; };\n\nvar before = function (moment) { return function (value, ref) {\n  var targetField = ref[0];\n  var inclusion = ref[1];\n  var format = ref[2];\n\n  var field = document.querySelector((\"input[name='\" + targetField + \"']\"));\n  if (typeof format === 'undefined') {\n    format = inclusion;\n    inclusion = false;\n  }\n  var dateValue = moment(value, format, true);\n  var otherValue = moment(field ? field.value : targetField, format, true);\n\n  // if either is not valid.\n  if (! dateValue.isValid() || ! otherValue.isValid()) {\n    return false;\n  }\n\n  return dateValue.isBefore(otherValue) || (inclusion && dateValue.isSame(otherValue));\n}; };\n\nvar date_format = function (moment) { return function (value, ref) {\n\tvar format = ref[0];\n\n\treturn moment(value, format, true).isValid();\n }\t};\n\nvar date_between = function (moment) { return function (value, params) {\n  var min;\n  var max;\n  var format;\n  var inclusivity = '()';\n\n  if (params.length > 3) {\n    var assign;\n    (assign = params, min = assign[0], max = assign[1], inclusivity = assign[2], format = assign[3]);\n  } else {\n    var assign$1;\n    (assign$1 = params, min = assign$1[0], max = assign$1[1], format = assign$1[2]);\n  }\n\n  var minDate = moment(min, format, true);\n  var maxDate = moment(max, format, true);\n  var dateVal = moment(value, format, true);\n\n  if (! (minDate.isValid() && maxDate.isValid() && dateVal.isValid())) {\n    return false;\n  }\n\n  return dateVal.isBetween(minDate, maxDate, 'days', inclusivity);\n}; };\n\n/* istanbul ignore next */\n/* eslint-disable max-len */\nvar messages$1 = {\n  after: function (field, ref) {\n    var target = ref[0];\n\n    return (\"The \" + field + \" must be after \" + target + \".\");\n},\n  before: function (field, ref) {\n    var target = ref[0];\n\n    return (\"The \" + field + \" must be before \" + target + \".\");\n},\n  date_between: function (field, ref) {\n    var min = ref[0];\n    var max = ref[1];\n\n    return (\"The \" + field + \" must be between \" + min + \" and \" + max + \".\");\n},\n  date_format: function (field, ref) {\n    var format = ref[0];\n\n    return (\"The \" + field + \" must be in the format \" + format + \".\");\n}\n};\n\nvar date = {\n  make: function (moment) { return ({\n    date_format: date_format(moment),\n    after: after(moment),\n    before: before(moment),\n    date_between: date_between(moment)\n  }); },\n  messages: messages$1,\n  installed: false\n};\n\nvar LOCALE = 'en';\nvar STRICT_MODE = true;\nvar DICTIONARY = new Dictionary({\n  en: {\n    messages: messages,\n    attributes: {},\n    custom: {}\n  }\n});\n\nvar Validator = function Validator(validations, options) {\n  if ( options === void 0 ) options = { init: true, vm: null };\n\n  this.strictMode = STRICT_MODE;\n  this.$scopes = { __global__: {} };\n  this._createFields(validations);\n  this.errorBag = new ErrorBag();\n  this.fieldBag = {};\n  this.paused = false;\n  this.$vm = options.vm;\n\n  // Some fields will be later evaluated, because the vm isn't mounted yet\n  // so it may register it under an inaccurate scope.\n  this.$deferred = [];\n  this.$ready = false;\n\n  // if momentjs is present, install the validators.\n  if (typeof moment === 'function') {\n    // eslint-disable-next-line\n    this.installDateTimeValidators(moment);\n  }\n\n  if (options.init) {\n    this.init();\n  }\n};\n\nvar prototypeAccessors = { dictionary: {},locale: {},rules: {} };\n\n/**\n * @return {Dictionary}\n */\nprototypeAccessors.dictionary.get = function () {\n  return DICTIONARY;\n};\n\n/**\n * @return {String}\n */\nprototypeAccessors.locale.get = function () {\n  return LOCALE;\n};\n\n/**\n * @return {Object}\n */\nprototypeAccessors.rules.get = function () {\n  return Rules;\n};\n\n/**\n * Merges a validator object into the Rules and Messages.\n *\n * @param{string} name The name of the validator.\n * @param{function|object} validator The validator object.\n */\nValidator._merge = function _merge (name, validator) {\n  if (isCallable(validator)) {\n    Rules[name] = validator;\n    return;\n  }\n\n  Rules[name] = validator.validate;\n  if (isCallable(validator.getMessage)) {\n    DICTIONARY.setMessage(LOCALE, name, validator.getMessage);\n  }\n\n  if (validator.messages) {\n    DICTIONARY.merge(\n      Object.keys(validator.messages).reduce(function (prev, curr) {\n        var dict = prev;\n        dict[curr] = {\n          messages: ( obj = {}, obj[name] = validator.messages[curr], obj )\n        };\n          var obj;\n\n        return dict;\n      }, {})\n    );\n  }\n};\n\n/**\n * Guards from extnsion violations.\n *\n * @param{string} name name of the validation rule.\n * @param{object} validator a validation rule object.\n */\nValidator._guardExtend = function _guardExtend (name, validator) {\n  if (Rules[name]) {\n    throw new ValidatorException(\n      (\"Extension Error: There is an existing validator with the same name '\" + name + \"'.\")\n    );\n  }\n\n  if (isCallable(validator)) {\n    return;\n  }\n\n  if (! isCallable(validator.validate)) {\n    throw new ValidatorException(\n      // eslint-disable-next-line\n      (\"Extension Error: The validator '\" + name + \"' must be a function or have a 'validate' method.\")\n    );\n  }\n\n  if (! isCallable(validator.getMessage) && ! isObject(validator.messages)) {\n    throw new ValidatorException(\n      // eslint-disable-next-line\n      (\"Extension Error: The validator '\" + name + \"' must have a 'getMessage' method or have a 'messages' object.\")\n    );\n  }\n};\n\n/**\n * Static constructor.\n *\n * @param{object} validations The validations object.\n * @return {Validator} validator A validator object.\n */\nValidator.create = function create (validations, options) {\n  return new Validator(validations, options);\n};\n\n/**\n * Adds a custom validator to the list of validation rules.\n *\n * @param{string} name The name of the validator.\n * @param{object|function} validator The validator object/function.\n */\nValidator.extend = function extend (name, validator) {\n  Validator._guardExtend(name, validator);\n  Validator._merge(name, validator);\n};\n\n/**\n * Installs the datetime validators and the messages.\n */\nValidator.installDateTimeValidators = function installDateTimeValidators (moment) {\n  if (typeof moment !== 'function') {\n    warn('To use the date-time validators you must provide moment reference.');\n\n    return false;\n  }\n\n  if (date.installed) {\n    return true;\n  }\n\n  var validators = date.make(moment);\n  Object.keys(validators).forEach(function (name) {\n    Validator.extend(name, validators[name]);\n  });\n\n  Validator.updateDictionary({\n    en: {\n      messages: date.messages\n    }\n  });\n  date.installed = true;\n\n  return true;\n};\n\n/**\n * Removes a rule from the list of validators.\n * @param {String} name The name of the validator/rule.\n */\nValidator.remove = function remove (name) {\n  delete Rules[name];\n};\n\n/**\n * Sets the default locale for all validators.\n *\n * @param {String} language The locale id.\n */\nValidator.setLocale = function setLocale (language) {\n    if ( language === void 0 ) language = 'en';\n\n  /* istanbul ignore if */\n  if (! DICTIONARY.hasLocale(language)) {\n    // eslint-disable-next-line\n    warn('You are setting the validator locale to a locale that is not defined in the dicitionary. English messages may still be generated.');\n  }\n\n  LOCALE = language;\n};\n\n/**\n * Sets the operating mode for all newly created validators.\n * strictMode = true: Values without a rule are invalid and cause failure.\n * strictMode = false: Values without a rule are valid and are skipped.\n * @param {Boolean} strictMode.\n */\nValidator.setStrictMode = function setStrictMode (strictMode) {\n    if ( strictMode === void 0 ) strictMode = true;\n\n  STRICT_MODE = strictMode;\n};\n\n/**\n * Updates the dicitionary, overwriting existing values and adding new ones.\n *\n * @param{object} data The dictionary object.\n */\nValidator.updateDictionary = function updateDictionary (data) {\n  DICTIONARY.merge(data);\n};\n\nValidator.addLocale = function addLocale (locale) {\n  if (! locale.name) {\n    warn('Your locale must have a name property');\n    return;\n  }\n\n  this.updateDictionary(( obj = {}, obj[locale.name] = locale, obj ));\n    var obj;\n};\n\nValidator.prototype.addLocale = function addLocale (locale) {\n  Validator.addLocale(locale);\n};\n\n/**\n * Resolves the scope value. Only strings and functions are allowed.\n * @param {Function|String} scope\n * @returns {String}\n */\nValidator.prototype._resolveScope = function _resolveScope (scope) {\n  if (typeof scope === 'string') {\n    return scope;\n  }\n\n  // The resolved value should be string.\n  if (isCallable(scope)) {\n    var value = scope();\n    return typeof value === 'string' ? value : '__global__';\n  }\n\n  return '__global__';\n};\n\n/**\n * Resolves the field values from the getter functions.\n */\nValidator.prototype._resolveValuesFromGetters = function _resolveValuesFromGetters (scope) {\n    var this$1 = this;\n    if ( scope === void 0 ) scope = '__global__';\n\n  if (! this.$scopes[scope]) {\n    return {};\n  }\n  var values = {};\n  Object.keys(this.$scopes[scope]).forEach(function (name) {\n    var field = this$1.$scopes[scope][name];\n    var getter = field.getter;\n    var context = field.context;\n    var fieldScope = this$1._resolveScope(field.scope);\n    if (getter && context && (scope === '__global__' || fieldScope === scope)) {\n      values[name] = {\n        value: getter(context()),\n        scope: fieldScope\n      };\n    }\n  });\n\n  return values;\n};\n\n/**\n * Creates the fields to be validated.\n *\n * @param{object} validations\n * @return {object} Normalized object.\n */\nValidator.prototype._createFields = function _createFields (validations) {\n    var this$1 = this;\n\n  if (! validations) {\n    return;\n  }\n\n  Object.keys(validations).forEach(function (field) {\n    this$1._createField(field, validations[field]);\n  });\n};\n\n/**\n * Creates a field entry in the fields object.\n * @param {String} name.\n * @param {String|Array} checks.\n */\nValidator.prototype._createField = function _createField (name, checks, scope) {\n    if ( scope === void 0 ) scope = '__global__';\n\n  scope = this._resolveScope(scope);\n  if (! this.$scopes[scope]) {\n    this.$scopes[scope] = {};\n  }\n\n  if (! this.$scopes[scope][name]) {\n    this.$scopes[scope][name] = {};\n  }\n\n  var field = this.$scopes[scope][name];\n  field.validations = this._normalizeRules(name, checks, scope);\n  field.required = this._isRequired(field);\n};\n\n/**\n * Normalizes rules.\n * @return {Object}\n */\nValidator.prototype._normalizeRules = function _normalizeRules (name, checks, scope) {\n  if (! checks) { return {}; }\n\n  if (typeof checks === 'string') {\n    return this._normalizeString(checks);\n  }\n\n  if (! isObject(checks)) {\n    warn((\"Your checks for '\" + scope + \".\" + name + \"' must be either a string or an object.\"));\n    return {};\n  }\n\n  return this._normalizeObject(checks);\n};\n\n/**\n * Checks if a field has a required rule.\n */\nValidator.prototype._isRequired = function _isRequired (field) {\n  return field.validations && field.validations.required;\n};\n\n/**\n * Normalizes an object of rules.\n */\nValidator.prototype._normalizeObject = function _normalizeObject (rules) {\n    var this$1 = this;\n\n  var validations = {};\n  Object.keys(rules).forEach(function (rule) {\n    var params = [];\n    if (rules[rule] === true) {\n      params = [];\n    } else if (Array.isArray(rules[rule])) {\n      params = rules[rule];\n    } else {\n      params = [rules[rule]];\n    }\n\n    if (rules[rule] === false) {\n      delete validations[rule];\n    } else {\n      validations[rule] = params;\n    }\n\n    if (date.installed && this$1._isADateRule(rule)) {\n      var dateFormat = this$1._getDateFormat(validations);\n\n      if (! this$1._containsValidation(validations[rule], dateFormat)) {\n        validations[rule].push(this$1._getDateFormat(validations));\n      }\n    }\n  });\n\n  return validations;\n};\n\n/**\n * Date rules need the existance of a format, so date_format must be supplied.\n * @param {String} name The rule name.\n * @param {Array} validations the field validations.\n */\nValidator.prototype._getDateFormat = function _getDateFormat (validations) {\n  if (validations.date_format && Array.isArray(validations.date_format)) {\n    return validations.date_format[0];\n  }\n\n  return null;\n};\n\n/**\n * Checks if the passed rule is a date rule.\n */\nValidator.prototype._isADateRule = function _isADateRule (rule) {\n  return !! ~['after', 'before', 'date_between'].indexOf(rule);\n};\n\n/**\n * Checks if the passed validation appears inside the array.\n */\nValidator.prototype._containsValidation = function _containsValidation (validations, validation) {\n  return !! ~validations.indexOf(validation);\n};\n\n/**\n * Normalizes string rules.\n * @param {String} rules The rules that will be normalized.\n * @param {Object} field The field object that is being operated on.\n */\nValidator.prototype._normalizeString = function _normalizeString (rules) {\n    var this$1 = this;\n\n  var validations = {};\n  rules.split('|').forEach(function (rule) {\n    var parsedRule = this$1._parseRule(rule);\n    if (! parsedRule.name) {\n      return;\n    }\n\n    if (parsedRule.name === 'required') {\n      validations.required = true;\n    }\n\n    validations[parsedRule.name] = parsedRule.params;\n    if (date.installed && this$1._isADateRule(parsedRule.name)) {\n      var dateFormat = this$1._getDateFormat(validations);\n\n      if (! this$1._containsValidation(validations[parsedRule.name], dateFormat)) {\n        validations[parsedRule.name].push(this$1._getDateFormat(validations));\n      }\n    }\n  });\n\n  return validations;\n};\n\n/**\n * Normalizes a string rule.\n *\n * @param {string} rule The rule to be normalized.\n * @return {object} rule The normalized rule.\n */\nValidator.prototype._parseRule = function _parseRule (rule) {\n  var params = [];\n  var name = rule.split(':')[0];\n\n  if (~rule.indexOf(':')) {\n    params = rule.split(':').slice(1).join(':').split(',');\n  }\n\n  return { name: name, params: params };\n};\n\n/**\n * Formats an error message for field and a rule.\n *\n * @param{string} field The field name.\n * @param{object} rule Normalized rule object.\n * @param {object} data Additional Information about the validation result.\n * @param {string} scope The field scope.\n * @return {string} Formatted error message.\n */\nValidator.prototype._formatErrorMessage = function _formatErrorMessage (field, rule, data, scope) {\n    if ( data === void 0 ) data = {};\n    if ( scope === void 0 ) scope = '__global__';\n\n  var name = this._getFieldDisplayName(field, scope);\n  var params = this._getLocalizedParams(rule, scope);\n  // Defaults to english message.\n  if (! this.dictionary.hasLocale(LOCALE)) {\n    var msg$1 = this.dictionary.getFieldMessage('en', field, rule.name);\n\n    return isCallable(msg$1) ? msg$1(name, params, data) : msg$1;\n  }\n\n  var msg = this.dictionary.getFieldMessage(LOCALE, field, rule.name);\n\n  return isCallable(msg) ? msg(name, params, data) : msg;\n};\n\n/**\n * Translates the parameters passed to the rule (mainly for target fields).\n */\nValidator.prototype._getLocalizedParams = function _getLocalizedParams (rule, scope) {\n    if ( scope === void 0 ) scope = '__global__';\n\n  if (~ ['after', 'before', 'confirmed'].indexOf(rule.name) &&\n      rule.params && rule.params[0]) {\n    var param = this.$scopes[scope][rule.params[0]];\n    if (param && param.name) { return [param.name]; }\n    return [this.dictionary.getAttribute(LOCALE, rule.params[0], rule.params[0])];\n  }\n\n  return rule.params;\n};\n\n/**\n * Resolves an appropiate display name, first checking 'data-as' or the registered 'prettyName'\n * Then the dictionary, then fallsback to field name.\n * @return {String} displayName The name to be used in the errors.\n */\nValidator.prototype._getFieldDisplayName = function _getFieldDisplayName (field, scope) {\n    if ( scope === void 0 ) scope = '__global__';\n\n  return this.$scopes[scope][field].as || this.dictionary.getAttribute(LOCALE, field, field);\n};\n\n/**\n * Tests a single input value against a rule.\n *\n * @param{*} name The name of the field.\n * @param{*} valuethe value of the field.\n * @param{object} rule the rule object.\n * @param {scope} scope The field scope.\n * @return {boolean} Whether it passes the check.\n */\nValidator.prototype._test = function _test (name, value, rule, scope) {\n    var this$1 = this;\n    if ( scope === void 0 ) scope = '__global__';\n\n  var validator = Rules[rule.name];\n  if (! validator || typeof validator !== 'function') {\n    throw new ValidatorException((\"No such validator '\" + (rule.name) + \"' exists.\"));\n  }\n\n  var result = validator(value, rule.params, name);\n\n  // If it is a promise.\n  if (isCallable(result.then)) {\n    return result.then(function (values) {\n      var allValid = true;\n      var data = {};\n      if (Array.isArray(values)) {\n        allValid = values.every(function (t) { return t.valid; });\n      } else { // Is a single object.\n        allValid = values.valid;\n        data = values.data;\n      }\n\n      if (! allValid) {\n        this$1.errorBag.add(\n                      name,\n                      this$1._formatErrorMessage(name, rule, data, scope),\n                      rule.name,\n                      scope\n                  );\n      }\n\n      return allValid;\n    });\n  }\n\n  if (! isObject(result)) {\n    result = { valid: result, data: {} };\n  }\n\n  if (! result.valid) {\n    this.errorBag.add(\n              name,\n              this._formatErrorMessage(name, rule, result.data, scope),\n              rule.name,\n              scope\n          );\n  }\n\n  return result.valid;\n};\n\n/**\n * Adds an event listener for a specific field.\n * @param {String} name\n * @param {String} fieldName\n * @param {Function} callback\n */\nValidator.prototype.on = function on (name, fieldName, scope, callback) {\n  if (! fieldName) {\n    throw new ValidatorException((\"Cannot add a listener for non-existent field \" + fieldName + \".\"));\n  }\n\n  if (! isCallable(callback)) {\n    throw new ValidatorException((\"The \" + name + \" callback for field \" + fieldName + \" is not callable.\"));\n  }\n\n  this.$scopes[scope][fieldName].events[name] = callback;\n};\n\n/**\n * Removes the event listener for a specific field.\n * @param {String} name\n * @param {String} fieldName\n */\nValidator.prototype.off = function off (name, fieldName, scope) {\n  if (! fieldName) {\n    warn((\"Cannot remove a listener for non-existent field \" + fieldName + \".\"));\n  }\n\n  this.$scopes[scope][fieldName].events[name] = undefined;\n};\n\nValidator.prototype._assignFlags = function _assignFlags (field) {\n  field.flags = {\n    untouched: true,\n    touched: false,\n    dirty: false,\n    pristine: true,\n    valid: null,\n    invalid: null,\n    required: field.required,\n    pending: false\n  };\n\n  var flagObj = {};\n    flagObj[field.name] = field.flags;\n  if (field.scope === '__global__') {\n    this.fieldBag = assign({}, this.fieldBag, flagObj);\n    return;\n  }\n\n  var scopeObj = assign({}, this.fieldBag[(\"$\" + (field.scope))], flagObj);\n\n  this.fieldBag = assign({}, this.fieldBag, ( obj = {}, obj[(\"$\" + (field.scope))] = scopeObj, obj ));\n    var obj;\n};\n\n/**\n * Registers a field to be validated.\n *\n * @param{string} name The field name.\n * @param{String|Array|Object} checks validations expression.\n * @param {string} prettyName Custom name to be used as field name in error messages.\n * @param {Function} getter A function used to retrive a fresh value for the field.\n */\nValidator.prototype.attach = function attach (name, checks, options) {\n    var this$1 = this;\n    if ( options === void 0 ) options = {};\n\n  var attach = function () {\n    options.scope = this$1._resolveScope(options.scope);\n    this$1.updateField(name, checks, options);\n    var field = this$1.$scopes[options.scope][name];\n    field.scope = options.scope;\n    field.name = name;\n    field.as = options.prettyName;\n    field.getter = options.getter;\n    field.context = options.context;\n    field.listeners = options.listeners || { detach: function detach() {} };\n    field.el = field.listeners.el;\n    field.events = {};\n    this$1._assignFlags(field);\n    // cache the scope property.\n    if (field.el && isCallable(field.el.setAttribute)) {\n      field.el.setAttribute('data-vv-scope', field.scope);\n    }\n\n    if (field.listeners.classes) {\n      field.listeners.classes.attach(field);\n    }\n    this$1._setAriaRequiredAttribute(field);\n    this$1._setAriaValidAttribute(field, true);\n    // if initial modifier is applied, validate immediatly.\n    if (options.initial) {\n      this$1.validate(name, field.getter(field.context()), field.scope).catch(function () {});\n    }\n  };\n\n  var scope = isCallable(options.scope) ? options.scope() : options.scope;\n  if (! scope && ! this.$ready) {\n    this.$deferred.push(attach);\n    return;\n  }\n\n  attach();\n};\n\n/**\n * Initializes the non-scoped fields and any bootstrap logic.\n */\nValidator.prototype.init = function init () {\n  this.$ready = true;\n  this.$deferred.forEach(function (attach) {\n    attach();\n  });\n  this.$deferred = [];\n\n  return this;\n};\n\n/**\n * Sets the flags on a field.\n *\n * @param {String} name\n * @param {Object} flags\n */\nValidator.prototype.flag = function flag (name, flags) {\n  var ref = name.split('.');\n    var scope = ref[0];\n    var fieldName = ref[1];\n  if (!fieldName) {\n    fieldName = scope;\n    scope = null;\n  }\n  var field = scope ? getPath((scope + \".\" + fieldName), this.$scopes) :\n                        this.$scopes.__global__[fieldName];\n  if (! field) {\n    return;\n  }\n\n  Object.keys(field.flags).forEach(function (flag) {\n    field.flags[flag] = flags[flag] !== undefined ? flags[flag] : field.flags[flag];\n  });\n  field.listeners.classes.sync();\n};\n\n/**\n * Append another validation to an existing field.\n *\n * @param{string} name The field name.\n * @param{string} checks validations expression.\n */\nValidator.prototype.append = function append (name, checks, options) {\n    if ( options === void 0 ) options = {};\n\n  options.scope = this._resolveScope(options.scope);\n  // No such field\n  if (! this.$scopes[options.scope] || ! this.$scopes[options.scope][name]) {\n    this.attach(name, checks, options);\n  }\n\n  var field = this.$scopes[options.scope][name];\n  var newChecks = this._normalizeRules(name, checks, options.scope);\n  Object.keys(newChecks).forEach(function (key) {\n    field.validations[key] = newChecks[key];\n  });\n};\n\n/**\n * Updates the field rules with new ones.\n */\nValidator.prototype.updateField = function updateField (name, checks, options) {\n    if ( options === void 0 ) options = {};\n\n  var field = getPath(((options.scope) + \".\" + name), this.$scopes, null);\n  var oldChecks = field ? JSON.stringify(field.validations) : '';\n  this._createField(name, checks, options.scope);\n  field = getPath(((options.scope) + \".\" + name), this.$scopes, null);\n  var newChecks = field ? JSON.stringify(field.validations) : '';\n\n  // compare both newChecks and oldChecks to make sure we don't trigger uneccessary directive\n  // update by changing the errorBag (prevents infinite loops).\n  if (newChecks !== oldChecks) {\n    this.errorBag.remove(name, options.scope);\n  }\n};\n\n/**\n * Clears the errors from the errorBag using the next tick if possible.\n */\nValidator.prototype.clean = function clean () {\n    var this$1 = this;\n\n  if (! this.$vm || ! isCallable(this.$vm.$nextTick)) {\n    return;\n  }\n\n  this.$vm.$nextTick(function () {\n    this$1.errorBag.clear();\n  });\n};\n\n/**\n * Removes a field from the validator.\n *\n * @param{String} name The name of the field.\n * @param {String} scope The name of the field scope.\n */\nValidator.prototype.detach = function detach (name, scope) {\n    if ( scope === void 0 ) scope = '__global__';\n\n  // No such field.\n  if (! this.$scopes[scope] || ! this.$scopes[scope][name]) {\n    return;\n  }\n\n  if (this.$scopes[scope][name].listeners) {\n    this.$scopes[scope][name].listeners.detach();\n  }\n\n  this.errorBag.remove(name, scope);\n  delete this.$scopes[scope][name];\n};\n\n/**\n * Adds a custom validator to the list of validation rules.\n *\n * @param{string} name The name of the validator.\n * @param{object|function} validator The validator object/function.\n */\nValidator.prototype.extend = function extend (name, validator) {\n  Validator.extend(name, validator);\n};\n\n/**\n * Gets the internal errorBag instance.\n *\n * @return {ErrorBag} errorBag The internal error bag object.\n */\nValidator.prototype.getErrors = function getErrors () {\n  return this.errorBag;\n};\n\n/**\n * Just an alias to the static method for convienece.\n */\nValidator.prototype.installDateTimeValidators = function installDateTimeValidators (moment) {\n  Validator.installDateTimeValidators(moment);\n};\n\n/**\n * Removes a rule from the list of validators.\n * @param {String} name The name of the validator/rule.\n */\nValidator.prototype.remove = function remove (name) {\n  Validator.remove(name);\n};\n\n/**\n * Sets the validator current langauge.\n *\n * @param {string} language locale or language id.\n */\nValidator.prototype.setLocale = function setLocale (language) {\n  /* istanbul ignore if */\n  if (! this.dictionary.hasLocale(language)) {\n    // eslint-disable-next-line\n    warn('You are setting the validator locale to a locale that is not defined in the dicitionary. English messages may still be generated.');\n  }\n\n  LOCALE = language;\n};\n\n/**\n * Sets the operating mode for this validator.\n * strictMode = true: Values without a rule are invalid and cause failure.\n * strictMode = false: Values without a rule are valid and are skipped.\n * @param {Boolean} strictMode.\n */\nValidator.prototype.setStrictMode = function setStrictMode (strictMode) {\n    if ( strictMode === void 0 ) strictMode = true;\n\n  this.strictMode = strictMode;\n};\n\n/**\n * Updates the messages dicitionary, overwriting existing values and adding new ones.\n *\n * @param{object} data The messages object.\n */\nValidator.prototype.updateDictionary = function updateDictionary (data) {\n  Validator.updateDictionary(data);\n};\n\n/**\n * Adds a scope.\n */\nValidator.prototype.addScope = function addScope (scope) {\n  if (scope && ! this.$scopes[scope]) {\n    this.$scopes[scope] = {};\n  }\n};\n\n/**\n * Validates a value against a registered field validations.\n *\n * @param{string} name the field name.\n * @param{*} value The value to be validated.\n * @param {String} scope The scope of the field.\n * @param {Boolean} throws If it should throw.\n * @return {Promise}\n */\nValidator.prototype.validate = function validate (name, value, scope, throws) {\n    var this$1 = this;\n    if ( scope === void 0 ) scope = '__global__';\n    if ( throws === void 0 ) throws = true;\n\n  if (this.paused) { return Promise.resolve(true); }\n\n  if (name && name.indexOf('.') > -1) {\n    // no such field, try the scope form.\n    if (! this.$scopes.__global__[name]) {\n      var assign$$1;\n        (assign$$1 = name.split('.'), scope = assign$$1[0], name = assign$$1[1]);\n    }\n  }\n  if (! scope) { scope = '__global__'; }\n  if (! this.$scopes[scope] || ! this.$scopes[scope][name]) {\n    if (! this.strictMode) { return Promise.resolve(true); }\n\n    var fullName = scope === '__global__' ? name : (scope + \".\" + name);\n    warn((\"Validating a non-existant field: \\\"\" + fullName + \"\\\". Use \\\"attach()\\\" first.\"));\n\n    throw new ValidatorException('Validation Failed');\n  }\n\n  var field = this.$scopes[scope][name];\n  if (field.flags) {\n    field.flags.pending = true;\n  }\n  this.errorBag.remove(name, scope);\n  // if its not required and is empty or null or undefined then it passes.\n  if (! field.required && ~[null, undefined, ''].indexOf(value)) {\n    this._setAriaValidAttribute(field, true);\n    if (field.events && isCallable(field.events.after)) {\n      field.events.after({ valid: true });\n    }\n\n    return Promise.resolve(true);\n  }\n\n  try {\n    var promises = Object.keys(field.validations).map(function (rule) {\n      var result = this$1._test(\n        name,\n        value,\n        { name: rule, params: field.validations[rule] },\n        scope\n      );\n\n      if (isCallable(result.then)) {\n        return result;\n      }\n\n      // Early exit.\n      if (! result) {\n        if (field.events && isCallable(field.events.after)) {\n          field.events.after({ valid: false });\n        }\n        throw new ValidatorException('Validation Aborted.');\n      }\n\n      if (field.events && isCallable(field.events.after)) {\n        field.events.after({ valid: true });\n      }\n      return Promise.resolve(result);\n    });\n\n    return Promise.all(promises).then(function (values) {\n      var valid = values.every(function (t) { return t; });\n      this$1._setAriaValidAttribute(field, valid);\n\n      if (! valid && throws) {\n        if (field.events && isCallable(field.events.after)) {\n          field.events.after({ valid: false });\n        }\n        throw new ValidatorException('Failed Validation');\n      }\n      return valid;\n    });\n  } catch (error) {\n    if (error.msg === '[vee-validate]: Validation Aborted.') {\n      if (field.events && isCallable(field.events.after)) {\n        field.events.after({ valid: false });\n      }\n      return Promise.resolve(false);\n    }\n\n    throw error;\n  }\n};\n\n/**\n * Sets the aria-invalid attribute on the element.\n */\nValidator.prototype._setAriaValidAttribute = function _setAriaValidAttribute (field, valid) {\n  if (! field.el || field.listeners.component) {\n    return;\n  }\n\n  field.el.setAttribute('aria-invalid', !valid);\n};\n\n/**\n * Sets the aria-required attribute on the element.\n */\nValidator.prototype._setAriaRequiredAttribute = function _setAriaRequiredAttribute (field) {\n  if (! field.el || field.listeners.component) {\n    return;\n  }\n\n  field.el.setAttribute('aria-required', !! field.required);\n};\n\n/**\n * Pauses the validator.\n *\n * @return {Validator}\n */\nValidator.prototype.pause = function pause () {\n  this.paused = true;\n\n  return this;\n};\n\n/**\n * Resumes the validator.\n *\n * @return {Validator}\n */\nValidator.prototype.resume = function resume () {\n  this.paused = false;\n\n  return this;\n};\n\n/**\n * Validates each value against the corresponding field validations.\n * @param{object} values The values to be validated.\n * @param{String} scope The scope to be applied on validation.\n * @return {Promise} Returns a promise with the validation result.\n */\nValidator.prototype.validateAll = function validateAll (values, scope) {\n    var this$1 = this;\n    if ( scope === void 0 ) scope = '__global__';\n\n  if (this.paused) { return Promise.resolve(true); }\n\n  var normalizedValues;\n  if (! values || typeof values === 'string') {\n    this.errorBag.clear(values);\n    normalizedValues = this._resolveValuesFromGetters(values);\n  } else {\n    normalizedValues = {};\n    Object.keys(values).forEach(function (key) {\n      normalizedValues[key] = {\n        value: values[key],\n        scope: scope\n      };\n    });\n  }\n  var promises = Object.keys(normalizedValues).map(function (property) { return this$1.validate(\n    property,\n    normalizedValues[property].value,\n    normalizedValues[property].scope,\n    false // do not throw\n  ); });\n\n  return Promise.all(promises).then(function (results) {\n    var valid = results.every(function (t) { return t; });\n    if (! valid) {\n      throw new ValidatorException('Validation Failed');\n    }\n\n    return valid;\n  });\n};\n\n/**\n * Validates all scopes.\n * @returns {Promise} All promises resulted from each scope.\n */\nValidator.prototype.validateScopes = function validateScopes () {\n    var this$1 = this;\n\n  if (this.paused) { return Promise.resolve(true); }\n\n  return Promise.all(\n    Object.keys(this.$scopes).map(function (scope) { return this$1.validateAll(scope); })\n  );\n};\n\nObject.defineProperties( Validator.prototype, prototypeAccessors );\n\nvar validatorRequested = function (injections) {\n  if (! injections) {\n    return false;\n  }\n\n  if (Array.isArray(injections) && ~injections.indexOf('$validator')) {\n    return true;\n  }\n\n  if (isObject(injections) && injections.$validator) {\n    return true;\n  }\n\n  return false;\n};\n\nvar makeMixin = function (Vue, options) {\n  var mixin = {};\n  mixin.provide = function providesValidator() {\n    if (this.$validator) {\n      return {\n        $validator: this.$validator\n      };\n    }\n\n    return {};\n  };\n\n  mixin.beforeCreate = function beforeCreate() {\n    // if its a root instance, inject anyways, or if it requested a new instance.\n    if (this.$options.$validates || !this.$parent) {\n      this.$validator = new Validator(null, { init: false, vm: this });\n    }\n\n    var requested = validatorRequested(this.$options.inject);\n\n    // if automatic injection is enabled and no instance was requested.\n    if (! this.$validator && options.inject && !requested) {\n      this.$validator = new Validator(null, { init: false, vm: this });\n    }\n\n    // don't inject errors or fieldBag as no validator was resolved.\n    if (! requested && ! this.$validator) {\n      return;\n    }\n\n    // There is a validator but it isn't injected, mark as reactive.\n    if (! requested && this.$validator) {\n      Vue.util.defineReactive(this.$validator, 'errorBag', this.$validator.errorBag);\n      Vue.util.defineReactive(this.$validator, 'fieldBag', this.$validator.fieldBag);\n    }\n\n    if (! this.$options.computed) {\n      this.$options.computed = {};\n    }\n\n    this.$options.computed[options.errorBagName] = function errorBagGetter() {\n      return this.$validator.errorBag;\n    };\n    this.$options.computed[options.fieldsBagName] = function fieldBagGetter() {\n      return this.$validator.fieldBag;\n    };\n  };\n\n  mixin.mounted = function mounted() {\n    if (this.$validator) {\n      this.$validator.init();\n    }\n  };\n\n  return mixin;\n};\n\nvar DEFAULT_CLASS_NAMES = {\n  touched: 'touched', // the control has been blurred\n  untouched: 'untouched', // the control hasn't been blurred\n  valid: 'valid', // model is valid\n  invalid: 'invalid', // model is invalid\n  pristine: 'pristine', // control has not been interacted with\n  dirty: 'dirty' // control has been interacted with\n};\n\nvar ClassListener = function ClassListener(el, validator, options) {\n  if ( options === void 0 ) options = {};\n\n  this.el = el;\n  this.validator = validator;\n  this.enabled = options.enableAutoClasses;\n  this.classNames = assign({}, DEFAULT_CLASS_NAMES, options.classNames || {});\n  this.component = options.component;\n  this.listeners = {};\n};\n\n/**\n * Resets the classes state.\n */\nClassListener.prototype.reset = function reset () {\n  // detach all listeners.\n  this.detach();\n\n  // remove classes\n  this.remove(this.classNames.dirty);\n  this.remove(this.classNames.touched);\n  this.remove(this.classNames.valid);\n  this.remove(this.classNames.invalid);\n\n  // listen again.\n  this.attach(this.field);\n};\n\n/**\n * Syncs the automatic classes.\n */\nClassListener.prototype.sync = function sync () {\n  this.addInteractionListeners();\n\n  if (! this.enabled) { return; }\n\n  this.toggle(this.classNames.dirty, this.field.flags.dirty);\n  this.toggle(this.classNames.pristine, this.field.flags.pristine);\n  this.toggle(this.classNames.valid, this.field.flags.valid);\n  this.toggle(this.classNames.invalid, this.field.flags.invalid);\n  this.toggle(this.classNames.touched, this.field.flags.touched);\n  this.toggle(this.classNames.untouched, this.field.flags.untouched);\n};\n\nClassListener.prototype.addFocusListener = function addFocusListener () {\n    var this$1 = this;\n\n  // listen for focus event.\n  this.listeners.focus = function () {\n    this$1.remove(this$1.classNames.untouched);\n    this$1.add(this$1.classNames.touched);\n    this$1.field.flags.touched = true;\n    this$1.field.flags.untouched = false;\n\n    if (this$1.component) { return; }\n\n    // only needed once.\n    this$1.el.removeEventListener('focus', this$1.listeners.focus);\n    this$1.listeners.focus = null;\n  };\n\n  if (this.component) {\n    this.component.$once('focus', this.listeners.focus);\n  } else {\n    this.el.addEventListener('focus', this.listeners.focus);\n  }\n};\n\nClassListener.prototype.addInputListener = function addInputListener () {\n    var this$1 = this;\n\n  // listen for input.\n  this.listeners.input = function () {\n    this$1.remove(this$1.classNames.pristine);\n    this$1.add(this$1.classNames.dirty);\n    this$1.field.flags.dirty = true;\n    this$1.field.flags.pristine = false;\n\n    if (this$1.component) { return; }\n\n    // only needed once.\n    this$1.el.removeEventListener('input', this$1.listeners.input);\n    this$1.listeners.input = null;\n  };\n\n  if (this.component) {\n    this.component.$once('input', this.listeners.input);\n  } else {\n    this.el.addEventListener('input', this.listeners.input);\n  }\n};\n\nClassListener.prototype.addInteractionListeners = function addInteractionListeners () {\n  if (! this.listeners.focus) {\n    this.addFocusListener();\n  }\n\n  if (! this.listeners.input) {\n    this.addInputListener();\n  }\n};\n\n/**\n * Attach field with its listeners.\n * @param {*} field\n */\nClassListener.prototype.attach = function attach (field) {\n    var this$1 = this;\n\n  this.field = field;\n  this.add(this.classNames.pristine);\n  this.add(this.classNames.untouched);\n\n  this.addInteractionListeners();\n\n  this.listeners.after = function (e) {\n    this$1.remove(e.valid ? this$1.classNames.invalid : this$1.classNames.valid);\n    this$1.add(e.valid ? this$1.classNames.valid : this$1.classNames.invalid);\n    this$1.field.flags.valid = e.valid;\n    this$1.field.flags.invalid = ! e.valid;\n    this$1.field.flags.pending = false;\n  };\n\n  this.validator.on('after', this.field.name, this.field.scope, this.listeners.after);\n};\n\n/**\n * Detach all listeners.\n */\nClassListener.prototype.detach = function detach () {\n  // TODO: Why could the field be undefined?\n  if (! this.field) { return; }\n\n  if (this.component) {\n    this.component.$off('input', this.listeners.input);\n    this.component.$off('focus', this.listeners.focus);\n  } else {\n    this.el.removeEventListener('focus', this.listeners.focus);\n    this.el.removeEventListener('input', this.listeners.input);\n  }\n  this.validator.off('after', this.field.name, this.field.scope);\n};\n\n/**\n * Add a class.\n * @param {*} className\n */\nClassListener.prototype.add = function add (className) {\n  if (! this.enabled) { return; }\n\n  addClass(this.el, className);\n};\n\n/**\n * Remove a class.\n * @param {*} className\n */\nClassListener.prototype.remove = function remove (className) {\n  if (! this.enabled) { return; }\n\n  removeClass(this.el, className);\n};\n\n/**\n * Toggles the class name.\n *\n * @param {String} className\n * @param {Boolean} status\n */\nClassListener.prototype.toggle = function toggle (className, status) {\n  if (status) {\n    this.add(className);\n    return;\n  }\n\n  this.remove(className);\n};\n\nvar config = {\n  locale: 'en',\n  delay: 0,\n  errorBagName: 'errors',\n  dictionary: null,\n  strict: true,\n  fieldsBagName: 'fields',\n  enableAutoClasses: false,\n  classNames: {},\n  events: 'input|blur',\n  inject: true\n};\n\nvar ListenerGenerator = function ListenerGenerator(el, binding, vnode, options) {\n  this.unwatch = undefined;\n  this.callbacks = [];\n  this.el = el;\n  this.scope = isObject(binding.value) ? binding.value.scope : getScope(el);\n  this.binding = binding;\n  this.vm = vnode.context;\n  this.component = vnode.child;\n  this.options = assign({}, config, options);\n  this.fieldName = this._resolveFieldName();\n  this.model = this._resolveModel(vnode.data.directives);\n  this.classes = new ClassListener(el, this.vm.$validator, {\n    component: this.component,\n    enableAutoClasses: options.enableAutoClasses,\n    classNames: options.classNames\n  });\n};\n\n/**\n * Checks if the node directives contains a v-model.\n */\nListenerGenerator.prototype._resolveModel = function _resolveModel (directives) {\n  var expRegex = /^[a-z_]+[0-9]*(\\w*\\.[a-z_]\\w*)*$/i;\n  var model = find(directives, function (d) { return d.name === 'model' && expRegex.test(d.expression); });\n\n  return model && this._isExistingPath(model.expression) && model.expression;\n};\n\n/**\n * @param {String} path\n */\nListenerGenerator.prototype._isExistingPath = function _isExistingPath (path) {\n  var obj = this.vm;\n  return path.split('.').every(function (prop) {\n    if (! Object.prototype.hasOwnProperty.call(obj, prop)) {\n      return false;\n    }\n\n    obj = obj[prop];\n\n    return true;\n  });\n};\n\n  /**\n   * Resolves the field name to trigger validations.\n   * @return {String} The field name.\n   */\nListenerGenerator.prototype._resolveFieldName = function _resolveFieldName () {\n  if (this.component) {\n    return getDataAttribute(this.el, 'name') || this.component.name;\n  }\n\n  return getDataAttribute(this.el, 'name') || this.el.name;\n};\n\n  /**\n   * Determines if the validation rule requires additional listeners on target fields.\n   */\nListenerGenerator.prototype._hasFieldDependency = function _hasFieldDependency (rules) {\n    var this$1 = this;\n\n  var fieldName = false;\n  if (! rules) {\n    return false;\n  }\n\n  if (isObject(rules)) {\n    Object.keys(rules).forEach(function (r) { // eslint-disable-line\n      if (/confirmed|after|before/.test(r)) {\n        fieldName = rules[r];\n\n        return false;\n      }\n    });\n\n    return fieldName;\n  }\n\n  rules.split('|').every(function (r) {\n    if (/\\b(confirmed|after|before):/.test(r)) {\n      fieldName = r.split(':')[1];\n      return false;\n    }\n\n    if (/\\b(confirmed)/.test(r)) {\n      fieldName = (this$1.fieldName) + \"_confirmation\";\n      return false;\n    }\n\n    return true;\n  });\n\n  return fieldName;\n};\n\n  /**\n   * Validates input value, triggered by 'input' event.\n   */\nListenerGenerator.prototype._inputListener = function _inputListener () {\n  return this._validate(this.el.value);\n};\n\n  /**\n   * Validates files, triggered by 'change' event.\n   */\nListenerGenerator.prototype._fileListener = function _fileListener () {\n    var this$1 = this;\n\n  return this._validate(toArray(this.el.files)).then(function (isValid) {\n    if (! isValid && this$1.binding.modifiers.reject) {\n      this$1.el.value = '';\n    }\n  });\n};\n\n  /**\n   * Validates radio buttons, triggered by 'change' event.\n   */\nListenerGenerator.prototype._radioListener = function _radioListener () {\n  var checked = document.querySelector((\"input[name=\\\"\" + (this.el.name) + \"\\\"]:checked\"));\n  return this._validate(checked ? checked.value : null);\n};\n\n  /**\n   * Validates checkboxes, triggered by change event.\n   */\nListenerGenerator.prototype._checkboxListener = function _checkboxListener () {\n    var this$1 = this;\n\n  var checkedBoxes = document.querySelectorAll((\"input[name=\\\"\" + (this.el.name) + \"\\\"]:checked\"));\n  if (! checkedBoxes || ! checkedBoxes.length) {\n    this._validate(null);\n    return;\n  }\n\n  toArray(checkedBoxes).forEach(function (box) {\n    this$1._validate(box.value);\n  });\n};\n\n  /**\n   * Trigger the validation for a specific value.\n   */\nListenerGenerator.prototype._validate = function _validate (value) {\n  return this.vm.$validator.validate(\n    this.fieldName, value, this.scope || getScope(this.el)\n    ).catch(function (result) { return result; });\n};\n\n  /**\n   * Returns a scoped callback, only runs if the el scope is the same as the recieved scope\n   * From the event.\n   */\nListenerGenerator.prototype._getScopedListener = function _getScopedListener (callback) {\n    var this$1 = this;\n\n  return function (scope) {\n    if (! scope || scope === this$1.scope || scope instanceof window.Event) {\n      callback();\n    }\n  };\n};\n\n  /**\n   * Attaches validator event-triggered validation.\n   */\nListenerGenerator.prototype._attachValidatorEvent = function _attachValidatorEvent () {\n    var this$1 = this;\n\n  var listener = this._getScopedListener(this._getSuitableListener().listener.bind(this));\n  var fieldName = this._hasFieldDependency(\n      getRules(this.binding.expression, this.binding.value, this.el)\n    );\n  if (fieldName) {\n          // Wait for the validator ready triggered when vm is mounted because maybe\n          // the element isn't mounted yet.\n    this.vm.$nextTick(function () {\n      var target = document.querySelector((\"input[name='\" + fieldName + \"']\"));\n      if (! target) {\n        warn('Cannot find target field, no additional listeners were attached.');\n        return;\n      }\n\n      var events = getDataAttribute(this$1.el, 'validate-on') || this$1.options.events;\n      events.split('|').forEach(function (e) {\n        target.addEventListener(e, listener, false);\n        this$1.callbacks.push({ name: e, listener: listener, el: target });\n      });\n    });\n  }\n};\n\n  /**\n   * Determines a suitable listener for the element.\n   */\nListenerGenerator.prototype._getSuitableListener = function _getSuitableListener () {\n  var listener;\n  var overrides = {\n    input: 'input',\n    blur: 'blur'\n  };\n\n  if (this.el.tagName === 'SELECT') {\n    overrides.input = 'change';\n    listener = {\n      names: ['change', 'blur'],\n      listener: this._inputListener\n    };\n  } else {\n    // determine the suitable listener and events to handle\n    switch (this.el.type) {\n    case 'file':\n      overrides.input = 'change';\n      overrides.blur = null;\n      listener = {\n        names: ['change'],\n        listener: this._fileListener\n      };\n      break;\n\n    case 'radio':\n      overrides.input = 'change';\n      overrides.blur = null;\n      listener = {\n        names: ['change'],\n        listener: this._radioListener\n      };\n      break;\n\n    case 'checkbox':\n      overrides.input = 'change';\n      overrides.blur = null;\n      listener = {\n        names: ['change'],\n        listener: this._checkboxListener\n      };\n      break;\n\n    default:\n      listener = {\n        names: ['input', 'blur'],\n        listener: this._inputListener\n      };\n      break;\n    }\n  }\n  // users are able to specify which events they want to validate on\n  var events = getDataAttribute(this.el, 'validate-on') || this.options.events;\n  listener.names = events.split('|')\n                         .filter(function (e) { return overrides[e] !== null; })\n                         .map(function (e) { return overrides[e] || e; });\n\n  return listener;\n};\n\n/**\n * Attaches neccessary validation events for the component.\n */\nListenerGenerator.prototype._attachComponentListeners = function _attachComponentListeners () {\n    var this$1 = this;\n\n  this.componentListener = debounce(function (value) {\n    this$1._validate(value);\n  }, getDataAttribute(this.el, 'delay') || this.options.delay);\n\n  this.component.$on('input', this.componentListener);\n  this.componentPropUnwatch = this.component.$watch('value', this.componentListener);\n};\n\n/**\n * Attachs a suitable listener for the input.\n */\nListenerGenerator.prototype._attachFieldListeners = function _attachFieldListeners () {\n    var this$1 = this;\n\n  // If it is a component, use vue events instead.\n  if (this.component) {\n    this._attachComponentListeners();\n\n    return;\n  }\n\n  var handler = this._getSuitableListener();\n  var listener = debounce(\n    handler.listener.bind(this),\n    getDataAttribute(this.el, 'delay') || this.options.delay\n  );\n\n  if (~['radio', 'checkbox'].indexOf(this.el.type)) {\n    this.vm.$nextTick(function () {\n      var elms = document.querySelectorAll((\"input[name=\\\"\" + (this$1.el.name) + \"\\\"]\"));\n      toArray(elms).forEach(function (input) {\n        handler.names.forEach(function (handlerName) {\n          input.addEventListener(handlerName, listener, false);\n          this$1.callbacks.push({ name: handlerName, listener: listener, el: input });\n        });\n      });\n    });\n\n    return;\n  }\n\n  handler.names.forEach(function (handlerName) {\n    this$1.el.addEventListener(handlerName, listener, false);\n    this$1.callbacks.push({ name: handlerName, listener: listener, el: this$1.el });\n  });\n};\n\n/**\n * Returns a context, getter factory pairs for each input type.\n */\nListenerGenerator.prototype._resolveValueGetter = function _resolveValueGetter () {\n    var this$1 = this;\n\n  if (this.component) {\n    return {\n      context: function () { return this$1.component; },\n      getter: function getter(context) {\n        return context.value;\n      }\n    };\n  }\n\n  switch (this.el.type) {\n  case 'checkbox': return {\n    context: function () { return document.querySelectorAll((\"input[name=\\\"\" + (this$1.el.name) + \"\\\"]:checked\")); },\n    getter: function getter(context) {\n      if (! context || ! context.length) {\n        return null;\n      }\n\n      return toArray(context).map(function (checkbox) { return checkbox.value; });\n    }\n  };\n  case 'radio': return {\n    context: function () { return document.querySelector((\"input[name=\\\"\" + (this$1.el.name) + \"\\\"]:checked\")); },\n    getter: function getter(context) {\n      return context && context.value;\n    }\n  };\n  case 'file': return {\n    context: function () { return this$1.el; },\n    getter: function getter(context) {\n      return toArray(context.files);\n    }\n  };\n\n  default: return {\n    context: function () { return this$1.el; },\n    getter: function getter(context) {\n      return context.value;\n    }\n  };\n  }\n};\n\n/*\n* Gets the arg string value, either from the directive or the expression value.\n*/\nListenerGenerator.prototype._getArg = function _getArg () {\n  // Get it from the directive arg.\n  if (this.binding.arg) {\n    return this.binding.arg;\n  }\n\n  // Get it from v-model.\n  if (this.model) {\n    return this.model;\n  }\n\n  return isObject(this.binding.value) ? this.binding.value.arg : null;\n};\n\n/**\n * Attaches model watchers and extra listeners.\n */\nListenerGenerator.prototype._attachModelWatcher = function _attachModelWatcher (arg) {\n    var this$1 = this;\n\n  var events = getDataAttribute(this.el, 'validate-on') || this.options.events;\n  var listener = debounce(\n    this._getSuitableListener().listener.bind(this),\n    getDataAttribute(this.el, 'delay') || this.options.delay\n  );\n  events.split('|').forEach(function (name) {\n    if (~['input', 'change'].indexOf(name)) {\n      var debounced = debounce(function (value) {\n        this$1.vm.$validator.validate(\n          this$1.fieldName, value, this$1.scope || getScope(this$1.el)\n        ).catch(function (result) { return result; });\n      }, getDataAttribute(this$1.el, 'delay') || this$1.options.delay);\n      this$1.unwatch = this$1.vm.$watch(arg, debounced, { deep: true });\n      // No need to attach it on element as it will use the vue watcher.\n      return;\n    }\n\n    this$1.el.addEventListener(name, listener, false);\n    this$1.callbacks.push({ name: name, listener: listener, el: this$1.el });\n  });\n};\n\n/**\n * Attaches the Event Listeners.\n */\nListenerGenerator.prototype.attach = function attach () {\n    var this$1 = this;\n\n  var ref = this._resolveValueGetter();\n    var context = ref.context;\n    var getter = ref.getter;\n  this.vm.$validator.attach(\n    this.fieldName,\n    getRules(this.binding.expression, this.binding.value, this.el), {\n      // eslint-disable-next-line\n      scope: function () {\n        return this$1.scope || getScope(this$1.el);\n      },\n      prettyName: getDataAttribute(this.el, 'as') || this.el.title,\n      context: context,\n      getter: getter,\n      listeners: this,\n      initial: this.binding.modifiers.initial\n    }\n  );\n\n  if (this.binding.modifiers.disable) {\n    return;\n  }\n\n  this._attachValidatorEvent();\n  var arg = this._getArg();\n  if (arg) {\n    this._attachModelWatcher(arg);\n    return;\n  }\n\n  this._attachFieldListeners();\n};\n\n  /**\n   * Removes all attached event listeners.\n   */\nListenerGenerator.prototype.detach = function detach () {\n  if (this.component) {\n    this.component.$off('input', this.componentListener);\n\n    if (isCallable(this.componentPropUnwatch)) {\n      this.componentPropUnwatch();\n    }\n  }\n\n  if (this.unwatch) {\n    this.unwatch();\n  }\n\n  this.classes.detach();\n\n  this.callbacks.forEach(function (h) {\n    h.el.removeEventListener(h.name, h.listener);\n  });\n  this.callbacks = [];\n};\n\nvar listenersInstances = [];\n\nvar makeDirective = function (options) { return ({\n  inserted: function inserted(el, binding, vnode) {\n    if (! vnode.context.$validator) {\n      var name = vnode.context.$options._componentTag;\n      // eslint-disable-next-line\n      warn((\"No validator instance is present on \" + (name ?'component \"' +  name + '\"' : 'un-named component') + \", did you forget to inject '$validator'?\"));\n\n      return;\n    }\n    var listener = new ListenerGenerator(el, binding, vnode, options);\n    listener.attach();\n    listenersInstances.push({ vm: vnode.context, el: el, instance: listener });\n  },\n  update: function update(el, ref, ref$1) {\n    var expression = ref.expression;\n    var value = ref.value;\n    var context = ref$1.context;\n\n    var ref$2 = find(listenersInstances, function (l) { return l.vm === context && l.el === el; });\n    var instance = ref$2.instance;\n    // make sure we don't do uneccessary work if no expression was passed\n    // nor if the expression did not change.\n    if (! expression || (instance.cachedExp === JSON.stringify(value))) { return; }\n\n    instance.cachedExp = JSON.stringify(value);\n    var scope = isObject(value) ? (value.scope || getScope(el)) : getScope(el);\n    context.$validator.updateField(\n      instance.fieldName,\n      getRules(expression, value, el),\n      { scope: scope || '__global__' }\n    );\n  },\n  unbind: function unbind(el, ref, ref$1) {\n    var value = ref.value;\n    var context = ref$1.context;\n\n    var holder = find(listenersInstances, function (l) { return l.vm === context && l.el === el; });\n    if (typeof holder === 'undefined') {\n      return;\n    }\n\n    var scope = isObject(value) ? value.scope : (getScope(el) || '__global__');\n    context.$validator.detach(holder.instance.fieldName, scope);\n    listenersInstances.splice(listenersInstances.indexOf(holder), 1);\n  }\n}); };\n\nvar normalize = function (fields) {\n  if (Array.isArray(fields)) {\n    return fields.reduce(function (prev, curr) {\n      if (~curr.indexOf('.')) {\n        prev[curr.split('.')[1]] = curr;\n      } else {\n        prev[curr] = curr;\n      }\n\n      return prev;\n    }, {});\n  }\n\n  return fields;\n};\n\n/**\n * Maps fields to computed functions.\n *\n * @param {Array|Object} fields\n */\nvar mapFields = function (fields) {\n  var normalized = normalize(fields);\n  return Object.keys(normalized).reduce(function (prev, curr) {\n    var field = normalized[curr];\n    prev[curr] = function mappedField() {\n      if (this.$validator.fieldBag[field]) {\n        return this.$validator.fieldBag[field];\n      }\n\n      var index = field.indexOf('.');\n      if (index <= 0) {\n        return {};\n      }\n      var ref = field.split('.');\n      var scope = ref[0];\n      var name = ref[1];\n\n      return getPath((\"$\" + scope + \".\" + name), this.$validator.fieldBag, {});\n    };\n\n    return prev;\n  }, {});\n};\n\n// eslint-disable-next-line\nvar install = function (Vue, options) {\n  var config$$1 = assign({}, config, options);\n  if (config$$1.dictionary) {\n    Validator.updateDictionary(config$$1.dictionary);\n  }\n\n  Validator.setLocale(config$$1.locale);\n  Validator.setStrictMode(config$$1.strict);\n\n  Vue.mixin(makeMixin(Vue, config$$1));\n  Vue.directive('validate', makeDirective(config$$1));\n};\n\nvar index = {\n  install: install,\n  mapFields: mapFields,\n  Validator: Validator,\n  ErrorBag: ErrorBag,\n  Rules: Rules,\n  version: '2.0.0-rc.5'\n};\n\nreturn index;\n\n})));\n\n},{}],3:[function(require,module,exports){\n(function (global){\n/*!\n * Vue.js v2.5.13\n * (c) 2014-2017 Evan You\n * Released under the MIT License.\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.Vue = factory());\n}(this, (function () { 'use strict';\n\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// these helpers produces better vm code in JS engines due to their\n// explicitness and function inlining\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value e.g. [object Object]\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if a attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind, faster than native\n */\nfunction bind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n  // record original fn length\n  boundFn._length = fn.length;\n  return boundFn\n}\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/**\n * Return same value\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a static keys string from compiler modules.\n */\nfunction genStaticKeys (modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured'\n];\n\n/*  */\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = (function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\n{\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm || {};\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (_target) {\n  if (Dep.target) { targetStack.push(Dep.target); }\n  Dep.target = _target;\n}\n\nfunction popTarget () {\n  Dep.target = targetStack.pop();\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode, deep) {\n  var componentOptions = vnode.componentOptions;\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.isCloned = true;\n  if (deep) {\n    if (vnode.children) {\n      cloned.children = cloneVNodes(vnode.children, true);\n    }\n    if (componentOptions && componentOptions.children) {\n      componentOptions.children = cloneVNodes(componentOptions.children, true);\n    }\n  }\n  return cloned\n}\n\nfunction cloneVNodes (vnodes, deep) {\n  var len = vnodes.length;\n  var res = new Array(len);\n  for (var i = 0; i < len; i++) {\n    res[i] = cloneVNode(vnodes[i], deep);\n  }\n  return res\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);[\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n].forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However when passing down props,\n * we don't want to force conversion because the value may be a nested value\n * under a frozen data structure. Converting it would defeat the optimization.\n */\nvar observerState = {\n  shouldConvert: true\n};\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto\n      ? protoAugment\n      : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive(obj, keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src, keys) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    observerState.shouldConvert &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (\"development\" !== 'production' && customSetter) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    \"development\" !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    \"development\" !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\n{\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n      \"development\" !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n    \"development\" !== 'production' && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'can only contain alphanumeric characters and the hyphen, ' +\n      'and must start with a letter.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      parent = mergeOptions(parent, child.mixins[i], vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (\"development\" !== 'production' && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // handle boolean props\n  if (isType(Boolean, prop.type)) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {\n      value = true;\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldConvert = observerState.shouldConvert;\n    observerState.shouldConvert = true;\n    observe(value);\n    observerState.shouldConvert = prevShouldConvert;\n  }\n  {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (\"development\" !== 'production' && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn(\n      \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n      \" Expected \" + (expectedTypes.map(capitalize).join(', ')) +\n      \", got \" + (toRawType(value)) + \".\",\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isType (type, fn) {\n  if (!Array.isArray(fn)) {\n    return getType(fn) === getType(type)\n  }\n  for (var i = 0, len = fn.length; i < len; i++) {\n    if (getType(fn[i]) === getType(type)) {\n      return true\n    }\n  }\n  /* istanbul ignore next */\n  return false\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  if (vm) {\n    var cur = vm;\n    while ((cur = cur.$parent)) {\n      var hooks = cur.$options.errorCaptured;\n      if (hooks) {\n        for (var i = 0; i < hooks.length; i++) {\n          try {\n            var capture = hooks[i].call(cur, err, vm, info) === false;\n            if (capture) { return }\n          } catch (e) {\n            globalHandleError(e, cur, 'errorCaptured hook');\n          }\n        }\n      }\n    }\n  }\n  globalHandleError(err, vm, info);\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      logError(e, null, 'config.errorHandler');\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n/* globals MessageChannel */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using both micro and macro tasks.\n// In < 2.4 we used micro tasks everywhere, but there are some scenarios where\n// micro tasks have too high a priority and fires in between supposedly\n// sequential events (e.g. #4521, #6690) or even between bubbling of the same\n// event (#6566). However, using macro tasks everywhere also has subtle problems\n// when state is changed right before repaint (e.g. #6813, out-in transitions).\n// Here we use micro task by default, but expose a way to force macro task when\n// needed (e.g. in event handlers attached by v-on).\nvar microTimerFunc;\nvar macroTimerFunc;\nvar useMacroTask = false;\n\n// Determine (macro) Task defer implementation.\n// Technically setImmediate should be the ideal choice, but it's only available\n// in IE. The only polyfill that consistently queues the callback after all DOM\n// events triggered in the same loop is by using MessageChannel.\n/* istanbul ignore if */\nif (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  macroTimerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else if (typeof MessageChannel !== 'undefined' && (\n  isNative(MessageChannel) ||\n  // PhantomJS\n  MessageChannel.toString() === '[object MessageChannelConstructor]'\n)) {\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = flushCallbacks;\n  macroTimerFunc = function () {\n    port.postMessage(1);\n  };\n} else {\n  /* istanbul ignore next */\n  macroTimerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\n// Determine MicroTask defer implementation.\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  microTimerFunc = function () {\n    p.then(flushCallbacks);\n    // in problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else {\n  // fallback to macro\n  microTimerFunc = macroTimerFunc;\n}\n\n/**\n * Wrap a function so that if any code inside triggers state change,\n * the changes are queued using a Task instead of a MicroTask.\n */\nfunction withMacroTask (fn) {\n  return fn._withTask || (fn._withTask = function () {\n    useMacroTask = true;\n    var res = fn.apply(null, arguments);\n    useMacroTask = false;\n    return res\n  })\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    if (useMacroTask) {\n      macroTimerFunc();\n    } else {\n      microTimerFunc();\n    }\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\nvar mark;\nvar measure;\n\n{\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      perf.clearMeasures(name);\n    };\n  }\n}\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\n{\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' &&\n    Proxy.toString().match(/native code/);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val)) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        cloned[i].apply(null, arguments$1);\n      }\n    } else {\n      // return handler return value for single handlers\n      return fns.apply(null, arguments)\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, def, cur, old, event;\n  for (name in on) {\n    def = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    /* istanbul ignore if */\n    if (isUndef(cur)) {\n      \"development\" !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur);\n      }\n      add(event.name, cur, event.once, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  if (def instanceof VNode) {\n    def = def.data.hook || (def.data.hook = {});\n  }\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor,\n  context\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (isDef(factory.contexts)) {\n    // already pending\n    factory.contexts.push(context);\n  } else {\n    var contexts = factory.contexts = [context];\n    var sync = true;\n\n    var forceRender = function () {\n      for (var i = 0, l = contexts.length; i < l; i++) {\n        contexts[i].$forceUpdate();\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender();\n      }\n    });\n\n    var reject = once(function (reason) {\n      \"development\" !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender();\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (typeof res.then === 'function') {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            setTimeout(function () {\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender();\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          setTimeout(function () {\n            if (isUndef(factory.resolved)) {\n              reject(\n                \"timeout (\" + (res.timeout) + \"ms)\"\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn, once) {\n  if (once) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$off(event[i], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    if (fn) {\n      // specific handler\n      var cb;\n      var i$1 = cbs.length;\n      while (i$1--) {\n        cb = cbs[i$1];\n        if (cb === fn || cb.fn === fn) {\n          cbs.splice(i$1, 1);\n          break\n        }\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        try {\n          cbs[i].apply(vm, args);\n        } catch (e) {\n          handleError(e, vm, (\"event handler for \\\"\" + event + \"\\\"\"));\n        }\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  var slots = {};\n  if (!children) {\n    return slots\n  }\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      (slots.default || (slots.default = [])).push(child);\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res\n) {\n  res = res || {};\n  for (var i = 0; i < fns.length; i++) {\n    if (Array.isArray(fns[i])) {\n      resolveScopedSlots(fns[i], res);\n    } else {\n      res[fns[i].key] = fns[i].fn;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      );\n      // no need for the ref nodes after initial patch\n      // this prevents keeping a detached DOM tree in memory (#5851)\n      vm.$options._parentElm = vm.$options._refElm = null;\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (\"development\" !== 'production' && config.performance && mark) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((\"vue \" + name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((\"vue \" + name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, null, true /* isRenderWatcher */);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren\n  var hasChildren = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    parentVnode.data.scopedSlots || // has new scoped slots\n    vm.$scopedSlots !== emptyObject // has old scoped slots\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = (parentVnode.data && parentVnode.data.attrs) || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    observerState.shouldConvert = false;\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      props[key] = validateProp(key, vm.$options.props, propsData, vm);\n    }\n    observerState.shouldConvert = true;\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  if (listeners) {\n    var oldListeners = vm.$options._parentListeners;\n    vm.$options._parentListeners = listeners;\n    updateComponentListeners(vm, listeners, oldListeners);\n  }\n  // resolve slots + force update if has children\n  if (hasChildren) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm);\n      } catch (e) {\n        handleError(e, vm, (hook + \" hook\"));\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n}\n\n/*  */\n\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (\"development\" !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression = expOrFn.toString();\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      \"development\" !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n    var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  observerState.shouldConvert = isRoot;\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive(props, key, value, function () {\n        if (vm.$parent && !isUpdatingChildComponent) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  observerState.shouldConvert = true;\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    \"development\" !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n      \"development\" !== 'production' && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (\"development\" !== 'production' && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : userDef;\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : userDef.get\n      : noop;\n    sharedPropertyDefinition.set = userDef.set\n      ? userDef.set\n      : noop;\n  }\n  if (\"development\" !== 'production' &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    {\n      if (methods[key] == null) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  keyOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(keyOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  {\n    dataDef.set = function (newData) {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    observerState.shouldConvert = false;\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      {\n        defineReactive(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      }\n    });\n    observerState.shouldConvert = true;\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject).filter(function (key) {\n        /* istanbul ignore next */\n        return Object.getOwnPropertyDescriptor(inject, key).enumerable\n      })\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && provideKey in source._provided) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    keys = Object.keys(val);\n    ret = new Array(keys.length);\n    for (i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      ret[i] = render(val[key], key, i);\n    }\n  }\n  if (isDef(ret)) {\n    (ret)._isVList = true;\n  }\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if (\"development\" !== 'production' && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    var slotNodes = this.$slots[name];\n    // warn duplicate slot usage\n    if (slotNodes) {\n      if (\"development\" !== 'production' && slotNodes._rendered) {\n        warn(\n          \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\n          \"- this will likely cause render errors.\",\n          this\n        );\n      }\n      slotNodes._rendered = true;\n    }\n    nodes = slotNodes || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInAlias,\n  eventKeyName\n) {\n  var keyCodes = config.keyCodes[key] || builtInAlias;\n  if (keyCodes) {\n    if (Array.isArray(keyCodes)) {\n      return keyCodes.indexOf(eventKeyCode) === -1\n    } else {\n      return keyCodes !== eventKeyCode\n    }\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n      \"development\" !== 'production' && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        if (!(key in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree by doing a shallow clone.\n  if (tree && !isInFor) {\n    return Array.isArray(tree)\n      ? cloneVNodes(tree)\n      : cloneVNode(tree)\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n      \"development\" !== 'production' && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var options = Ctor.options;\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () { return resolveSlots(children, parent); };\n\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm = Object.create(parent);\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = data.scopedSlots || emptyObject;\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    vnode.fnContext = contextVm;\n    vnode.fnOptions = options;\n    if (data.slot) {\n      (vnode.data || (vnode.data = {})).slot = data.slot;\n    }\n  }\n\n  return vnode\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n\n\n\n// Register the component hook to weex native render engine.\n// The hook will be triggered by native, not javascript.\n\n\n// Updates the state of the component to weex native render engine.\n\n/*  */\n\n// https://github.com/Hanks10100/weex-native-directive/tree/master/component\n\n// listening on native callback\n\n/*  */\n\n/*  */\n\n// hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (\n    vnode,\n    hydrating,\n    parentElm,\n    refElm\n  ) {\n    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance,\n        parentElm,\n        refElm\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    } else if (vnode.data.keepAlive) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // merge component management hooks onto the placeholder node\n  mergeHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  // Weex specific: invoke recycle-list optimized @render function for\n  // extracting cell-slot template.\n  // https://github.com/Hanks10100/weex-native-directive/tree/master/component\n  /* istanbul ignore if */\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm,\n  refElm\n) {\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    _parentVnode: vnode,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction mergeHooks (data) {\n  if (!data.hook) {\n    data.hook = {};\n  }\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var fromParent = data.hook[key];\n    var ours = componentVNodeHooks[key];\n    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;\n  }\n}\n\nfunction mergeHook$1 (one, two) {\n  return function (a, b, c, d) {\n    one(a, b, c, d);\n    two(a, b, c, d);\n  }\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  if (isDef(on[event])) {\n    on[event] = [data.model.callback].concat(on[event]);\n  } else {\n    on[event] = data.model.callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    \"development\" !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if (\"development\" !== 'production' &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (isDef(vnode)) {\n    if (ns) { applyNS(vnode, ns); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  }\n}\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (vm._isMounted) {\n      // if the parent didn't update, the slot nodes will be the ones from\n      // last render. They need to be cloned to ensure \"freshness\" for this render.\n      for (var key in vm.$slots) {\n        var slot = vm.$slots[key];\n        // _rendered is a flag added by renderSlot, but may not be present\n        // if the slot is passed from manually written render functions\n        if (slot._rendered || (slot[0] && slot[0].elm)) {\n          vm.$slots[key] = cloneVNodes(slot, true /* deep */);\n        }\n      }\n    }\n\n    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      {\n        if (vm.$options.renderError) {\n          try {\n            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n          } catch (e) {\n            handleError(e, vm, \"renderError\");\n            vnode = vm._vnode;\n          }\n        } else {\n          vnode = vm._vnode;\n        }\n      }\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (\"development\" !== 'production' && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nvar uid$1 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$1++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (\"development\" !== 'production' && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    {\n      initProxy(vm);\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (\"development\" !== 'production' && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var extended = Ctor.extendOptions;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\n    }\n  }\n  return modified\n}\n\nfunction dedupe (latest, extended, sealed) {\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\n  // between merges\n  if (Array.isArray(latest)) {\n    var res = [];\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\n    extended = Array.isArray(extended) ? extended : [extended];\n    for (var i = 0; i < latest.length; i++) {\n      // push original options and not sealed options to exclude duplicated options\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\n        res.push(latest[i]);\n      }\n    }\n    return res\n  } else {\n    return latest\n  }\n}\n\nfunction Vue$3 (options) {\n  if (\"development\" !== 'production' &&\n    !(this instanceof Vue$3)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue$3);\nstateMixin(Vue$3);\neventsMixin(Vue$3);\nlifecycleMixin(Vue$3);\nrenderMixin(Vue$3);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (\"development\" !== 'production' && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (\"development\" !== 'production' && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    var this$1 = this;\n\n    for (var key in this$1.cache) {\n      pruneCacheEntry(this$1.cache, key, this$1.keys);\n    }\n  },\n\n  watch: {\n    include: function include (val) {\n      pruneCache(this, function (name) { return matches(val, name); });\n    },\n    exclude: function exclude (val) {\n      pruneCache(this, function (name) { return !matches(val, name); });\n    }\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue$3);\n\nObject.defineProperty(Vue$3.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue$3.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\nVue$3.version = '2.5.13';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select,progress');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode && childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode && parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template,blockquote,iframe,tfoot'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isPreTag = function (tag) { return tag === 'pre'; };\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      \"development\" !== 'production' && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setAttribute (node, key, val) {\n  node.setAttribute(key, val);\n}\n\n\nvar nodeOps = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateElementNS: createElementNS,\n\tcreateTextNode: createTextNode,\n\tcreateComment: createComment,\n\tinsertBefore: insertBefore,\n\tremoveChild: removeChild,\n\tappendChild: appendChild,\n\tparentNode: parentNode,\n\tnextSibling: nextSibling,\n\ttagName: tagName,\n\tsetTextContent: setTextContent,\n\tsetAttribute: setAttribute\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!key) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (!Array.isArray(refs[key])) {\n        refs[key] = [ref];\n      } else if (refs[key].indexOf(ref) < 0) {\n        // $flow-disable-line\n        refs[key].push(ref);\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove () {\n      if (--remove.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove.listeners = listeners;\n    return remove\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  function isUnknownElement$$1 (vnode, inVPre) {\n    return (\n      !inVPre &&\n      !vnode.ns &&\n      !(\n        config.ignoredElements.length &&\n        config.ignoredElements.some(function (ignore) {\n          return isRegExp(ignore)\n            ? ignore.test(vnode.tag)\n            : ignore === vnode.tag\n        })\n      ) &&\n      config.isUnknownElement(vnode.tag)\n    )\n  }\n\n  var creatingElmInVPre = 0;\n  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      {\n        if (data && data.pre) {\n          creatingElmInVPre++;\n        }\n        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (\"development\" !== 'production' && data && data.pre) {\n        creatingElmInVPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref$$1) {\n    if (isDef(parent)) {\n      if (isDef(ref$$1)) {\n        if (ref$$1.parentNode === parent) {\n          nodeOps.insertBefore(parent, elm, ref$$1);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      {\n        checkDuplicateKeys(children);\n      }\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    if (isDef(i = vnode.fnScopeId)) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    } else {\n      var ancestor = vnode;\n      while (ancestor) {\n        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n          nodeOps.setAttribute(vnode.elm, i, '');\n        }\n        ancestor = ancestor.parent;\n      }\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      i !== vnode.fnContext &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    {\n      checkDuplicateKeys(newCh);\n    }\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n        } else {\n          vnodeToMove = oldCh[idxInOld];\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function checkDuplicateKeys (children) {\n    var seenKeys = {};\n    for (var i = 0; i < children.length; i++) {\n      var vnode = children[i];\n      var key = vnode.key;\n      if (isDef(key)) {\n        if (seenKeys[key]) {\n          warn(\n            (\"Duplicate keys detected: '\" + key + \"'. This may cause an update error.\"),\n            vnode.context\n          );\n        } else {\n          seenKeys[key] = true;\n        }\n      }\n    }\n  }\n\n  function findIdxInOld (node, oldCh, start, end) {\n    for (var i = start; i < end; i++) {\n      var c = oldCh[i];\n      if (isDef(c) && sameVnode(node, c)) { return i }\n    }\n  }\n\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return\n    }\n\n    var elm = vnode.elm = oldVnode.elm;\n\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\n      if (isDef(vnode.asyncFactory.resolved)) {\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n      } else {\n        vnode.isAsyncPlaceholder = true;\n      }\n      return\n    }\n\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var hydrationBailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  // Note: style is excluded because it relies on initial clone for future\n  // deep updates (#7063).\n  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {\n    var i;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    inVPre = inVPre || (data && data.pre);\n    vnode.elm = elm;\n\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n      vnode.isAsyncPlaceholder = true;\n      return true\n    }\n    // assert node match\n    {\n      if (!assertNodeMatch(elm, vnode, inVPre)) {\n        return false\n      }\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          // v-html and domProps: innerHTML\n          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\n            if (i !== elm.innerHTML) {\n              /* istanbul ignore if */\n              if (\"development\" !== 'production' &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('server innerHTML: ', i);\n                console.warn('client innerHTML: ', elm.innerHTML);\n              }\n              return false\n            }\n          } else {\n            // iterate and compare children lists\n            var childrenMatch = true;\n            var childNode = elm.firstChild;\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {\n                childrenMatch = false;\n                break\n              }\n              childNode = childNode.nextSibling;\n            }\n            // if childNode is not null, it means the actual childNodes list is\n            // longer than the virtual children list.\n            if (!childrenMatch || childNode) {\n              /* istanbul ignore if */\n              if (\"development\" !== 'production' &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n              }\n              return false\n            }\n          }\n        }\n      }\n      if (isDef(data)) {\n        var fullInvoke = false;\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            fullInvoke = true;\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n        if (!fullInvoke && data['class']) {\n          // ensure collecting deps for deep class bindings for future updates\n          traverse(data['class']);\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode, inVPre) {\n    if (isDef(vnode.tag)) {\n      return vnode.tag.indexOf('vue-component') === 0 || (\n        !isUnknownElement$$1(vnode, inVPre) &&\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n\n        // create new node\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm$1,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        // update parent placeholder node element, recursively\n        if (isDef(vnode.parent)) {\n          var ancestor = vnode.parent;\n          var patchable = isPatchable(vnode);\n          while (ancestor) {\n            for (var i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor);\n            }\n            ancestor.elm = vnode.elm;\n            if (patchable) {\n              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                cbs.create[i$1](emptyNode, ancestor);\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              var insert = ancestor.data.hook.insert;\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                  insert.fns[i$2]();\n                }\n              }\n            } else {\n              registerRef(ancestor);\n            }\n            ancestor = ancestor.parent;\n          }\n        }\n\n        // destroy old node\n        if (isDef(parentElm$1)) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode, 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode, 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    // $flow-disable-line\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      // $flow-disable-line\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  // $flow-disable-line\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n];\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  var opts = vnode.componentOptions;\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n    return\n  }\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  // #6666: IE/Edge forces progress value down to 1 before setting a max\n  /* istanbul ignore if */\n  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // technically allowfullscreen is a boolean attribute for <iframe>,\n      // but Flash expects a value of \"true\" when used on <embed> tag\n      value = key === 'allowfullscreen' && el.tagName === 'EMBED'\n        ? 'true'\n        : key;\n      el.setAttribute(key, value);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // #7138: IE10 & 11 fires input event when setting placeholder on\n      // <textarea>... block the first input event and remove the blocker\n      // immediately.\n      /* istanbul ignore if */\n      if (\n        isIE && !isIE9 &&\n        el.tagName === 'TEXTAREA' &&\n        key === 'placeholder' && !el.__ieph\n      ) {\n        var blocker = function (e) {\n          e.stopImmediatePropagation();\n          el.removeEventListener('input', blocker);\n        };\n        el.addEventListener('input', blocker);\n        // $flow-disable-line\n        el.__ieph = true; /* IE placeholder patched */\n      }\n      el.setAttribute(key, value);\n    }\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\nfunction parseFilters (exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        var j = i - 1;\n        var p = (void 0);\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') { break }\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + \",\" + args)\n  }\n}\n\n/*  */\n\nfunction baseWarn (msg) {\n  console.error((\"[Vue compiler]: \" + msg));\n}\n\nfunction pluckModuleFunction (\n  modules,\n  key\n) {\n  return modules\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\n    : []\n}\n\nfunction addProp (el, name, value) {\n  (el.props || (el.props = [])).push({ name: name, value: value });\n  el.plain = false;\n}\n\nfunction addAttr (el, name, value) {\n  (el.attrs || (el.attrs = [])).push({ name: name, value: value });\n  el.plain = false;\n}\n\n// add a raw attr (use this in preTransforms)\nfunction addRawAttr (el, name, value) {\n  el.attrsMap[name] = value;\n  el.attrsList.push({ name: name, value: value });\n}\n\nfunction addDirective (\n  el,\n  name,\n  rawName,\n  value,\n  arg,\n  modifiers\n) {\n  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\n  el.plain = false;\n}\n\nfunction addHandler (\n  el,\n  name,\n  value,\n  modifiers,\n  important,\n  warn\n) {\n  modifiers = modifiers || emptyObject;\n  // warn prevent and passive modifier\n  /* istanbul ignore if */\n  if (\n    \"development\" !== 'production' && warn &&\n    modifiers.prevent && modifiers.passive\n  ) {\n    warn(\n      'passive and prevent can\\'t be used together. ' +\n      'Passive handler can\\'t prevent default event.'\n    );\n  }\n\n  // check capture modifier\n  if (modifiers.capture) {\n    delete modifiers.capture;\n    name = '!' + name; // mark the event as captured\n  }\n  if (modifiers.once) {\n    delete modifiers.once;\n    name = '~' + name; // mark the event as once\n  }\n  /* istanbul ignore if */\n  if (modifiers.passive) {\n    delete modifiers.passive;\n    name = '&' + name; // mark the event as passive\n  }\n\n  // normalize click.right and click.middle since they don't actually fire\n  // this is technically browser-specific, but at least for now browsers are\n  // the only target envs that have right/middle clicks.\n  if (name === 'click') {\n    if (modifiers.right) {\n      name = 'contextmenu';\n      delete modifiers.right;\n    } else if (modifiers.middle) {\n      name = 'mouseup';\n    }\n  }\n\n  var events;\n  if (modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n\n  var newHandler = { value: value };\n  if (modifiers !== emptyObject) {\n    newHandler.modifiers = modifiers;\n  }\n\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n\n  el.plain = false;\n}\n\nfunction getBindingAttr (\n  el,\n  name,\n  getStatic\n) {\n  var dynamicValue =\n    getAndRemoveAttr(el, ':' + name) ||\n    getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue)\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue)\n    }\n  }\n}\n\n// note: this only removes the attr from the Array (attrsList) so that it\n// doesn't get processed by processAttrs.\n// By default it does NOT remove it from the map (attrsMap) because the map is\n// needed during codegen.\nfunction getAndRemoveAttr (\n  el,\n  name,\n  removeFromMap\n) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break\n      }\n    }\n  }\n  if (removeFromMap) {\n    delete el.attrsMap[name];\n  }\n  return val\n}\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\nfunction genComponentModel (\n  el,\n  value,\n  modifiers\n) {\n  var ref = modifiers || {};\n  var number = ref.number;\n  var trim = ref.trim;\n\n  var baseValueExpression = '$$v';\n  var valueExpression = baseValueExpression;\n  if (trim) {\n    valueExpression =\n      \"(typeof \" + baseValueExpression + \" === 'string'\" +\n        \"? \" + baseValueExpression + \".trim()\" +\n        \": \" + baseValueExpression + \")\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n  var assignment = genAssignmentCode(value, valueExpression);\n\n  el.model = {\n    value: (\"(\" + value + \")\"),\n    expression: (\"\\\"\" + value + \"\\\"\"),\n    callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\n  };\n}\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\nfunction genAssignmentCode (\n  value,\n  assignment\n) {\n  var res = parseModel(value);\n  if (res.key === null) {\n    return (value + \"=\" + assignment)\n  } else {\n    return (\"$set(\" + (res.exp) + \", \" + (res.key) + \", \" + assignment + \")\")\n  }\n}\n\n/**\n * Parse a v-model expression into a base path and a final key segment.\n * Handles both dot-path and possible square brackets.\n *\n * Possible cases:\n *\n * - test\n * - test[key]\n * - test[test1[key]]\n * - test[\"a\"][key]\n * - xxx.test[a[a].test1[key]]\n * - test.xxx.a[\"asa\"][test1[key]]\n *\n */\n\nvar len;\nvar str;\nvar chr;\nvar index$1;\nvar expressionPos;\nvar expressionEndPos;\n\n\n\nfunction parseModel (val) {\n  len = val.length;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    index$1 = val.lastIndexOf('.');\n    if (index$1 > -1) {\n      return {\n        exp: val.slice(0, index$1),\n        key: '\"' + val.slice(index$1 + 1) + '\"'\n      }\n    } else {\n      return {\n        exp: val,\n        key: null\n      }\n    }\n  }\n\n  str = val;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.slice(0, expressionPos),\n    key: val.slice(expressionPos + 1, expressionEndPos)\n  }\n}\n\nfunction next () {\n  return str.charCodeAt(++index$1)\n}\n\nfunction eof () {\n  return index$1 >= len\n}\n\nfunction isStringStart (chr) {\n  return chr === 0x22 || chr === 0x27\n}\n\nfunction parseBracket (chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue\n    }\n    if (chr === 0x5B) { inBracket++; }\n    if (chr === 0x5D) { inBracket--; }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break\n    }\n  }\n}\n\nfunction parseString (chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break\n    }\n  }\n}\n\n/*  */\n\nvar warn$1;\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\nfunction model (\n  el,\n  dir,\n  _warn\n) {\n  warn$1 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n\n  {\n    // inputs with type=\"file\" are read only and setting the input's\n    // value will throw an error.\n    if (tag === 'input' && type === 'file') {\n      warn$1(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\n        \"File inputs are read only. Use a v-on:change listener instead.\"\n      );\n    }\n  }\n\n  if (el.component) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers);\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else {\n    warn$1(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n      \"v-model is not supported on this element type. \" +\n      'If you are working with contenteditable, it\\'s recommended to ' +\n      'wrap a library dedicated for that purpose inside a custom component.'\n    );\n  }\n\n  // ensure runtime directive metadata\n  return true\n}\n\nfunction genCheckboxModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked',\n    \"Array.isArray(\" + value + \")\" +\n    \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\n      trueValueBinding === 'true'\n        ? (\":(\" + value + \")\")\n        : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n    )\n  );\n  addHandler(el, 'change',\n    \"var $$a=\" + value + \",\" +\n        '$$el=$event.target,' +\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n    'if(Array.isArray($$a)){' +\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n          '$$i=_i($$a,$$v);' +\n      \"if($$el.checked){$$i<0&&(\" + value + \"=$$a.concat([$$v]))}\" +\n      \"else{$$i>-1&&(\" + value + \"=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}\" +\n    \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\n    null, true\n  );\n}\n\nfunction genRadioModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\n  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genSelect (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var selectedVal = \"Array.prototype.filter\" +\n    \".call($event.target.options,function(o){return o.selected})\" +\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\";\n\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\n  code = code + \" \" + (genAssignmentCode(value, assignment));\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction genDefaultModel (\n  el,\n  value,\n  modifiers\n) {\n  var type = el.attrsMap.type;\n\n  // warn if v-bind:value conflicts with v-model\n  {\n    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];\n    if (value$1) {\n      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';\n      warn$1(\n        binding + \"=\\\"\" + value$1 + \"\\\" conflicts with v-model on the same element \" +\n        'because the latter already expands to a value binding internally'\n      );\n    }\n  }\n\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var needCompositionGuard = !lazy && type !== 'range';\n  var event = lazy\n    ? 'change'\n    : type === 'range'\n      ? RANGE_TOKEN\n      : 'input';\n\n  var valueExpression = '$event.target.value';\n  if (trim) {\n    valueExpression = \"$event.target.value.trim()\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  addProp(el, 'value', (\"(\" + value + \")\"));\n  addHandler(el, event, code, null, true);\n  if (trim || number) {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    var event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  // This was originally intended to fix #4521 but no longer necessary\n  // after 2.5. Keeping it for backwards compat with generated code from < 2.4\n  /* istanbul ignore if */\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction createOnceHandler (handler, event, capture) {\n  var _target = target$1; // save current target element in closure\n  return function onceHandler () {\n    var res = handler.apply(null, arguments);\n    if (res !== null) {\n      remove$2(event, onceHandler, capture, _target);\n    }\n  }\n}\n\nfunction add$1 (\n  event,\n  handler,\n  once$$1,\n  capture,\n  passive\n) {\n  handler = withMacroTask(handler);\n  if (once$$1) { handler = createOnceHandler(handler, event, capture); }\n  target$1.addEventListener(\n    event,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  event,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(\n    event,\n    handler._withTask || handler,\n    capture\n  );\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\n  target$1 = undefined;\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (isUndef(props[key])) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0]);\n      }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (elm, checkVal) {\n  return (!elm.composing && (\n    elm.tagName === 'OPTION' ||\n    isNotInFocusAndDirty(elm, checkVal) ||\n    isDirtyWithModifiers(elm, checkVal)\n  ))\n}\n\nfunction isNotInFocusAndDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is\n  // not equal to the updated value\n  var notInFocus = true;\n  // #6157\n  // work around IE bug when accessing document.activeElement in an iframe\n  try { notInFocus = document.activeElement !== elm; } catch (e) {}\n  return notInFocus && elm.value !== checkVal\n}\n\nfunction isDirtyWithModifiers (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if (isDef(modifiers)) {\n    if (modifiers.lazy) {\n      // inputs with lazy should only be updated when not in focus\n      return false\n    }\n    if (modifiers.number) {\n      return toNumber(value) !== toNumber(newVal)\n    }\n    if (modifiers.trim) {\n      return value.trim() !== newVal.trim()\n    }\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (\n        childNode && childNode.data &&\n        (styleData = normalizeStyleData(childNode.data))\n      ) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\n\nvar emptyStyle;\nvar normalize = cached(function (prop) {\n  emptyStyle = emptyStyle || document.createElement('div').style;\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in emptyStyle)) {\n    return prop\n  }\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < vendorNames.length; i++) {\n    var name = vendorNames[i] + capName;\n    if (name in emptyStyle) {\n      return name\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likely wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n    if (!el.classList.length) {\n      el.removeAttribute('class');\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    cur = cur.trim();\n    if (cur) {\n      el.setAttribute('class', cur);\n    } else {\n      el.removeAttribute('class');\n    }\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def) {\n  if (!def) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def === 'object') {\n    var res = {};\n    if (def.css !== false) {\n      extend(res, autoCssTransition(def.name || 'v'));\n    }\n    extend(res, def);\n    return res\n  } else if (typeof def === 'string') {\n    return autoCssTransition(def)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser\n  ? window.requestAnimationFrame\n    ? window.requestAnimationFrame.bind(window)\n    : setTimeout\n  : /* istanbul ignore next */ function (fn) { return fn(); };\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n  if (transitionClasses.indexOf(cls) < 0) {\n    transitionClasses.push(cls);\n    addClass(el, cls);\n  }\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\nfunction toMs (s) {\n  return Number(s.slice(0, -1)) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (\"development\" !== 'production' && explicitEnterDuration != null) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode, 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      addTransitionClass(el, toClass);\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled && !userWantsControl) {\n        if (isValidDuration(explicitEnterDuration)) {\n          setTimeout(cb, explicitEnterDuration);\n        } else {\n          whenTransitionEnds(el, type, cb);\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data) || el.nodeType !== 1) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb)) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (\"development\" !== 'production' && isDef(explicitLeaveDuration)) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        addTransitionClass(el, leaveToClass);\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled && !userWantsControl) {\n          if (isValidDuration(explicitLeaveDuration)) {\n            setTimeout(cb, explicitLeaveDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar directive = {\n  inserted: function inserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', function () {\n          directive.componentUpdated(el, binding, vnode);\n        });\n      } else {\n        setSelected(el, binding, vnode.context);\n      }\n      el._vOptions = [].map.call(el.options, getValue);\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        if (!isAndroid) {\n          el.addEventListener('compositionstart', onCompositionStart);\n          el.addEventListener('compositionend', onCompositionEnd);\n        }\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var prevOptions = el._vOptions;\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\n      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\n        // trigger change event if\n        // no matching option found for at least one value\n        var needReset = el.multiple\n          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })\n          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\n        if (needReset) {\n          trigger(el, 'change');\n        }\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  actuallySetSelected(el, binding, vm);\n  /* istanbul ignore if */\n  if (isIE || isEdge) {\n    setTimeout(function () {\n      actuallySetSelected(el, binding, vm);\n    }, 0);\n  }\n}\n\nfunction actuallySetSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    \"development\" !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  return options.every(function (o) { return !looseEqual(o, value); })\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition$$1) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (value === oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    if (transition$$1) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: directive,\n  show: show\n};\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) { return c.tag || isAsyncPlaceholder(c); });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (\"development\" !== 'production' && children.length > 1) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (\"development\" !== 'production' &&\n      mode && mode !== 'in-out' && mode !== 'out-in'\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? child.isComment\n        ? id + 'comment'\n        : id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\n      child.data.show = true;\n    }\n\n    if (\n      oldChild &&\n      oldChild.data &&\n      !isSameChild(child, oldChild) &&\n      !isAsyncPlaceholder(oldChild) &&\n      // #6687 component root is a comment node\n      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)\n    ) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild.data.transition = extend({}, data);\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        if (isAsyncPlaceholder(child)) {\n          return oldRawChild\n        }\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n};\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final desired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    // force removing pass\n    this.__patch__(\n      this._vnode,\n      this.kept,\n      false, // hydrating\n      true // removeOnly (!important avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    // assign to this to avoid being removed in tree-shaking\n    // $flow-disable-line\n    this._reflow = document.body.offsetHeight;\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      /* istanbul ignore if */\n      if (this._hasMove) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n};\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue$3.config.mustUseProp = mustUseProp;\nVue$3.config.isReservedTag = isReservedTag;\nVue$3.config.isReservedAttr = isReservedAttr;\nVue$3.config.getTagNamespace = getTagNamespace;\nVue$3.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue$3.options.directives, platformDirectives);\nextend(Vue$3.options.components, platformComponents);\n\n// install platform patch function\nVue$3.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nVue$3.nextTick(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue$3);\n    } else if (\"development\" !== 'production' && isChrome) {\n      console[console.info ? 'info' : 'log'](\n        'Download the Vue Devtools extension for a better development experience:\\n' +\n        'https://github.com/vuejs/vue-devtools'\n      );\n    }\n  }\n  if (\"development\" !== 'production' &&\n    config.productionTip !== false &&\n    inBrowser && typeof console !== 'undefined'\n  ) {\n    console[console.info ? 'info' : 'log'](\n      \"You are running Vue in development mode.\\n\" +\n      \"Make sure to turn on production mode when deploying for production.\\n\" +\n      \"See more tips at https://vuejs.org/guide/deployment.html\"\n    );\n  }\n}, 0);\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n});\n\n\n\nfunction parseText (\n  text,\n  delimiters\n) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return\n  }\n  var tokens = [];\n  var rawTokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index, tokenValue;\n  while ((match = tagRE.exec(text))) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      rawTokens.push(tokenValue = text.slice(lastIndex, index));\n      tokens.push(JSON.stringify(tokenValue));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push((\"_s(\" + exp + \")\"));\n    rawTokens.push({ '@binding': exp });\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    rawTokens.push(tokenValue = text.slice(lastIndex));\n    tokens.push(JSON.stringify(tokenValue));\n  }\n  return {\n    expression: tokens.join('+'),\n    tokens: rawTokens\n  }\n}\n\n/*  */\n\nfunction transformNode (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if (\"development\" !== 'production' && staticClass) {\n    var res = parseText(staticClass, options.delimiters);\n    if (res) {\n      warn(\n        \"class=\\\"\" + staticClass + \"\\\": \" +\n        'Interpolation inside attributes has been removed. ' +\n        'Use v-bind or the colon shorthand instead. For example, ' +\n        'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.'\n      );\n    }\n  }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData (el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + (el.staticClass) + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + (el.classBinding) + \",\";\n  }\n  return data\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData\n};\n\n/*  */\n\nfunction transformNode$1 (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    {\n      var res = parseText(staticStyle, options.delimiters);\n      if (res) {\n        warn(\n          \"style=\\\"\" + staticStyle + \"\\\": \" +\n          'Interpolation inside attributes has been removed. ' +\n          'Use v-bind or the colon shorthand instead. For example, ' +\n          'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.'\n        );\n      }\n    }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$1 (el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + (el.styleBinding) + \"),\";\n  }\n  return data\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$1\n};\n\n/*  */\n\nvar decoder;\n\nvar he = {\n  decode: function decode (html) {\n    decoder = decoder || document.createElement('div');\n    decoder.innerHTML = html;\n    return decoder.textContent\n  }\n};\n\n/*  */\n\nvar isUnaryTag = makeMap(\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n  'link,meta,param,source,track,wbr'\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap(\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap(\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n  'title,tr,track'\n);\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n/*!\n * HTML Parser By John Resig (ejohn.org)\n * Modified by Juriy \"kangax\" Zaytsev\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n */\n\n// Regular Expressions for parsing tags and attributes\nvar attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\n// but for Vue templates we can enforce a simple charset\nvar ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\nvar qnameCapture = \"((?:\" + ncname + \"\\\\:)?\" + ncname + \")\";\nvar startTagOpen = new RegExp((\"^<\" + qnameCapture));\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp((\"^<\\\\/\" + qnameCapture + \"[^>]*>\"));\nvar doctype = /^<!DOCTYPE [^>]+>/i;\nvar comment = /^<!--/;\nvar conditionalComment = /^<!\\[/;\n\nvar IS_REGEX_CAPTURING_BROKEN = false;\n'x'.replace(/x(.)?/g, function (m, g) {\n  IS_REGEX_CAPTURING_BROKEN = g === '';\n});\n\n// Special Elements (can contain anything)\nvar isPlainTextElement = makeMap('script,style,textarea', true);\nvar reCache = {};\n\nvar decodingMap = {\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&amp;': '&',\n  '&#10;': '\\n',\n  '&#9;': '\\t'\n};\nvar encodedAttr = /&(?:lt|gt|quot|amp);/g;\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10|#9);/g;\n\n// #5992\nvar isIgnoreNewlineTag = makeMap('pre,textarea', true);\nvar shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\\n'; };\n\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n  return value.replace(re, function (match) { return decodingMap[match]; })\n}\n\nfunction parseHTML (html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a plaintext content element like script/style\n    if (!lastTag || !isPlainTextElement(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('-->');\n\n          if (commentEnd >= 0) {\n            if (options.shouldKeepComment) {\n              options.comment(html.substring(4, commentEnd));\n            }\n            advance(commentEnd + 3);\n            continue\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          if (shouldIgnoreFirstNewline(lastTag, html)) {\n            advance(1);\n          }\n          continue\n        }\n      }\n\n      var text = (void 0), rest = (void 0), next = (void 0);\n      if (textEnd >= 0) {\n        rest = html.slice(textEnd);\n        while (\n          !endTag.test(rest) &&\n          !startTagOpen.test(rest) &&\n          !comment.test(rest) &&\n          !conditionalComment.test(rest)\n        ) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest.indexOf('<', 1);\n          if (next < 0) { break }\n          textEnd += next;\n          rest = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n        advance(textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n        html = '';\n      }\n\n      if (options.chars && text) {\n        options.chars(text);\n      }\n    } else {\n      var endTagLength = 0;\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n          text = text\n            .replace(/<!--([\\s\\S]*?)-->/g, '$1')\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (shouldIgnoreFirstNewline(stackedTag, text)) {\n          text = text.slice(1);\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return ''\n      });\n      index += html.length - rest$1.length;\n      html = rest$1;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last) {\n      options.chars && options.chars(html);\n      if (\"development\" !== 'production' && !stack.length && options.warn) {\n        options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"));\n      }\n      break\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance (n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag () {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n        advance(attr[0].length);\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match\n      }\n    }\n  }\n\n  function handleStartTag (match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\n        if (args[3] === '') { delete args[3]; }\n        if (args[4] === '') { delete args[4]; }\n        if (args[5] === '') { delete args[5]; }\n      }\n      var value = args[3] || args[4] || args[5] || '';\n      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\n        ? options.shouldDecodeNewlinesForHref\n        : options.shouldDecodeNewlines;\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(value, shouldDecodeNewlines)\n      };\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });\n      lastTag = tagName;\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag (tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) { start = index; }\n    if (end == null) { end = index; }\n\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n    }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (\"development\" !== 'production' &&\n          (i > pos || !tagName) &&\n          options.warn\n        ) {\n          options.warn(\n            (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\")\n          );\n        }\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nvar onRE = /^@|^v-on:/;\nvar dirRE = /^v-|^@|^:/;\nvar forAliasRE = /(.*?)\\s+(?:in|of)\\s+(.*)/;\nvar forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\nvar stripParensRE = /^\\(|\\)$/g;\n\nvar argRE = /:(.*)$/;\nvar bindRE = /^:|^v-bind:/;\nvar modifierRE = /\\.[^.]+/g;\n\nvar decodeHTMLCached = cached(he.decode);\n\n// configurable state\nvar warn$2;\nvar delimiters;\nvar transforms;\nvar preTransforms;\nvar postTransforms;\nvar platformIsPreTag;\nvar platformMustUseProp;\nvar platformGetTagNamespace;\n\n\n\nfunction createASTElement (\n  tag,\n  attrs,\n  parent\n) {\n  return {\n    type: 1,\n    tag: tag,\n    attrsList: attrs,\n    attrsMap: makeAttrsMap(attrs),\n    parent: parent,\n    children: []\n  }\n}\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse (\n  template,\n  options\n) {\n  warn$2 = options.warn || baseWarn;\n\n  platformIsPreTag = options.isPreTag || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformGetTagNamespace = options.getTagNamespace || no;\n\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n\n  delimiters = options.delimiters;\n\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n\n  function warnOnce (msg) {\n    if (!warned) {\n      warned = true;\n      warn$2(msg);\n    }\n  }\n\n  function closeElement (element) {\n    // check pre state\n    if (element.pre) {\n      inVPre = false;\n    }\n    if (platformIsPreTag(element.tag)) {\n      inPre = false;\n    }\n    // apply post-transforms\n    for (var i = 0; i < postTransforms.length; i++) {\n      postTransforms[i](element, options);\n    }\n  }\n\n  parseHTML(template, {\n    warn: warn$2,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,\n    shouldKeepComment: options.comments,\n    start: function start (tag, attrs, unary) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = createASTElement(tag, attrs, currentParent);\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n        \"development\" !== 'production' && warn$2(\n          'Templates should only be responsible for mapping the state to the ' +\n          'UI. Avoid placing tags with side-effects in your templates, such as ' +\n          \"<\" + tag + \">\" + ', as they will not be parsed.'\n        );\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        element = preTransforms[i](element, options) || element;\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else if (!element.processed) {\n        // structural directives\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n        // element-scope stuff\n        processElement(element, options);\n      }\n\n      function checkRootConstraints (el) {\n        {\n          if (el.tag === 'slot' || el.tag === 'template') {\n            warnOnce(\n              \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\n              'contain multiple nodes.'\n            );\n          }\n          if (el.attrsMap.hasOwnProperty('v-for')) {\n            warnOnce(\n              'Cannot use v-for on stateful component root element because ' +\n              'it renders multiple elements.'\n            );\n          }\n        }\n      }\n\n      // tree management\n      if (!root) {\n        root = element;\n        checkRootConstraints(root);\n      } else if (!stack.length) {\n        // allow root elements with v-if, v-else-if and v-else\n        if (root.if && (element.elseif || element.else)) {\n          checkRootConstraints(element);\n          addIfCondition(root, {\n            exp: element.elseif,\n            block: element\n          });\n        } else {\n          warnOnce(\n            \"Component template should contain exactly one root element. \" +\n            \"If you are using v-if on multiple elements, \" +\n            \"use v-else-if to chain them instead.\"\n          );\n        }\n      }\n      if (currentParent && !element.forbidden) {\n        if (element.elseif || element.else) {\n          processIfConditions(element, currentParent);\n        } else if (element.slotScope) { // scoped slot\n          currentParent.plain = false;\n          var name = element.slotTarget || '\"default\"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        } else {\n          currentParent.children.push(element);\n          element.parent = currentParent;\n        }\n      }\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      } else {\n        closeElement(element);\n      }\n    },\n\n    end: function end () {\n      // remove trailing whitespace\n      var element = stack[stack.length - 1];\n      var lastNode = element.children[element.children.length - 1];\n      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {\n        element.children.pop();\n      }\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      closeElement(element);\n    },\n\n    chars: function chars (text) {\n      if (!currentParent) {\n        {\n          if (text === template) {\n            warnOnce(\n              'Component template requires a root element, rather than just text.'\n            );\n          } else if ((text = text.trim())) {\n            warnOnce(\n              (\"text \\\"\" + text + \"\\\" outside root element will be ignored.\")\n            );\n          }\n        }\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n        currentParent.tag === 'textarea' &&\n        currentParent.attrsMap.placeholder === text\n      ) {\n        return\n      }\n      var children = currentParent.children;\n      text = inPre || text.trim()\n        ? isTextTag(currentParent) ? text : decodeHTMLCached(text)\n        // only preserve whitespace if its not right after a starting tag\n        : preserveWhitespace && children.length ? ' ' : '';\n      if (text) {\n        var res;\n        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {\n          children.push({\n            type: 2,\n            expression: res.expression,\n            tokens: res.tokens,\n            text: text\n          });\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\n          children.push({\n            type: 3,\n            text: text\n          });\n        }\n      }\n    },\n    comment: function comment (text) {\n      currentParent.children.push({\n        type: 3,\n        text: text,\n        isComment: true\n      });\n    }\n  });\n  return root\n}\n\nfunction processPre (el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs (el) {\n  var l = el.attrsList.length;\n  if (l) {\n    var attrs = el.attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      attrs[i] = {\n        name: el.attrsList[i].name,\n        value: JSON.stringify(el.attrsList[i].value)\n      };\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processElement (element, options) {\n  processKey(element);\n\n  // determine whether this is a plain element after\n  // removing structural attributes\n  element.plain = !element.key && !element.attrsList.length;\n\n  processRef(element);\n  processSlot(element);\n  processComponent(element);\n  for (var i = 0; i < transforms.length; i++) {\n    element = transforms[i](element, options) || element;\n  }\n  processAttrs(element);\n}\n\nfunction processKey (el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (\"development\" !== 'production' && el.tag === 'template') {\n      warn$2(\"<template> cannot be keyed. Place the key on real elements instead.\");\n    }\n    el.key = exp;\n  }\n}\n\nfunction processRef (el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor (el) {\n  var exp;\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n    var res = parseFor(exp);\n    if (res) {\n      extend(el, res);\n    } else {\n      warn$2(\n        (\"Invalid v-for expression: \" + exp)\n      );\n    }\n  }\n}\n\nfunction parseFor (exp) {\n  var inMatch = exp.match(forAliasRE);\n  if (!inMatch) { return }\n  var res = {};\n  res.for = inMatch[2].trim();\n  var alias = inMatch[1].trim().replace(stripParensRE, '');\n  var iteratorMatch = alias.match(forIteratorRE);\n  if (iteratorMatch) {\n    res.alias = alias.replace(forIteratorRE, '');\n    res.iterator1 = iteratorMatch[1].trim();\n    if (iteratorMatch[2]) {\n      res.iterator2 = iteratorMatch[2].trim();\n    }\n  } else {\n    res.alias = alias;\n  }\n  return res\n}\n\nfunction processIf (el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions (el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else {\n    warn$2(\n      \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\n      \"used on element <\" + (el.tag) + \"> without corresponding v-if.\"\n    );\n  }\n}\n\nfunction findPrevElement (children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i]\n    } else {\n      if (\"development\" !== 'production' && children[i].text !== ' ') {\n        warn$2(\n          \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\n          \"will be ignored.\"\n        );\n      }\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition (el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce (el) {\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\n  if (once$$1 != null) {\n    el.once = true;\n  }\n}\n\nfunction processSlot (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if (\"development\" !== 'production' && el.key) {\n      warn$2(\n        \"`key` does not work on <slot> because slots are abstract outlets \" +\n        \"and can possibly expand into multiple elements. \" +\n        \"Use the key on a wrapping element instead.\"\n      );\n    }\n  } else {\n    var slotScope;\n    if (el.tag === 'template') {\n      slotScope = getAndRemoveAttr(el, 'scope');\n      /* istanbul ignore if */\n      if (\"development\" !== 'production' && slotScope) {\n        warn$2(\n          \"the \\\"scope\\\" attribute for scoped slots have been deprecated and \" +\n          \"replaced by \\\"slot-scope\\\" since 2.5. The new \\\"slot-scope\\\" attribute \" +\n          \"can also be used on plain elements in addition to <template> to \" +\n          \"denote scoped slots.\",\n          true\n        );\n      }\n      el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');\n    } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {\n      /* istanbul ignore if */\n      if (\"development\" !== 'production' && el.attrsMap['v-for']) {\n        warn$2(\n          \"Ambiguous combined usage of slot-scope and v-for on <\" + (el.tag) + \"> \" +\n          \"(v-for takes higher priority). Use a wrapper <template> for the \" +\n          \"scoped slot to make it clearer.\",\n          true\n        );\n      }\n      el.slotScope = slotScope;\n    }\n    var slotTarget = getBindingAttr(el, 'slot');\n    if (slotTarget) {\n      el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n      // preserve slot as an attribute for native shadow DOM compat\n      // only for non-scoped slots.\n      if (el.tag !== 'template' && !el.slotScope) {\n        addAttr(el, 'slot', slotTarget);\n      }\n    }\n  }\n}\n\nfunction processComponent (el) {\n  var binding;\n  if ((binding = getBindingAttr(el, 'is'))) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs (el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, modifiers, isProp;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name);\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isProp = false;\n        if (modifiers) {\n          if (modifiers.prop) {\n            isProp = true;\n            name = camelize(name);\n            if (name === 'innerHtml') { name = 'innerHTML'; }\n          }\n          if (modifiers.camel) {\n            name = camelize(name);\n          }\n          if (modifiers.sync) {\n            addHandler(\n              el,\n              (\"update:\" + (camelize(name))),\n              genAssignmentCode(value, \"$event\")\n            );\n          }\n        }\n        if (isProp || (\n          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)\n        )) {\n          addProp(el, name, value);\n        } else {\n          addAttr(el, name, value);\n        }\n      } else if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '');\n        addHandler(el, name, value, modifiers, false, warn$2);\n      } else { // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        var arg = argMatch && argMatch[1];\n        if (arg) {\n          name = name.slice(0, -(arg.length + 1));\n        }\n        addDirective(el, name, rawName, value, arg, modifiers);\n        if (\"development\" !== 'production' && name === 'model') {\n          checkForAliasModel(el, value);\n        }\n      }\n    } else {\n      // literal attribute\n      {\n        var res = parseText(value, delimiters);\n        if (res) {\n          warn$2(\n            name + \"=\\\"\" + value + \"\\\": \" +\n            'Interpolation inside attributes has been removed. ' +\n            'Use v-bind or the colon shorthand instead. For example, ' +\n            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.'\n          );\n        }\n      }\n      addAttr(el, name, JSON.stringify(value));\n      // #6887 firefox doesn't update muted state if set via attribute\n      // even immediately after element creation\n      if (!el.component &&\n          name === 'muted' &&\n          platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n        addProp(el, name, 'true');\n      }\n    }\n  }\n}\n\nfunction checkInFor (el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true\n    }\n    parent = parent.parent;\n  }\n  return false\n}\n\nfunction parseModifiers (name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\n    return ret\n  }\n}\n\nfunction makeAttrsMap (attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (\n      \"development\" !== 'production' &&\n      map[attrs[i].name] && !isIE && !isEdge\n    ) {\n      warn$2('duplicate attribute: ' + attrs[i].name);\n    }\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map\n}\n\n// for script (e.g. type=\"x/template\") or style, do not decode content\nfunction isTextTag (el) {\n  return el.tag === 'script' || el.tag === 'style'\n}\n\nfunction isForbiddenTag (el) {\n  return (\n    el.tag === 'style' ||\n    (el.tag === 'script' && (\n      !el.attrsMap.type ||\n      el.attrsMap.type === 'text/javascript'\n    ))\n  )\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug (attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res\n}\n\nfunction checkForAliasModel (el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$2(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"You are binding v-model directly to a v-for iteration alias. \" +\n        \"This will not be able to modify the v-for source array because \" +\n        \"writing to the alias is like modifying a function local variable. \" +\n        \"Consider using an array of objects and use v-model on an object property instead.\"\n      );\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\n/**\n * Expand input[v-model] with dyanmic type bindings into v-if-else chains\n * Turn this:\n *   <input v-model=\"data[type]\" :type=\"type\">\n * into this:\n *   <input v-if=\"type === 'checkbox'\" type=\"checkbox\" v-model=\"data[type]\">\n *   <input v-else-if=\"type === 'radio'\" type=\"radio\" v-model=\"data[type]\">\n *   <input v-else :type=\"type\" v-model=\"data[type]\">\n */\n\nfunction preTransformNode (el, options) {\n  if (el.tag === 'input') {\n    var map = el.attrsMap;\n    if (map['v-model'] && (map['v-bind:type'] || map[':type'])) {\n      var typeBinding = getBindingAttr(el, 'type');\n      var ifCondition = getAndRemoveAttr(el, 'v-if', true);\n      var ifConditionExtra = ifCondition ? (\"&&(\" + ifCondition + \")\") : \"\";\n      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;\n      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);\n      // 1. checkbox\n      var branch0 = cloneASTElement(el);\n      // process for on the main node\n      processFor(branch0);\n      addRawAttr(branch0, 'type', 'checkbox');\n      processElement(branch0, options);\n      branch0.processed = true; // prevent it from double-processed\n      branch0.if = \"(\" + typeBinding + \")==='checkbox'\" + ifConditionExtra;\n      addIfCondition(branch0, {\n        exp: branch0.if,\n        block: branch0\n      });\n      // 2. add radio else-if condition\n      var branch1 = cloneASTElement(el);\n      getAndRemoveAttr(branch1, 'v-for', true);\n      addRawAttr(branch1, 'type', 'radio');\n      processElement(branch1, options);\n      addIfCondition(branch0, {\n        exp: \"(\" + typeBinding + \")==='radio'\" + ifConditionExtra,\n        block: branch1\n      });\n      // 3. other\n      var branch2 = cloneASTElement(el);\n      getAndRemoveAttr(branch2, 'v-for', true);\n      addRawAttr(branch2, ':type', typeBinding);\n      processElement(branch2, options);\n      addIfCondition(branch0, {\n        exp: ifCondition,\n        block: branch2\n      });\n\n      if (hasElse) {\n        branch0.else = true;\n      } else if (elseIfCondition) {\n        branch0.elseif = elseIfCondition;\n      }\n\n      return branch0\n    }\n  }\n}\n\nfunction cloneASTElement (el) {\n  return createASTElement(el.tag, el.attrsList.slice(), el.parent)\n}\n\nvar model$2 = {\n  preTransformNode: preTransformNode\n};\n\nvar modules$1 = [\n  klass$1,\n  style$1,\n  model$2\n];\n\n/*  */\n\nfunction text (el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\n/*  */\n\nfunction html (el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\nvar directives$1 = {\n  model: model,\n  text: text,\n  html: html\n};\n\n/*  */\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  directives: directives$1,\n  isPreTag: isPreTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  canBeLeftOpenTag: canBeLeftOpenTag,\n  isReservedTag: isReservedTag,\n  getTagNamespace: getTagNamespace,\n  staticKeys: genStaticKeys(modules$1)\n};\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize (root, options) {\n  if (!root) { return }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic$1(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1 (keys) {\n  return makeMap(\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +\n    (keys ? ',' + keys : '')\n  )\n}\n\nfunction markStatic$1 (node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (\n      !isPlatformReservedTag(node.tag) &&\n      node.tag !== 'slot' &&\n      node.attrsMap['inline-template'] == null\n    ) {\n      return\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic$1(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        var block = node.ifConditions[i$1].block;\n        markStatic$1(block);\n        if (!block.static) {\n          node.static = false;\n        }\n      }\n    }\n  }\n}\n\nfunction markStaticRoots (node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(\n      node.children.length === 1 &&\n      node.children[0].type === 3\n    )) {\n      node.staticRoot = true;\n      return\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        markStaticRoots(node.ifConditions[i$1].block, isInFor);\n      }\n    }\n  }\n}\n\nfunction isStatic (node) {\n  if (node.type === 2) { // expression\n    return false\n  }\n  if (node.type === 3) { // text\n    return true\n  }\n  return !!(node.pre || (\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n  ))\n}\n\nfunction isDirectChildOfTemplateFor (node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false\n    }\n    if (node.for) {\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\nvar fnExpRE = /^\\s*([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/;\nvar simplePathRE = /^\\s*[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?']|\\[\".*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*\\s*$/;\n\n// keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\n// #4868: modifiers that prevent the execution of the listener\n// need to explicitly return null so that we can determine whether to remove\n// the listener for .once\nvar genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\n  ctrl: genGuard(\"!$event.ctrlKey\"),\n  shift: genGuard(\"!$event.shiftKey\"),\n  alt: genGuard(\"!$event.altKey\"),\n  meta: genGuard(\"!$event.metaKey\"),\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\n};\n\nfunction genHandlers (\n  events,\n  isNative,\n  warn\n) {\n  var res = isNative ? 'nativeOn:{' : 'on:{';\n  for (var name in events) {\n    res += \"\\\"\" + name + \"\\\":\" + (genHandler(name, events[name])) + \",\";\n  }\n  return res.slice(0, -1) + '}'\n}\n\nfunction genHandler (\n  name,\n  handler\n) {\n  if (!handler) {\n    return 'function(){}'\n  }\n\n  if (Array.isArray(handler)) {\n    return (\"[\" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + \"]\")\n  }\n\n  var isMethodPath = simplePathRE.test(handler.value);\n  var isFunctionExpression = fnExpRE.test(handler.value);\n\n  if (!handler.modifiers) {\n    if (isMethodPath || isFunctionExpression) {\n      return handler.value\n    }\n    /* istanbul ignore if */\n    return (\"function($event){\" + (handler.value) + \"}\") // inline statement\n  } else {\n    var code = '';\n    var genModifierCode = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        genModifierCode += modifierCode[key];\n        // left/right\n        if (keyCodes[key]) {\n          keys.push(key);\n        }\n      } else if (key === 'exact') {\n        var modifiers = (handler.modifiers);\n        genModifierCode += genGuard(\n          ['ctrl', 'shift', 'alt', 'meta']\n            .filter(function (keyModifier) { return !modifiers[keyModifier]; })\n            .map(function (keyModifier) { return (\"$event.\" + keyModifier + \"Key\"); })\n            .join('||')\n        );\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code += genKeyFilter(keys);\n    }\n    // Make sure modifiers like prevent and stop get executed after key filtering\n    if (genModifierCode) {\n      code += genModifierCode;\n    }\n    var handlerCode = isMethodPath\n      ? handler.value + '($event)'\n      : isFunctionExpression\n        ? (\"(\" + (handler.value) + \")($event)\")\n        : handler.value;\n    /* istanbul ignore if */\n    return (\"function($event){\" + code + handlerCode + \"}\")\n  }\n}\n\nfunction genKeyFilter (keys) {\n  return (\"if(!('button' in $event)&&\" + (keys.map(genFilterCode).join('&&')) + \")return null;\")\n}\n\nfunction genFilterCode (key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return (\"$event.keyCode!==\" + keyVal)\n  }\n  var code = keyCodes[key];\n  return (\n    \"_k($event.keyCode,\" +\n    (JSON.stringify(key)) + \",\" +\n    (JSON.stringify(code)) + \",\" +\n    \"$event.key)\"\n  )\n}\n\n/*  */\n\nfunction on (el, dir) {\n  if (\"development\" !== 'production' && dir.modifiers) {\n    warn(\"v-on without argument does not support modifiers.\");\n  }\n  el.wrapListeners = function (code) { return (\"_g(\" + code + \",\" + (dir.value) + \")\"); };\n}\n\n/*  */\n\nfunction bind$1 (el, dir) {\n  el.wrapData = function (code) {\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + \",\" + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + \")\")\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  on: on,\n  bind: bind$1,\n  cloak: noop\n};\n\n/*  */\n\nvar CodegenState = function CodegenState (options) {\n  this.options = options;\n  this.warn = options.warn || baseWarn;\n  this.transforms = pluckModuleFunction(options.modules, 'transformCode');\n  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  this.directives = extend(extend({}, baseDirectives), options.directives);\n  var isReservedTag = options.isReservedTag || no;\n  this.maybeComponent = function (el) { return !isReservedTag(el.tag); };\n  this.onceId = 0;\n  this.staticRenderFns = [];\n};\n\n\n\nfunction generate (\n  ast,\n  options\n) {\n  var state = new CodegenState(options);\n  var code = ast ? genElement(ast, state) : '_c(\"div\")';\n  return {\n    render: (\"with(this){return \" + code + \"}\"),\n    staticRenderFns: state.staticRenderFns\n  }\n}\n\nfunction genElement (el, state) {\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el, state)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el, state)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el, state)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.tag === 'template' && !el.slotTarget) {\n    return genChildren(el, state) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el, state)\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el, state);\n    } else {\n      var data = el.plain ? undefined : genData$2(el, state);\n\n      var children = el.inlineTemplate ? null : genChildren(el, state, true);\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < state.transforms.length; i++) {\n      code = state.transforms[i](el, code);\n    }\n    return code\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic (el, state) {\n  el.staticProcessed = true;\n  state.staticRenderFns.push((\"with(this){return \" + (genElement(el, state)) + \"}\"));\n  return (\"_m(\" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\n}\n\n// v-once\nfunction genOnce (el, state) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n      \"development\" !== 'production' && state.warn(\n        \"v-once can only be used inside v-for that is keyed. \"\n      );\n      return genElement(el, state)\n    }\n    return (\"_o(\" + (genElement(el, state)) + \",\" + (state.onceId++) + \",\" + key + \")\")\n  } else {\n    return genStatic(el, state)\n  }\n}\n\nfunction genIf (\n  el,\n  state,\n  altGen,\n  altEmpty\n) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)\n}\n\nfunction genIfConditions (\n  conditions,\n  state,\n  altGen,\n  altEmpty\n) {\n  if (!conditions.length) {\n    return altEmpty || '_e()'\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions, state, altGen, altEmpty)))\n  } else {\n    return (\"\" + (genTernaryExp(condition.block)))\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp (el) {\n    return altGen\n      ? altGen(el, state)\n      : el.once\n        ? genOnce(el, state)\n        : genElement(el, state)\n  }\n}\n\nfunction genFor (\n  el,\n  state,\n  altGen,\n  altHelper\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n\n  if (\"development\" !== 'production' &&\n    state.maybeComponent(el) &&\n    el.tag !== 'slot' &&\n    el.tag !== 'template' &&\n    !el.key\n  ) {\n    state.warn(\n      \"<\" + (el.tag) + \" v-for=\\\"\" + alias + \" in \" + exp + \"\\\">: component lists rendered with \" +\n      \"v-for should have explicit keys. \" +\n      \"See https://vuejs.org/guide/list.html#key for more info.\",\n      true /* tip */\n    );\n  }\n\n  el.forProcessed = true; // avoid recursion\n  return (altHelper || '_l') + \"((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + ((altGen || genElement)(el, state)) +\n    '})'\n}\n\nfunction genData$2 (el, state) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el, state);\n  if (dirs) { data += dirs + ','; }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + (el.key) + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + (el.ref) + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < state.dataGenFns.length; i++) {\n    data += state.dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:{\" + (genProps(el.attrs)) + \"},\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:{\" + (genProps(el.props)) + \"},\";\n  }\n  // event handlers\n  if (el.events) {\n    data += (genHandlers(el.events, false, state.warn)) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += (genHandlers(el.nativeEvents, true, state.warn)) + \",\";\n  }\n  // slot target\n  // only for non-scoped slots\n  if (el.slotTarget && !el.slotScope) {\n    data += \"slot:\" + (el.slotTarget) + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += (genScopedSlots(el.scopedSlots, state)) + \",\";\n  }\n  // component v-model\n  if (el.model) {\n    data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el, state);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  // v-on data wrap\n  if (el.wrapListeners) {\n    data = el.wrapListeners(data);\n  }\n  return data\n}\n\nfunction genDirectives (el, state) {\n  var dirs = el.directives;\n  if (!dirs) { return }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = state.directives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, state.warn);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\\\"\" + (dir.arg) + \"\\\"\") : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']'\n  }\n}\n\nfunction genInlineTemplate (el, state) {\n  var ast = el.children[0];\n  if (\"development\" !== 'production' && (\n    el.children.length !== 1 || ast.type !== 1\n  )) {\n    state.warn('Inline-template components must have exactly one child element.');\n  }\n  if (ast.type === 1) {\n    var inlineRenderFns = generate(ast, state.options);\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\n  }\n}\n\nfunction genScopedSlots (\n  slots,\n  state\n) {\n  return (\"scopedSlots:_u([\" + (Object.keys(slots).map(function (key) {\n      return genScopedSlot(key, slots[key], state)\n    }).join(',')) + \"])\")\n}\n\nfunction genScopedSlot (\n  key,\n  el,\n  state\n) {\n  if (el.for && !el.forProcessed) {\n    return genForScopedSlot(key, el, state)\n  }\n  var fn = \"function(\" + (String(el.slotScope)) + \"){\" +\n    \"return \" + (el.tag === 'template'\n      ? el.if\n        ? ((el.if) + \"?\" + (genChildren(el, state) || 'undefined') + \":undefined\")\n        : genChildren(el, state) || 'undefined'\n      : genElement(el, state)) + \"}\";\n  return (\"{key:\" + key + \",fn:\" + fn + \"}\")\n}\n\nfunction genForScopedSlot (\n  key,\n  el,\n  state\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + (genScopedSlot(key, el, state)) +\n    '})'\n}\n\nfunction genChildren (\n  el,\n  state,\n  checkSkip,\n  altGenElement,\n  altGenNode\n) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 &&\n      el$1.for &&\n      el$1.tag !== 'template' &&\n      el$1.tag !== 'slot'\n    ) {\n      return (altGenElement || genElement)(el$1, state)\n    }\n    var normalizationType = checkSkip\n      ? getNormalizationType(children, state.maybeComponent)\n      : 0;\n    var gen = altGenNode || genNode;\n    return (\"[\" + (children.map(function (c) { return gen(c, state); }).join(',')) + \"]\" + (normalizationType ? (\",\" + normalizationType) : ''))\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType (\n  children,\n  maybeComponent\n) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue\n    }\n    if (needsNormalization(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n      res = 2;\n      break\n    }\n    if (maybeComponent(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n      res = 1;\n    }\n  }\n  return res\n}\n\nfunction needsNormalization (el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\n}\n\nfunction genNode (node, state) {\n  if (node.type === 1) {\n    return genElement(node, state)\n  } if (node.type === 3 && node.isComment) {\n    return genComment(node)\n  } else {\n    return genText(node)\n  }\n}\n\nfunction genText (text) {\n  return (\"_v(\" + (text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\n}\n\nfunction genComment (comment) {\n  return (\"_e(\" + (JSON.stringify(comment.text)) + \")\")\n}\n\nfunction genSlot (el, state) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el, state);\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\n  var attrs = el.attrs && (\"{\" + (el.attrs.map(function (a) { return ((camelize(a.name)) + \":\" + (a.value)); }).join(',')) + \"}\");\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')'\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent (\n  componentName,\n  el,\n  state\n) {\n  var children = el.inlineTemplate ? null : genChildren(el, state, true);\n  return (\"_c(\" + componentName + \",\" + (genData$2(el, state)) + (children ? (\",\" + children) : '') + \")\")\n}\n\nfunction genProps (props) {\n  var res = '';\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    /* istanbul ignore if */\n    {\n      res += \"\\\"\" + (prop.name) + \"\\\":\" + (transformSpecialNewlines(prop.value)) + \",\";\n    }\n  }\n  return res.slice(0, -1)\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines (text) {\n  return text\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n}\n\n/*  */\n\n// these keywords should not appear inside expressions, but operators like\n// typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\n  'extends,finally,continue,debugger,function,arguments'\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\n\n// these unary operators should not be used as property/method names\nvar unaryOperatorsRE = new RegExp('\\\\b' + (\n  'delete,typeof,void'\n).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\n\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors (ast) {\n  var errors = [];\n  if (ast) {\n    checkNode(ast, errors);\n  }\n  return errors\n}\n\nfunction checkNode (node, errors) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          if (name === 'v-for') {\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), errors);\n          } else if (onRE.test(name)) {\n            checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          } else {\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], errors);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, errors);\n  }\n}\n\nfunction checkEvent (exp, text, errors) {\n  var stipped = exp.replace(stripStringRE, '');\n  var keywordMatch = stipped.match(unaryOperatorsRE);\n  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {\n    errors.push(\n      \"avoid using JavaScript unary operator as property name: \" +\n      \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\n    );\n  }\n  checkExpression(exp, text, errors);\n}\n\nfunction checkFor (node, text, errors) {\n  checkExpression(node.for || '', text, errors);\n  checkIdentifier(node.alias, 'v-for alias', text, errors);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\n}\n\nfunction checkIdentifier (\n  ident,\n  type,\n  text,\n  errors\n) {\n  if (typeof ident === 'string') {\n    try {\n      new Function((\"var \" + ident + \"=_\"));\n    } catch (e) {\n      errors.push((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())));\n    }\n  }\n}\n\nfunction checkExpression (exp, text, errors) {\n  try {\n    new Function((\"return \" + exp));\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      errors.push(\n        \"avoid using JavaScript keyword as property name: \" +\n        \"\\\"\" + (keywordMatch[0]) + \"\\\"\\n  Raw expression: \" + (text.trim())\n      );\n    } else {\n      errors.push(\n        \"invalid expression: \" + (e.message) + \" in\\n\\n\" +\n        \"    \" + exp + \"\\n\\n\" +\n        \"  Raw expression: \" + (text.trim()) + \"\\n\"\n      );\n    }\n  }\n}\n\n/*  */\n\nfunction createFunction (code, errors) {\n  try {\n    return new Function(code)\n  } catch (err) {\n    errors.push({ err: err, code: code });\n    return noop\n  }\n}\n\nfunction createCompileToFunctionFn (compile) {\n  var cache = Object.create(null);\n\n  return function compileToFunctions (\n    template,\n    options,\n    vm\n  ) {\n    options = extend({}, options);\n    var warn$$1 = options.warn || warn;\n    delete options.warn;\n\n    /* istanbul ignore if */\n    {\n      // detect possible CSP restriction\n      try {\n        new Function('return 1');\n      } catch (e) {\n        if (e.toString().match(/unsafe-eval|CSP/)) {\n          warn$$1(\n            'It seems you are using the standalone build of Vue.js in an ' +\n            'environment with Content Security Policy that prohibits unsafe-eval. ' +\n            'The template compiler cannot work in this environment. Consider ' +\n            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\n            'templates into render functions.'\n          );\n        }\n      }\n    }\n\n    // check cache\n    var key = options.delimiters\n      ? String(options.delimiters) + template\n      : template;\n    if (cache[key]) {\n      return cache[key]\n    }\n\n    // compile\n    var compiled = compile(template, options);\n\n    // check compilation errors/tips\n    {\n      if (compiled.errors && compiled.errors.length) {\n        warn$$1(\n          \"Error compiling template:\\n\\n\" + template + \"\\n\\n\" +\n          compiled.errors.map(function (e) { return (\"- \" + e); }).join('\\n') + '\\n',\n          vm\n        );\n      }\n      if (compiled.tips && compiled.tips.length) {\n        compiled.tips.forEach(function (msg) { return tip(msg, vm); });\n      }\n    }\n\n    // turn code into functions\n    var res = {};\n    var fnGenErrors = [];\n    res.render = createFunction(compiled.render, fnGenErrors);\n    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {\n      return createFunction(code, fnGenErrors)\n    });\n\n    // check function generation errors.\n    // this should only happen if there is a bug in the compiler itself.\n    // mostly for codegen development use\n    /* istanbul ignore if */\n    {\n      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\n        warn$$1(\n          \"Failed to generate render function:\\n\\n\" +\n          fnGenErrors.map(function (ref) {\n            var err = ref.err;\n            var code = ref.code;\n\n            return ((err.toString()) + \" in\\n\\n\" + code + \"\\n\");\n        }).join('\\n'),\n          vm\n        );\n      }\n    }\n\n    return (cache[key] = res)\n  }\n}\n\n/*  */\n\nfunction createCompilerCreator (baseCompile) {\n  return function createCompiler (baseOptions) {\n    function compile (\n      template,\n      options\n    ) {\n      var finalOptions = Object.create(baseOptions);\n      var errors = [];\n      var tips = [];\n      finalOptions.warn = function (msg, tip) {\n        (tip ? tips : errors).push(msg);\n      };\n\n      if (options) {\n        // merge custom modules\n        if (options.modules) {\n          finalOptions.modules =\n            (baseOptions.modules || []).concat(options.modules);\n        }\n        // merge custom directives\n        if (options.directives) {\n          finalOptions.directives = extend(\n            Object.create(baseOptions.directives || null),\n            options.directives\n          );\n        }\n        // copy other options\n        for (var key in options) {\n          if (key !== 'modules' && key !== 'directives') {\n            finalOptions[key] = options[key];\n          }\n        }\n      }\n\n      var compiled = baseCompile(template, finalOptions);\n      {\n        errors.push.apply(errors, detectErrors(compiled.ast));\n      }\n      compiled.errors = errors;\n      compiled.tips = tips;\n      return compiled\n    }\n\n    return {\n      compile: compile,\n      compileToFunctions: createCompileToFunctionFn(compile)\n    }\n  }\n}\n\n/*  */\n\n// `createCompilerCreator` allows creating compilers that use alternative\n// parser/optimizer/codegen, e.g the SSR optimizing compiler.\n// Here we just export a default compiler using the default parts.\nvar createCompiler = createCompilerCreator(function baseCompile (\n  template,\n  options\n) {\n  var ast = parse(template.trim(), options);\n  if (options.optimize !== false) {\n    optimize(ast, options);\n  }\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n});\n\n/*  */\n\nvar ref$1 = createCompiler(baseOptions);\nvar compileToFunctions = ref$1.compileToFunctions;\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nvar div;\nfunction getShouldDecode (href) {\n  div = div || document.createElement('div');\n  div.innerHTML = href ? \"<a href=\\\"\\n\\\"/>\" : \"<div a=\\\"\\n\\\"/>\";\n  return div.innerHTML.indexOf('&#10;') > 0\n}\n\n// #3663: IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;\n// #6828: chrome encodes content in a[href]\nvar shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n\nvar mount = Vue$3.prototype.$mount;\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    \"development\" !== 'production' && warn(\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\n    );\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (\"development\" !== 'production' && !template) {\n            warn(\n              (\"Template element not found or is empty: \" + (options.template)),\n              this\n            );\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        {\n          warn('invalid template option:' + template, this);\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if (\"development\" !== 'production' && config.performance && mark) {\n        mark('compile');\n      }\n\n      var ref = compileToFunctions(template, {\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,\n        delimiters: options.delimiters,\n        comments: options.comments\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if (\"development\" !== 'production' && config.performance && mark) {\n        mark('compile end');\n        measure((\"vue \" + (this._name) + \" compile\"), 'compile', 'compile end');\n      }\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML (el) {\n  if (el.outerHTML) {\n    return el.outerHTML\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML\n  }\n}\n\nVue$3.compile = compileToFunctions;\n\nreturn Vue$3;\n\n})));\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],4:[function(require,module,exports){\n'use strict';\n\n// Vue Dev\nwindow.Vue = require('vue/dist/vue.js');\n//Vue Prod\n//window.Vue = require('vue/dist/vue.min');\n\nwindow.VeeValidate = require('vee-validate');\nVeeValidate.Validator.addLocale({\n    'es': require('vee-validate/dist/locale/es')\n});\nVue.use(VeeValidate, { locale: 'es', errorBagName: 'validation_errors' });\n\nif ($('#app').length) {\n    new Vue({\n        el: '#app',\n        components: require('./vue-components')\n    });\n}\n\n},{\"./vue-components\":5,\"vee-validate\":2,\"vee-validate/dist/locale/es\":1,\"vue/dist/vue.js\":3}],5:[function(require,module,exports){\n'use strict';\n\nrequire('./vue-components/global-errors');\nrequire('./vue-components/errors');\nrequire('./vue-components/select2');\n\n/**\r\n * Contabilidad Components...\r\n */\nrequire('./vue-components/Contabilidad/emails');\n\nrequire('./vue-components/Contabilidad/poliza_tipo/poliza-tipo-create');\nrequire('./vue-components/Contabilidad/tipo_cuenta_contable/tipo-cuenta-contable-create');\nrequire('./vue-components/Contabilidad/tipo_cuenta_contable/tipo-cuenta-contable-update');\nrequire('./vue-components/Contabilidad/cuenta_contable/index');\nrequire('./vue-components/Contabilidad/poliza_generada/edit');\nrequire('./vue-components/Contabilidad/cuenta_concepto/index');\nrequire('./vue-components/Contabilidad/cuenta_material/index');\nrequire('./vue-components/Contabilidad/cuenta_empresa/cuenta-empresa-edit');\nrequire('./vue-components/Contabilidad/cuenta_almacen/index');\nrequire('./vue-components/Contabilidad/datos_contables/edit');\nrequire('./vue-components/kardex_material/kardex-material-index');\nrequire('./vue-components/Contabilidad/modulos/revaluacion/create');\nrequire('./vue-components/Contabilidad/cuenta_fondo/index');\nrequire('./vue-components/Contabilidad/cuenta_bancos/cuenta-bancaria-edit');\nrequire('./vue-components/Contabilidad/cuenta_costo/index');\n\n/**\r\n * Compras Components\r\n */\nrequire('./vue-components/Compras/requisicion/create');\nrequire('./vue-components/Compras/requisicion/edit');\nrequire('./vue-components/Compras/material/index');\n\n/**\r\n * Finanzas Components\r\n */\nrequire('./vue-components/Finanzas/comprobante_fondo_fijo/create');\nrequire('./vue-components/Finanzas/comprobante_fondo_fijo/edit');\n/**\r\n * Reportes Components\r\n */\nrequire('./vue-components/Reportes/subcontratos-estimacion');\n\n/**\r\n * Tesoreria Components\r\n */\nrequire('./vue-components/Tesoreria/traspaso_cuentas/index');\nrequire('./vue-components/Tesoreria/movimientos_bancarios/index');\n\n/**\r\n * Control de costos Components\r\n */\nrequire('./vue-components/Control_Costos/solicitar_reclasificacion/index');\nrequire('./vue-components/Control_Costos/solicitar_reclasificacion/items');\nrequire('./vue-components/Control_Presupuesto/presupuesto/index');\n\n/**\r\n * Configuración Components\r\n */\nrequire('./vue-components/Configuracion/Cierre/index');\n\n},{\"./vue-components/Compras/material/index\":6,\"./vue-components/Compras/requisicion/create\":7,\"./vue-components/Compras/requisicion/edit\":8,\"./vue-components/Configuracion/Cierre/index\":9,\"./vue-components/Contabilidad/cuenta_almacen/index\":10,\"./vue-components/Contabilidad/cuenta_bancos/cuenta-bancaria-edit\":11,\"./vue-components/Contabilidad/cuenta_concepto/index\":12,\"./vue-components/Contabilidad/cuenta_contable/index\":13,\"./vue-components/Contabilidad/cuenta_costo/index\":14,\"./vue-components/Contabilidad/cuenta_empresa/cuenta-empresa-edit\":15,\"./vue-components/Contabilidad/cuenta_fondo/index\":16,\"./vue-components/Contabilidad/cuenta_material/index\":17,\"./vue-components/Contabilidad/datos_contables/edit\":18,\"./vue-components/Contabilidad/emails\":19,\"./vue-components/Contabilidad/modulos/revaluacion/create\":20,\"./vue-components/Contabilidad/poliza_generada/edit\":21,\"./vue-components/Contabilidad/poliza_tipo/poliza-tipo-create\":22,\"./vue-components/Contabilidad/tipo_cuenta_contable/tipo-cuenta-contable-create\":23,\"./vue-components/Contabilidad/tipo_cuenta_contable/tipo-cuenta-contable-update\":24,\"./vue-components/Control_Costos/solicitar_reclasificacion/index\":25,\"./vue-components/Control_Costos/solicitar_reclasificacion/items\":26,\"./vue-components/Control_Presupuesto/presupuesto/index\":27,\"./vue-components/Finanzas/comprobante_fondo_fijo/create\":28,\"./vue-components/Finanzas/comprobante_fondo_fijo/edit\":29,\"./vue-components/Reportes/subcontratos-estimacion\":30,\"./vue-components/Tesoreria/movimientos_bancarios/index\":31,\"./vue-components/Tesoreria/traspaso_cuentas/index\":32,\"./vue-components/errors\":33,\"./vue-components/global-errors\":34,\"./vue-components/kardex_material/kardex-material-index\":35,\"./vue-components/select2\":36}],6:[function(require,module,exports){\n'use strict';\n\nVue.component('material-index', {\n    props: ['material_url'],\n    data: function data() {\n        return {\n            'data': {\n                'materiales': [],\n                'items': [],\n                'cuenta_material_edit': {}\n            },\n            'form': {\n                'cuenta_material': {\n                    'id': '',\n                    'cuenta': '',\n                    'id_tipo_cuenta_material': 0,\n                    'id_material': ''\n                }\n            },\n            valor: '0',\n            guardando: false\n\n        };\n    },\n    methods: {\n        cambio: function cambio() {\n            var self = this;\n            var id = self.valor;\n            if (id != 0) {\n                self.guardando = true;\n                var urla = App.host + '/compras/material/';\n                $.ajax({\n                    type: 'GET',\n                    url: urla + id + \"/tipo\",\n\n                    success: function success(response) {\n                        self.data.items = response;\n                    },\n                    complete: function complete() {\n                        self.guardando = false;\n                    },\n                    error: function error(_error) {\n                        alert(_error.responseText);\n                        self.guardando = false;\n                    }\n                });\n            }\n        },\n        get_materiales: function get_materiales(concepto) {\n            var self = this;\n\n            $.ajax({\n                type: 'GET',\n                url: self.material_url,\n                data: {\n                    attribute: 'nivel',\n                    operator: 'like',\n                    value: concepto.nivel_hijos,\n                    with: 'cuentaConcepto'\n                },\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    self.data.materiales = data;\n                }\n            });\n        }\n    }\n});\n\n},{}],7:[function(require,module,exports){\n'use strict';\n\nVue.component('requisicion-create', {\n\n    props: ['departamentos_responsables', 'tipos_requisiciones', 'url_requisicion'],\n\n    data: function data() {\n        return {\n            form: {\n                id_departamento: '',\n                id_tipo_requisicion: '',\n                observaciones: ''\n            },\n            guardando: false\n        };\n    },\n    methods: {\n\n        confirm_save: function confirm_save() {\n            var self = this;\n            swal({\n                title: \"Guardar Requisición\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.save();\n            }).catch(swal.noop);\n        },\n\n        save: function save() {\n            var self = this;\n            var url = this.url_requisicion;\n            var data = this.form;\n\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: data,\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    swal({\n                        title: '¡Correcto!',\n                        html: \"Se ha creado la Requisición <br>\" + \"<b>\" + data.data.requisicion.transaccion_ext.folio_adicional + \"</b>\",\n                        type: \"success\",\n                        confirmButtonText: \"Ok\",\n                        closeOnConfirm: false\n                    }).then(function () {\n                        window.location = self.url_requisicion + '/' + data.data.requisicion.id_transaccion + '/edit';\n                    }).catch(swal.noop);\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n\n        validateForm: function validateForm(scope, funcion) {\n            var _this = this;\n\n            this.$validator.validateAll(scope).then(function (result) {\n                if (result) {\n                    if (funcion == 'save') {\n                        _this.confirm_save();\n                    }\n                } else {\n                    swal({\n                        type: 'warning',\n                        title: 'Advertencia',\n                        text: 'Por favor corrija los errores del formulario'\n                    });\n                }\n            });\n        }\n    }\n});\n\n},{}],8:[function(require,module,exports){\n'use strict';\n\nVue.component('requisicion-edit', {\n\n    props: ['url_requisicion', 'requisicion', 'materiales', 'departamentos_responsables', 'tipos_requisiciones'],\n\n    data: function data() {\n        return {\n            form: {\n                requisicion: {\n                    id_departamento: this.requisicion.transaccion_ext.id_departamento,\n                    id_tipo_requisicion: this.requisicion.transaccion_ext.id_tipo_requisicion,\n                    observaciones: this.requisicion.observaciones\n                },\n                item: {\n                    'id_transaccion': this.requisicion.id_transaccion,\n                    'id_material': '',\n                    'observaciones': '',\n                    'cantidad': '',\n                    'unidad': this.unidad,\n                    'id_item': ''\n                }\n            },\n            data: {\n                items: this.requisicion.items,\n                guardando: false\n            }\n        };\n    },\n    computed: {\n        materiales_list: function materiales_list() {\n            var result = {};\n            this.materiales.forEach(function (material) {\n                result[material.id_material] = material.descripcion;\n            });\n\n            return result;\n        },\n        materiales_unidad_list: function materiales_unidad_list() {\n            var result = {};\n            this.materiales.forEach(function (material) {\n                result[material.id_material] = material.unidad;\n            });\n\n            return result;\n        },\n        unidad: function unidad() {\n            this.form.item.unidad = this.materiales_unidad_list[this.form.item.id_material];\n            return this.materiales_unidad_list[this.form.item.id_material];\n        }\n    },\n\n    methods: {\n        show_add_item: function show_add_item() {\n\n            $('#add_item_modal').removeAttr('tabindex');\n            this.validation_errors.clear('form_add_item');\n            $('#add_item_modal').modal('show');\n            this.validation_errors.clear('form_add_item');\n        },\n\n        confirm_remove_item: function confirm_remove_item(item) {\n            var self = this;\n            swal({\n                title: \"Eliminar Partida\",\n                text: \"¿Estás seguro de que deseas eliminar la partida?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.remove_item(item);\n            }).catch(swal.noop);\n        },\n\n        remove_item: function remove_item(item) {\n            var self = this;\n            var url = App.host + '/item/' + item.id_item;\n            var index = this.data.items.indexOf(item);\n\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: {\n                    _method: 'DELETE'\n                },\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    swal({\n                        title: '¡Correcto!',\n                        text: \"Partida eliminada correctamente.\",\n                        type: \"success\",\n                        confirmButtonText: \"Ok\"\n                    });\n                    Vue.delete(self.data.items, index);\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n\n        show_edit_item: function show_edit_item(item) {\n            this.form.item['index'] = this.data.items.indexOf(item);\n            this.form.item.id_material = item.id_material;\n            this.form.item.observaciones = item.item_ext.observaciones;\n            this.form.item.unidad = item.unidad;\n            this.form.item.cantidad = item.cantidad;\n            this.form.item.id_item = item.id_item;\n            $('#edit_item_modal').removeAttr('tabindex');\n            this.validation_errors.clear('form_edit_item');\n            $('#edit_item_modal').modal('show');\n            this.validation_errors.clear('form_edit_item');\n        },\n\n        close_add_item: function close_add_item() {\n            $('#add_item_modal').modal('hide');\n            $('#edit_item_modal').modal('hide');\n            this.form.item = {\n                'id_transaccion': this.requisicion.id_transaccion,\n                'id_material': '',\n                'observaciones': '',\n                'cantidad': '',\n                'unidad': ''\n            };\n        },\n\n        confirm_save: function confirm_save() {\n            var self = this;\n            swal({\n                title: \"Actualizar Requisición\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.save();\n            }).catch(swal.noop);\n        },\n\n        save: function save() {\n            var self = this;\n            var url = this.url_requisicion;\n            var data = this.form;\n\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: data,\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    swal({\n                        title: '¡Correcto!',\n                        text: \"Requisición actualizada correctamente.\",\n                        type: \"success\",\n                        confirmButtonText: \"Ok\"\n                    });\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n        confirm_update_item: function confirm_update_item() {\n            var self = this;\n            swal({\n                title: \"Actualizar Partida\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.update_item();\n            }).catch(swal.noop);\n        },\n        confirm_save_item: function confirm_save_item() {\n            var self = this;\n            swal({\n                title: \"Guardar Partida\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.save_item();\n            }).catch(swal.noop);\n        },\n        confirm_update_requisicion: function confirm_update_requisicion() {\n            var self = this;\n            swal({\n                title: \"Actualizar Requisicion\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.update_requisicion();\n            }).catch(swal.noop);\n        },\n\n        save_item: function save_item() {\n            var self = this;\n            var url = App.host + '/item';\n            var data = this.form.item;\n\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: data,\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    self.data.items.push(data.data.item);\n                    $('#add_item_modal').modal('hide');\n                    swal({\n                        title: '¡Correcto!',\n                        text: \"Partida guardada correctamente.\",\n                        type: \"success\",\n                        confirmButtonText: \"Ok\"\n                    });\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n\n        update_item: function update_item() {\n\n            var self = this;\n            var url = App.host + '/item/' + self.form.item.id_item;\n            var data = this.form.item;\n            data['_method'] = 'PATCH';\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: data,\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    self.data.items[self.form.item.index] = data.data.item;\n                    $('#edit_item_modal').modal('hide');\n                    self.form.item = {\n                        'id_transaccion': self.requisicion.id_transaccion,\n                        'id_material': '',\n                        'observaciones': '',\n                        'cantidad': '',\n                        'unidad': ''\n                    };\n                    swal({\n                        title: '¡Correcto!',\n                        text: \"Partida actualizada correctamente.\",\n                        type: \"success\",\n                        confirmButtonText: \"Ok\"\n                    });\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n        update_requisicion: function update_requisicion() {\n\n            var self = this;\n            var url = App.host + '/compras/requisicion/' + self.form.item.id_transaccion;\n            var data = this.form.requisicion;\n            data['_method'] = 'patch';\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: data,\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    swal({\n                        title: '¡Correcto!',\n                        text: \"Requisición actualizada correctamente.\",\n                        type: \"success\",\n                        confirmButtonText: \"Ok\"\n                    }).then(function () {\n                        window.location = App.host + '/compras/requisicion/' + self.form.item.id_transaccion + '/edit';\n                    }).catch(swal.noop);\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n\n        validateForm: function validateForm(scope, funcion) {\n            var _this = this;\n\n            this.$validator.validateAll(scope).then(function () {\n                if (funcion == 'save') {\n                    _this.confirm_save();\n                } else if (funcion == 'save_item') {\n                    _this.confirm_save_item();\n                } else if (funcion == 'edit_item') {\n                    _this.confirm_update_item();\n                } else if (funcion == 'update_requisicion') {\n                    _this.confirm_update_requisicion();\n                }\n            }).catch(function () {\n                swal({\n                    type: 'warning',\n                    title: 'Advertencia',\n                    text: 'Por favor corrija los errores del formulario'\n                });\n            });\n        }\n    }\n});\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\nVue.component('cierre-index', {\n    data: function data() {\n        return {\n            cierre: {\n                anio: '',\n                mes: '',\n                transacciones: []\n            },\n            cargando: false\n        };\n    },\n\n    mounted: function mounted() {\n\n        var self = this;\n\n        $('#cierres_table').DataTable({\n            \"processing\": true,\n            \"serverSide\": true,\n            \"ordering\": false,\n            \"searching\": false,\n            \"ajax\": {\n                \"url\": App.host + '/configuracion/cierre/paginate',\n                \"type\": \"POST\",\n                \"beforeSend\": function beforeSend() {\n                    self.cargando = true;\n                },\n                \"complete\": function complete() {\n                    self.cargando = false;\n                },\n                \"dataSrc\": function dataSrc(json) {\n                    for (var i = 0; i < json.data.length; i++) {\n                        json.data[i].anio = json.data[i].fecha.split('-')[0];\n                        json.data[i].mes = parseInt(json.data[i].fecha.split('-')[1]).getMes();\n                        json.data[i].created_at = new Date(json.data[i].created_at).dateFormat();\n                        json.data[i].registro = json.data[i].user_registro.nombre + ' ' + json.data[i].user_registro.apaterno + ' ' + json.data[i].user_registro.amaterno;\n                    }\n                    return json.data;\n                }\n            },\n            \"columns\": [{ data: 'anio' }, { data: 'mes' }, { data: 'registro' }, { data: 'created_at' }, {\n                data: 'id',\n                render: function render(data) {\n                    return '<a href=\"' + data + '\">Abrir</a>';\n                }\n            }],\n            language: {\n                \"sProcessing\": \"Procesando...\",\n                \"sLengthMenu\": \"Mostrar _MENU_ registros\",\n                \"sZeroRecords\": \"No se encontraron resultados\",\n                \"sEmptyTable\": \"Ningún dato disponible en esta tabla\",\n                \"sInfo\": \"Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros\",\n                \"sInfoEmpty\": \"Mostrando registros del 0 al 0 de un total de 0 registros\",\n                \"sInfoFiltered\": \"(filtrado de un total de _MAX_ registros)\",\n                \"sInfoPostFix\": \"\",\n                \"sSearch\": \"Buscar:\",\n                \"sUrl\": \"\",\n                \"sInfoThousands\": \",\",\n                \"sLoadingRecords\": \"Cargando...\",\n                \"oPaginate\": {\n                    \"sFirst\": \"Primero\",\n                    \"sLast\": \"Último\",\n                    \"sNext\": \"Siguiente\",\n                    \"sPrevious\": \"Anterior\"\n                },\n                \"oAria\": {\n                    \"sSortAscending\": \": Activar para ordenar la columna de manera ascendente\",\n                    \"sSortDescending\": \": Activar para ordenar la columna de manera descendente\"\n                }\n            }\n        });\n    },\n\n    methods: {\n        generar_cierre: function generar_cierre() {\n            $('#create_cierre_modal').modal('show');\n        }\n    }\n});\n\n},{}],10:[function(require,module,exports){\n'use strict';\n\nVue.component('cuenta-almacen-index', {\n    props: ['datos_contables', 'url_cuenta_almacen_store', 'almacenes'],\n    data: function data() {\n        return {\n            'data': {\n                'almacenes': this.almacenes,\n                'almacen_edit': {}\n            },\n            'form': {\n                'cuenta_almacen': {\n                    'id': '',\n                    'id_almacen': '',\n                    'cuenta': ''\n                }\n            },\n            'guardando': false\n        };\n    },\n    methods: {\n        editar: function editar(almacen) {\n            this.data.almacen_edit = almacen;\n            Vue.set(this.form.cuenta_almacen, 'id_almacen', almacen.id_almacen);\n            if (almacen.cuenta_almacen != null) {\n                Vue.set(this.form.cuenta_almacen, 'cuenta', almacen.cuenta_almacen.cuenta);\n                Vue.set(this.form.cuenta_almacen, 'id', almacen.cuenta_almacen.id);\n            } else {\n                Vue.set(this.form.cuenta_almacen, 'cuenta', '');\n                Vue.set(this.form.cuenta_almacen, 'id', '');\n            }\n            this.validation_errors.clear('form_edit_cuenta');\n            $('#edit_cuenta_modal').modal('show');\n            $('#cuenta_contable').focus();\n            this.validation_errors.clear('form_edit_cuenta');\n        },\n        validateForm: function validateForm(scope, funcion) {\n            var _this = this;\n\n            this.$validator.validateAll(scope).then(function () {\n                if (funcion == 'confirm_save_cuenta') {\n                    _this.confirm_save_cuenta();\n                } else if (funcion == 'confirm_update_cuenta') {\n                    _this.confirm_update_cuenta();\n                }\n            }).catch(function () {\n                swal({\n                    type: 'warning',\n                    title: 'Advertencia',\n                    text: 'Por favor corrija los errores del formulario'\n                });\n            });\n        },\n        confirm_update_cuenta: function confirm_update_cuenta() {\n            var self = this;\n            swal({\n                title: \"Actualizar Cuenta Contable\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.update_cuenta();\n            }).catch(swal.noop);\n        },\n\n        update_cuenta: function update_cuenta() {\n            var self = this;\n            var url = this.url_cuenta_almacen_store + '/' + this.form.cuenta_almacen.id;\n\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: {\n                    _method: 'PATCH',\n                    cuenta: self.form.cuenta_almacen.cuenta\n                },\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    self.data.almacen_edit.cuenta_almacen = data.data.cuenta_almacen;\n                    self.close_edit_cuenta();\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        html: 'Cuenta Contable actualizada correctamente'\n                    });\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n\n        confirm_save_cuenta: function confirm_save_cuenta() {\n            var self = this;\n            swal({\n                title: \"Registrar Cuenta Contable\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.save_cuenta();\n            }).catch(swal.noop);\n        },\n\n        save_cuenta: function save_cuenta() {\n            var self = this;\n            var url = this.url_cuenta_almacen_store;\n\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: {\n                    cuenta: self.form.cuenta_almacen.cuenta,\n                    id_almacen: self.form.cuenta_almacen.id_almacen\n                },\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    self.data.almacen_edit.cuenta_almacen = data.data.cuenta_almacen;\n                    self.close_edit_cuenta();\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        html: 'Cuenta Contable registrada correctamente'\n                    });\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n        close_edit_cuenta: function close_edit_cuenta() {\n            $('#edit_cuenta_modal').modal('hide');\n            Vue.set(this.form.cuenta_almacen, 'cuenta', '');\n            Vue.set(this.form.cuenta_almacen, 'id', '');\n            Vue.set(this.form.cuenta_almacen, 'id_almacen', '');\n        }\n\n    }\n});\n\n},{}],11:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nVue.component('cuenta-bancaria-edit', {\n    props: ['cuenta', 'tipos', 'cuenta_store_url', 'cuentas_asociadas', 'datos_contables'],\n\n    data: function data() {\n        return {\n            'asociadas': this.cuentas_asociadas,\n            'form': {\n                'id_tipo_cuenta_contable': '',\n                'cuenta': ''\n            },\n            'cuenta_descripcion': '',\n            'cuenta_edit_id': 0,\n            'guardando': false,\n            'nuevo_registro': false\n        };\n    },\n    methods: {\n        close_modal: function close_modal(modal) {\n            $('#' + modal).modal('hide');\n            this.form.id_tipo_cuenta_contable = '';\n            this.form.cuenta = '';\n        },\n        confirm_elimina_cuenta: function confirm_elimina_cuenta(cuenta) {\n            var self = this;\n            this.cuenta_edit_id = cuenta.id_cuenta_contable_bancaria;\n            this.form.id_tipo_cuenta_contable = cuenta.id_tipo_cuenta_contable;\n            this.form.cuenta = cuenta.cuenta;\n\n            swal({\n                title: \"Eliminar Cuenta Contable\",\n                html: \"¿Estás seguro que desea eliminar la cuenta \" + cuenta.cuenta + \"?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n\n                self.elimina_cuenta();\n            }).catch(swal.noop);\n        },\n        confirm_cuenta_update: function confirm_cuenta_update() {\n            var self = this;\n            swal({\n                title: \"Actualizar Cuenta Contable\",\n                text: \"¿Estás seguro que desea actualizar la Cuenta Contable?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n\n                self.update_cuenta_bancaria();\n            }).catch(swal.noop);\n        },\n        confirm_cuenta_create: function confirm_cuenta_create() {\n            var self = this;\n            swal({\n                title: \"Registrar Cuenta Contable\",\n                text: \"¿Estás seguro que desea registrar la Cuenta Contable?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.save_cuenta_bancaria();\n            }).catch(swal.noop);\n        },\n        elimina_cuenta: function elimina_cuenta() {\n            var self = this;\n            var data = self.form;\n            var url = App.host + '/sistema_contable/cuentas_contables_bancarias/' + this.cuenta_edit_id;\n            var toRemove = this.cuenta_edit_id;\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: {\n                    data: data,\n                    _method: 'DELETE'\n                },\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    $.each(self.asociadas, function (index, tipo_cuenta) {\n                        if (toRemove == tipo_cuenta.id_cuenta_contable_bancaria) {\n                            self.asociadas.splice(index, 1);\n                        }\n                    });\n\n                    $('#add_movimiento_modal').modal('hide');\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        html: 'La cuenta: fué eliminada correctamente'\n                    });\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                    this.cuenta_descripcion = '';\n                    this.cuenta_edit_id = 0;\n                    this.form.id_tipo_cuenta_contable = '';\n                    this.form.cuenta = '';\n                }\n            });\n        },\n        create_cuenta_bancaria: function create_cuenta_bancaria() {\n            this.form.id_tipo_cuenta_contable = '';\n            this.form.cuenta = '';\n            this.nuevo_registro = true;\n            this.obtener_tipos_disponibles();\n\n            this.validation_errors.clear('form_create_cuenta');\n            $('#add_movimiento_modal').modal('show');\n            this.validation_errors.clear('form_create_cuenta');\n        },\n        edit_cuenta_bancaria: function edit_cuenta_bancaria(cuenta) {\n            this.nuevo_registro = false;\n            this.form.id_tipo_cuenta_contable = cuenta.id_tipo_cuenta_contable;\n            this.form.cuenta = cuenta.cuenta;\n            this.cuenta_descripcion = cuenta.tipo_cuenta_contable.descripcion;\n            this.cuenta_edit_id = cuenta.id_cuenta_contable_bancaria;\n\n            this.validation_errors.clear('form_update_cuenta');\n            $('#edit_movimiento_modal').modal('show');\n            this.validation_errors.clear('form_update_cuenta');\n        },\n        update_cuenta_bancaria: function update_cuenta_bancaria() {\n            var self = this;\n            var data = self.form;\n            var url = App.host + '/sistema_contable/cuentas_contables_bancarias/' + this.cuenta_edit_id;\n            var toRemove = this.cuenta_edit_id;\n\n            data.id_cuenta = self.cuenta.id_cuenta;\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: {\n                    data: data,\n                    _method: 'PATCH'\n                },\n                beforeSend: function beforeSend() {\n                    self.validation_errors.clear('form_update_cuenta');\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    $.each(self.asociadas, function (index, tipo_cuenta) {\n                        if (toRemove == tipo_cuenta.id_cuenta_contable_bancaria) {\n                            self.asociadas.splice(index, 1, data.data);\n                        }\n                    });\n\n                    $('#edit_movimiento_modal').modal('hide');\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        html: 'La cuenta:' + data.data.cuenta + '</b> fué actualizada correctamente'\n                    });\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                    this.cuenta_descripcion = '';\n                    this.cuenta_edit_id = 0;\n                    this.form.id_tipo_cuenta_contable = '';\n                    this.form.cuenta = '';\n                }\n            });\n        },\n        save_cuenta_bancaria: function save_cuenta_bancaria() {\n            var self = this;\n            var url = self.cuenta_store_url;\n            var data = self.form;\n\n            data.id_cuenta = self.cuenta.id_cuenta;\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: data,\n                beforeSend: function beforeSend() {\n                    self.validation_errors.clear('form_create_cuenta');\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    self.asociadas.push(data.data);\n                    self.close_modal('add_movimiento_modal');\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        html: 'La cuenta: <b>' + data.data.cuenta + '</b> fue registrada correctamente'\n                    });\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                    this.form.id_tipo_cuenta_contable = '';\n                    this.form.cuenta = '';\n                }\n            });\n        },\n\n        validateForm: function validateForm(scope, funcion) {\n            var _this = this;\n\n            this.$validator.validateAll(scope).then(function () {\n                if (funcion == 'confirm_edit_cuenta') {\n                    _this.confirm_cuenta_update();\n                } else if (funcion == 'confirm_create_cuenta') {\n                    _this.confirm_cuenta_create();\n                }\n            }).catch(function () {\n                swal({\n                    type: 'warning',\n                    title: 'Advertencia',\n                    text: 'Por favor corrija los errores del formulario'\n                });\n            });\n        },\n        tipo_info: function tipo_info(id) {\n            var self = this,\n                info = {};\n\n            $.each(self.tipos, function (index, tipo_cuenta) {\n                if (id == tipo_cuenta.id_tipo_cuenta_contable) info = tipo_cuenta;\n            });\n\n            return info;\n        },\n        uniq: function uniq(a) {\n            var prims = { \"boolean\": {}, \"number\": {}, \"string\": {} },\n                objs = [];\n\n            return a.filter(function (item) {\n                var type = typeof item === 'undefined' ? 'undefined' : _typeof(item);\n                if (type in prims) return prims[type].hasOwnProperty(item) ? false : prims[type][item] = true;else return objs.indexOf(item) >= 0 ? false : objs.push(item);\n            });\n        },\n        obtener_tipos_disponibles: function obtener_tipos_disponibles() {\n            var self = this,\n                tipos = [],\n                tipos_temp = [],\n                asociadas_tipos = [],\n                tipos_disponibles = [];\n\n            // No existen cuentas asociadas\n            if (self.asociadas.length == 0) {\n                return self.tipos;\n            }\n\n            $.each(self.asociadas, function (index, aso) {\n                asociadas_tipos.push(parseInt(aso.id_tipo_cuenta_contable));\n            });\n\n            $.each(self.tipos, function (indexTipo, tipo) {\n                tipos.push(tipo.id_tipo_cuenta_contable);\n            });\n\n            tipos_temp = tipos.filter(function (v) {\n                return !asociadas_tipos.includes(v);\n            });\n\n            tipos_temp = self.uniq(tipos_temp);\n\n            $.each(tipos_temp, function (index, tipo) {\n                tipos_disponibles.push(self.tipo_info(tipo));\n            });\n\n            return tipos_disponibles;\n        }\n    }\n});\n\n},{}],12:[function(require,module,exports){\n'use strict';\n\nVue.component('cuenta-concepto-index', {\n    props: ['conceptos', 'url_concepto_get_by', 'datos_contables', 'url_store_cuenta'],\n    data: function data() {\n        return {\n            'data': {\n                'conceptos': this.conceptos\n\n            },\n            'form': {\n                'concepto_edit': {},\n                'cuenta': '',\n                'concepto': '',\n                'id': '',\n                'id_concepto': ''\n            },\n            'cargando': false\n        };\n    },\n\n    directives: {\n        treegrid: {\n            inserted: function inserted(el) {\n                $(el).treegrid({\n                    saveState: true,\n                    initialState: 'collapsed'\n                });\n            },\n            componentUpdated: function componentUpdated(el) {\n                $(el).treegrid({\n                    saveState: true\n                });\n            }\n        },\n        select2: {\n            inserted: function inserted(el) {\n                $(el).select2({\n                    width: '100%',\n                    ajax: {\n                        url: App.host + '/sistema_contable/concepto/getBy',\n                        dataType: 'json',\n                        delay: 500,\n                        data: function data(params) {\n                            return {\n                                attribute: 'descripcion',\n                                operator: 'like',\n                                value: '%' + params.term + '%'\n                            };\n                        },\n                        processResults: function processResults(data) {\n                            return {\n                                results: $.map(data.data.conceptos, function (item) {\n                                    return {\n                                        text: item.descripcion,\n                                        id: item.id_concepto\n                                    };\n                                })\n                            };\n                        },\n                        error: function error(_error) {},\n                        cache: true\n                    },\n                    escapeMarkup: function escapeMarkup(markup) {\n                        return markup;\n                    }, // let our custom formatter work\n                    minimumInputLength: 1\n                }).on('select2:select', function () {\n                    $('#id_concepto').val($('#concepto_select option:selected').data().data.id);\n                });\n            }\n        }\n    },\n\n    computed: {\n        conceptos_ordenados: function conceptos_ordenados() {\n            return this.data.conceptos.sort(function (a, b) {\n                return a.nivel > b.nivel ? 1 : b.nivel > a.nivel ? -1 : 0;\n            });\n        }\n    },\n\n    methods: {\n        tr_class: function tr_class(concepto) {\n            var treegrid = \"treegrid-\" + concepto.id_concepto;\n            var treegrid_parent = concepto.id_padre != null && concepto.id_concepto != parseInt($('#id_concepto').val()) ? \" treegrid-parent-\" + concepto.id_padre : \"\";\n            return treegrid + treegrid_parent;\n        },\n\n        tr_id: function tr_id(concepto) {\n            return concepto.id_padre == null || concepto.tiene_hijos > 0 ? \"tnode-\" + concepto.id_concepto : \"\";\n        },\n\n        get_hijos: function get_hijos(concepto) {\n            var self = this;\n\n            $.ajax({\n                type: 'GET',\n                url: self.url_concepto_get_by,\n                data: {\n                    attribute: 'nivel',\n                    operator: 'like',\n                    value: concepto.nivel_hijos,\n                    with: 'cuentaConcepto'\n                },\n                beforeSend: function beforeSend() {\n                    self.cargando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    data.data.conceptos.forEach(function (concepto) {\n                        self.data.conceptos.push(concepto);\n                    });\n                    concepto.cargado = true;\n                },\n                complete: function complete() {\n                    self.cargando = false;\n                    setTimeout(function () {\n                        $('#tnode-' + concepto.id_concepto).treegrid('expand');\n                    }, 500);\n                }\n            });\n        },\n\n        edit_cuenta: function edit_cuenta(concepto) {\n            this.form.concepto_edit = concepto;\n            Vue.set(this.form, 'concepto', concepto.descripcion);\n            Vue.set(this.form, 'id_concepto', concepto.id_concepto);\n            if (concepto.cuenta_concepto != null) {\n                Vue.set(this.form, 'cuenta', concepto.cuenta_concepto.cuenta);\n                Vue.set(this.form, 'id', concepto.cuenta_concepto.id);\n            } else {\n                Vue.set(this.form, 'cuenta', '');\n                Vue.set(this.form, 'id', '');\n            }\n            this.validation_errors.clear('form_edit_cuenta');\n            $('#edit_cuenta_modal').modal('show');\n            $('#cuenta_contable').focus();\n            this.validation_errors.clear('form_edit_cuenta');\n        },\n\n        validateForm: function validateForm(scope, funcion) {\n            var _this = this;\n\n            this.$validator.validateAll(scope).then(function () {\n                if (funcion == 'confirm_save_cuenta') {\n                    _this.confirm_save_cuenta();\n                } else if (funcion == 'confirm_update_cuenta') {\n                    _this.confirm_update_cuenta();\n                }\n            }).catch(function () {\n                swal({\n                    type: 'warning',\n                    title: 'Advertencia',\n                    text: 'Por favor corrija los errores del formulario'\n                });\n            });\n        },\n\n        confirm_update_cuenta: function confirm_update_cuenta() {\n            var self = this;\n            swal({\n                title: \"Actualizar Cuenta Contable\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.update_cuenta();\n            }).catch(swal.noop);\n        },\n\n        update_cuenta: function update_cuenta() {\n            var self = this;\n            var url = this.url_store_cuenta + '/' + this.form.id;\n\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: {\n                    _method: 'PATCH',\n                    cuenta: self.form.cuenta\n                },\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    self.form.concepto_edit.cuenta_concepto = data.data.cuenta_concepto;\n                    self.close_edit_cuenta();\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        html: 'Cuenta Contable actualizada correctamente'\n                    });\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n\n        confirm_save_cuenta: function confirm_save_cuenta() {\n            var self = this;\n            swal({\n                title: \"Registrar Cuenta Contable\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.save_cuenta();\n            }).catch(swal.noop);\n        },\n\n        save_cuenta: function save_cuenta() {\n            var self = this;\n            var url = this.url_store_cuenta;\n\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: {\n                    cuenta: self.form.cuenta,\n                    id_concepto: self.form.id_concepto\n                },\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    self.form.concepto_edit.cuenta_concepto = data.data.cuenta_concepto;\n                    self.close_edit_cuenta();\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        html: 'Cuenta Contable registrada correctamente'\n                    });\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n\n        close_edit_cuenta: function close_edit_cuenta() {\n            $('#edit_cuenta_modal').modal('hide');\n            Vue.set(this.form, 'cuenta', '');\n            Vue.set(this.form, 'concepto', '');\n            Vue.set(this.form, 'id', '');\n            Vue.set(this.form, 'id_concepto', '');\n        },\n\n        buscar_nodos: function buscar_nodos() {\n            var id_concepto = $('#id_concepto').val();\n\n            var self = this;\n            var url = App.host + '/sistema_contable/concepto/findBy';\n            $.ajax({\n                type: 'GET',\n                url: url,\n                data: {\n                    attribute: 'id_concepto',\n                    operator: '=',\n                    value: id_concepto,\n                    with: 'cuentaConcepto'\n                },\n                beforeSend: function beforeSend() {\n                    self.cargando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    self.data.conceptos = [];\n                    if (data.data.concepto != null) {\n                        self.data.conceptos.push(data.data.concepto);\n                    }\n                },\n                complete: function complete() {\n                    self.cargando = false;\n                }\n            });\n        }\n    }\n});\n\n},{}],13:[function(require,module,exports){\n'use strict';\n\nVue.component('cuenta-contable-index', {\n    props: ['datos_contables', 'cuenta_contable_url', 'tipos_cuentas_contables'],\n    data: function data() {\n        return {\n            'data': {\n                'tipos_cuentas_contables': this.tipos_cuentas_contables\n            },\n            'form': {\n                'tipo_cuenta_contable_edit': {\n                    'cuenta_contable': {\n                        'con_prefijo': false\n                    }\n                }\n            },\n            'guardando': false\n        };\n    },\n\n    methods: {\n        confirm_cuenta_contable: function confirm_cuenta_contable() {\n            var self = this;\n            swal({\n                title: \"Configurar Cuenta Contable\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.save_cuenta_contable();\n            }).catch(swal.noop);\n        },\n\n        confirm_cuenta_contable_update: function confirm_cuenta_contable_update() {\n            var self = this;\n            swal({\n                title: \"Actualizar Cuenta Contable\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.update_cuenta_contable();\n            }).catch(swal.noop);\n        },\n\n        save_cuenta_contable: function save_cuenta_contable() {\n            var self = this;\n            var url = self.cuenta_contable_url;\n            var data = {\n                id_int_tipo_cuenta_contable: self.form.tipo_cuenta_contable_edit.id_int_tipo_cuenta_contable,\n                prefijo: self.form.tipo_cuenta_contable_edit.cuenta_contable.prefijo,\n                cuenta_contable: self.form.tipo_cuenta_contable_edit.cuenta_contable.cuenta_contable,\n                con_prefijo: self.form.tipo_cuenta_contable_edit.cuenta_contable.con_prefijo\n            };\n\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: data,\n                beforeSend: function beforeSend() {\n                    self.validation_errors.clear('form_save_cuenta');\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    Vue.set(self.data, 'tipos_cuentas_contables', data.data.tipos_cuentas_contables);\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        html: 'Cuenta Contable <b>' + data.data.cuenta_contable.tipo_cuenta_contable.descripcion + '</b> configurada correctamente'\n                    });\n                },\n                complete: function complete() {\n                    self.reset_form();\n                    $('#modal-configurar-cuenta').modal('hide');\n                    self.guardando = false;\n                }\n            });\n        },\n        update_cuenta_contable: function update_cuenta_contable() {\n            var self = this;\n            var data = {\n                con_prefijo: this.form.tipo_cuenta_contable_edit.cuenta_contable.con_prefijo,\n                prefijo: this.form.tipo_cuenta_contable_edit.cuenta_contable.prefijo,\n                cuenta_contable: this.form.tipo_cuenta_contable_edit.cuenta_contable.cuenta_contable\n            };\n            var url = self.cuenta_contable_url + '/' + this.form.tipo_cuenta_contable_edit.cuenta_contable.id_int_cuenta_contable;\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: {\n                    data: data,\n                    _method: 'PATCH'\n                },\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    Vue.set(self.data, 'tipos_cuentas_contables', data.data.tipos_cuentas_contables);\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        html: 'Cuenta Contable <b>' + data.data.cuenta_contable.tipo_cuenta_contable.descripcion + '</b> actualizada correctamente'\n                    });\n                },\n                complete: function complete() {\n                    self.reset_form();\n                    $('#modal-editar-cuenta').modal('hide');\n                    self.guardando = false;\n                }\n            });\n        },\n\n        validateForm: function validateForm(scope, funcion) {\n            var _this = this;\n\n            this.$validator.validateAll(scope).then(function () {\n                if (funcion == 'save_cuenta') {\n                    _this.confirm_cuenta_contable();\n                } else if (funcion == 'update_cuenta') {\n                    _this.confirm_cuenta_contable_update();\n                }\n            }).catch(function () {\n                swal({\n                    type: 'warning',\n                    title: 'Advertencia',\n                    text: 'Por favor corrija los errores del formulario'\n                });\n            });\n        },\n\n        editar: function editar(item) {\n            Vue.set(this.form.tipo_cuenta_contable_edit, 'id_int_tipo_cuenta_contable', item.id_int_tipo_cuenta_contable);\n            Vue.set(this.form.tipo_cuenta_contable_edit, 'descripcion', item.descripcion);\n\n            Vue.set(this.form.tipo_cuenta_contable_edit.cuenta_contable, 'id_int_cuenta_contable', item.cuenta_contable.id_int_cuenta_contable);\n            Vue.set(this.form.tipo_cuenta_contable_edit.cuenta_contable, 'cuenta_contable', item.cuenta_contable.cuenta_contable);\n            Vue.set(this.form.tipo_cuenta_contable_edit.cuenta_contable, 'prefijo', item.cuenta_contable.prefijo);\n            Vue.set(this.form.tipo_cuenta_contable_edit.cuenta_contable, 'con_prefijo', item.cuenta_contable.prefijo ? true : false);\n        },\n\n        configurar: function configurar(item) {\n            Vue.set(this.form.tipo_cuenta_contable_edit, 'id_int_tipo_cuenta_contable', item.id_tipo_cuenta_contable);\n            Vue.set(this.form.tipo_cuenta_contable_edit, 'descripcion', item.descripcion);\n\n            Vue.set(this.form.tipo_cuenta_contable_edit.cuenta_contable, 'id_int_cuenta_contable', '');\n            Vue.set(this.form.tipo_cuenta_contable_edit.cuenta_contable, 'cuenta_contable', '');\n            Vue.set(this.form.tipo_cuenta_contable_edit.cuenta_contable, 'prefijo', '');\n            Vue.set(this.form.tipo_cuenta_contable_edit.cuenta_contable, 'con_prefijo', false);\n        },\n\n        reset_form: function reset_form() {\n            Vue.set(this.form.tipo_cuenta_contable_edit, 'id_int_tipo_cuenta_contable', '');\n            Vue.set(this.form.tipo_cuenta_contable_edit, 'descripcion', '');\n\n            Vue.set(this.form.tipo_cuenta_contable_edit.cuenta_contable, 'id_int_cuenta_contable', '');\n            Vue.set(this.form.tipo_cuenta_contable_edit.cuenta_contable, 'cuenta_contable', '');\n            Vue.set(this.form.tipo_cuenta_contable_edit.cuenta_contable, 'prefijo', '');\n            Vue.set(this.form.tipo_cuenta_contable_edit.cuenta_contable, 'con_prefijo', false);\n        }\n    }\n});\n\n},{}],14:[function(require,module,exports){\n'use strict';\n\nVue.component('cuenta-costo-index', {\n    props: ['costos', 'url_costo_get_by', 'url_costo_find_by', 'datos_contables', 'url_cuenta_costo_index'],\n    data: function data() {\n        return {\n            'data': {\n                'costos': this.costos\n\n            },\n            'form': {\n                'costo_edit': {},\n                'cuenta': '',\n                'costo': '',\n                'id_cuenta_costo': '',\n                'id_costo': ''\n            },\n            'cargando': false\n        };\n    },\n\n    directives: {\n        treegrid: {\n            inserted: function inserted(el) {\n                $(el).treegrid({\n                    saveState: true,\n                    initialState: 'collapsed'\n                });\n            },\n            componentUpdated: function componentUpdated(el) {\n                $(el).treegrid({\n                    saveState: true\n                });\n            }\n        },\n        select2: {\n            inserted: function inserted(el) {\n\n                $(el).select2({\n                    width: '100%',\n                    ajax: {\n                        url: App.host + '/sistema_contable/costo/getBy',\n                        dataType: 'json',\n                        delay: 500,\n                        data: function data(params) {\n                            return {\n                                attribute: 'descripcion',\n                                operator: 'like',\n                                value: '%' + params.term + '%',\n                                with: 'cuentaCosto'\n                            };\n                        },\n                        processResults: function processResults(data) {\n                            return {\n                                results: $.map(data.data.costos, function (item) {\n                                    return {\n                                        text: item.descripcion,\n                                        id: item.id_costo\n                                    };\n                                })\n                            };\n                        },\n                        error: function error(_error) {},\n                        cache: true\n                    },\n                    escapeMarkup: function escapeMarkup(markup) {\n                        return markup;\n                    }, // let our custom formatter work\n                    minimumInputLength: 1\n                }).on('select2:select', function () {\n                    $('#id_costo').val($('#costo_select option:selected').data().data.id);\n                });\n            }\n        }\n    },\n\n    computed: {\n        costos_ordenados: function costos_ordenados() {\n            return this.data.costos.sort(function (a, b) {\n                return a.nivel > b.nivel ? 1 : b.nivel > a.nivel ? -1 : 0;\n            });\n        }\n    },\n\n    methods: {\n        tr_class: function tr_class(costo) {\n            var treegrid = \"treegrid-\" + costo.id_costo;\n            var treegrid_parent = costo.id_padre != null && costo.id_costo != parseInt($('#id_costo').val()) ? \" treegrid-parent-\" + costo.id_padre : \"\";\n            return treegrid + treegrid_parent;\n        },\n\n        tr_id: function tr_id(costo) {\n            return costo.id_padre == null || costo.tiene_hijos > 0 ? \"tnode-\" + costo.id_costo : \"\";\n        },\n\n        get_hijos: function get_hijos(costo) {\n            var self = this;\n\n            $.ajax({\n                type: 'GET',\n                url: self.url_costo_get_by,\n                data: {\n                    attribute: 'nivel',\n                    operator: 'like',\n                    value: costo.nivel_hijos,\n                    with: 'cuentaCosto'\n                },\n                beforeSend: function beforeSend() {\n                    self.cargando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    data.data.costos.forEach(function (costo) {\n                        self.data.costos.push(costo);\n                    });\n                    costo.cargado = true;\n                },\n                complete: function complete() {\n                    self.cargando = false;\n                    setTimeout(function () {\n                        $('#tnode-' + costo.id_costo).treegrid('expand');\n                    }, 500);\n                }\n            });\n        },\n\n        edit_cuenta: function edit_cuenta(costo) {\n            this.form.costo_edit = costo;\n            Vue.set(this.form, 'costo', costo.descripcion);\n            Vue.set(this.form, 'id_costo', costo.id_costo);\n            if (costo.cuenta_costo != null) {\n                Vue.set(this.form, 'cuenta', costo.cuenta_costo.cuenta);\n                Vue.set(this.form, 'id_cuenta_costo', costo.cuenta_costo.id_cuenta_costo);\n            } else {\n                Vue.set(this.form, 'cuenta', '');\n                Vue.set(this.form, 'id_cuenta_costo', '');\n            }\n            this.validation_errors.clear('form_edit_cuenta');\n            $('#edit_cuenta_modal').modal('show');\n            $('#cuenta_contable').focus();\n            this.validation_errors.clear('form_edit_cuenta');\n        },\n\n        validateForm: function validateForm(scope, funcion) {\n            var _this = this;\n\n            this.$validator.validateAll(scope).then(function () {\n                if (funcion == 'confirm_save_cuenta') {\n                    _this.confirm_save_cuenta();\n                } else if (funcion == 'confirm_update_cuenta') {\n                    _this.confirm_update_cuenta();\n                }\n            }).catch(function () {\n                swal({\n                    type: 'warning',\n                    title: 'Advertencia',\n                    text: 'Por favor corrija los errores del formulario'\n                });\n            });\n        },\n\n        confirm_update_cuenta: function confirm_update_cuenta() {\n            var self = this;\n            swal({\n                title: \"Actualizar Cuenta Contable\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.update_cuenta();\n            }).catch(swal.noop);\n        },\n\n        update_cuenta: function update_cuenta() {\n            var self = this;\n            var url = this.url_cuenta_costo_index + '/' + this.form.id_cuenta_costo;\n\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: {\n                    _method: 'PATCH',\n                    data: self.form\n                },\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    self.form.costo_edit.cuenta_costo = data.data.cuenta_costo;\n                    self.close_edit_cuenta();\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        html: 'Cuenta Contable actualizada correctamente'\n                    });\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n\n        confirm_save_cuenta: function confirm_save_cuenta() {\n            var self = this;\n            swal({\n                title: \"Registrar Cuenta Contable\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.save_cuenta();\n            }).catch(swal.noop);\n        },\n\n        save_cuenta: function save_cuenta() {\n            var self = this;\n            var url = this.url_cuenta_costo_index;\n\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: {\n                    cuenta: self.form.cuenta,\n                    id_costo: self.form.id_costo\n                },\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    self.form.costo_edit.cuenta_costo = data.data.cuenta_costo;\n                    self.close_edit_cuenta();\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        html: 'Cuenta Contable registrada correctamente'\n                    });\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n        confirm_delete_cuenta: function confirm_delete_cuenta(id_cuenta_costo) {\n            var self = this;\n            swal({\n                title: \"Eliminar Cuenta Contable\",\n                text: \"¿Estás seguro que desea eliminar la cuenta contable?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.delete_cuenta(id_cuenta_costo);\n            }).catch(swal.noop);\n        },\n        delete_cuenta: function delete_cuenta(id_cuenta_costo) {\n            var self = this,\n                url = this.url_cuenta_costo_index + '/' + id_cuenta_costo;\n\n            $.ajax({\n                type: 'DELETE',\n                url: url,\n                data: {\n                    _method: 'DELETE'\n                },\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    self.data.costos.forEach(function (costo, i) {\n\n                        if (costo.cuenta_costo == null) {\n                            return;\n                        }\n\n                        if (id_cuenta_costo == costo.cuenta_costo.id_cuenta_costo) {\n                            Vue.set(costo, 'cuenta_costo', null);\n                            Vue.set(self.data.costos, i, costo);\n                            return;\n                        }\n                    });\n\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        text: 'Cuenta Contable eliminada correctamente'\n                    });\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n        close_edit_cuenta: function close_edit_cuenta() {\n            $('#edit_cuenta_modal').modal('hide');\n            Vue.set(this.form, 'cuenta', '');\n            Vue.set(this.form, 'costo', '');\n            Vue.set(this.form, 'id_cuenta_costo', '');\n            Vue.set(this.form, 'id_costo', '');\n        },\n\n        buscar_nodos: function buscar_nodos() {\n            var self = this;\n            var url = self.url_costo_find_by,\n                id_costo = $('#id_costo').val();\n\n            $.ajax({\n                type: 'GET',\n                url: url,\n                data: {\n                    attribute: 'id_costo',\n                    value: id_costo,\n                    with: 'cuentaCosto'\n                },\n                beforeSend: function beforeSend() {\n                    self.cargando = true;\n                },\n                success: function success(result) {\n                    self.data.costos = [];\n                    if (result.data.costo != null) {\n                        self.data.costos.push(result.data.costo);\n                    }\n                },\n                complete: function complete() {\n                    self.cargando = false;\n                }\n            });\n        }\n    }\n});\n\n},{}],15:[function(require,module,exports){\n'use strict';\n\nVue.component('cuenta-empresa-edit', {\n    props: ['empresa', 'tipo_cuenta_empresa', 'cuenta_store_url', 'datos_contables'],\n\n    data: function data() {\n        return {\n            'data': {\n                'empresa': this.empresa\n            },\n            'form': {\n                'cuenta_empresa': '',\n                'cuenta_empresa_create': {\n                    'id': '',\n                    'cuenta': '',\n                    'id_empresa': '',\n                    'id_tipo_cuenta_empresa': '',\n                    'tipo_cuenta_empresa': {\n                        'descripcion': ''\n                    }\n                }\n            },\n            'guardando': false,\n            'nuevo_registro': false\n        };\n    },\n    methods: {\n        close_modal: function close_modal(modal) {\n            $('#' + modal).modal('hide');\n            this.form.cuenta_empresa_create.cuenta = '';\n            this.form.cuenta_empresa_create.id_tipo_cuenta_empresa = '';\n            this.form.cuenta_empresa_create.tipo_cuenta_empresa.descripcion = '';\n            this.form.cuenta_empresa_create.id = '';\n            this.form.cuenta_empresa_create.id_empresa = '';\n        },\n        confirm_elimina_cuenta: function confirm_elimina_cuenta(cuenta) {\n            var self = this;\n            self.form.cuenta_empresa = cuenta;\n            self.form.cuenta_empresa.id_empresa = cuenta.id_empresa;\n            swal({\n                title: \"Eliminar Cuenta Contable\",\n                html: \"¿Estás seguro que desea eliminar la cuenta: <b> \" + cuenta.tipo_cuenta_empresa.descripcion + \"</b>?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n\n                self.elimina_cuenta();\n            }).catch(swal.noop);\n        },\n        confirm_cuenta_update: function confirm_cuenta_update() {\n            var self = this;\n            swal({\n                title: \"Actualizar Cuenta Contable\",\n                text: \"¿Estás seguro que desea actualizar la Cuenta Contable?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n\n                self.update_cuenta_empresa();\n            }).catch(swal.noop);\n        },\n        confirm_cuenta_create: function confirm_cuenta_create() {\n            var self = this;\n            swal({\n                title: \"Registrar Cuenta Contable\",\n                text: \"¿Estás seguro que desea registrar la Cuenta Contable?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.save_cuenta_empresa();\n            }).catch(swal.noop);\n        },\n        elimina_cuenta: function elimina_cuenta() {\n            var self = this;\n            var data = self.form.cuenta_empresa;\n            var url = App.host + '/sistema_contable/cuenta_empresa/' + self.form.cuenta_empresa.id;\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: {\n                    data: data,\n                    _method: 'DELETE'\n                },\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    Vue.set(self.data, 'empresa', data.data.empresa);\n                    $('#add_movimiento_modal').modal('hide');\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        html: 'La cuenta: <b>' + self.form.cuenta_empresa.tipo_cuenta_empresa.descripcion + '</b> fue eliminada correctamente'\n                    });\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n        create_cuenta_empresa: function create_cuenta_empresa() {\n            this.form.cuenta_empresa_create.cuenta = '';\n            this.form.cuenta_empresa_create.id_tipo_cuenta_empresa = '';\n            this.form.cuenta_empresa_create.id_empresa = this.data.empresa.id_empresa;\n            this.form.cuenta_empresa_create.tipo_cuenta_empresa.descripcion = '';\n            this.nuevo_registro = true;\n\n            this.validation_errors.clear('form_create_cuenta');\n            $('#add_movimiento_modal').modal('show');\n            this.validation_errors.clear('form_create_cuenta');\n        },\n        edit_cuenta_empresa: function edit_cuenta_empresa(cuenta) {\n            this.nuevo_registro = false;\n            this.form.cuenta_empresa_create.cuenta = cuenta.cuenta;\n            this.form.cuenta_empresa_create.id_tipo_cuenta_empresa = cuenta.id_tipo_cuenta_empresa;\n            this.form.cuenta_empresa_create.tipo_cuenta_empresa.descripcion = cuenta.tipo_cuenta_empresa.descripcion;\n            this.form.cuenta_empresa_create.id = cuenta.id;\n            this.form.cuenta_empresa_create.id_empresa = cuenta.id_empresa;\n\n            this.validation_errors.clear('form_update_cuenta');\n            $('#edit_movimiento_modal').modal('show');\n            this.validation_errors.clear('form_update_cuenta');\n        },\n        update_cuenta_empresa: function update_cuenta_empresa(cuenta) {\n            var self = this;\n            var data = self.form.cuenta_empresa_create;\n            var url = App.host + '/sistema_contable/cuenta_empresa/' + self.form.cuenta_empresa_create.id;\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: {\n                    data: data,\n                    _method: 'PATCH'\n                },\n                beforeSend: function beforeSend() {\n                    self.validation_errors.clear('form_update_cuenta');\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    Vue.set(self.data, 'empresa', data.data.empresa);\n                    $('#edit_movimiento_modal').modal('hide');\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        html: 'La cuenta:' + self.form.cuenta_empresa_create.tipo_cuenta_empresa.descripcion + '</b> fue actualizada correctamente'\n                    });\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n\n        save_cuenta_empresa: function save_cuenta_empresa() {\n            var self = this;\n            var url = self.cuenta_store_url;\n            var data = self.form.cuenta_empresa_create;\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: data,\n                beforeSend: function beforeSend() {\n                    self.validation_errors.clear('form_create_cuenta');\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    self.data.empresa.cuentas_empresa.push(data.data.cuenta_empresa);\n                    self.close_modal('add_movimiento_modal');\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        html: 'La cuenta: <b>' + data.data.cuenta_empresa.tipo_cuenta_empresa.descripcion + '</b> fue registrada correctamente'\n                    });\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n\n        validateForm: function validateForm(scope, funcion) {\n            var _this = this;\n\n            this.$validator.validateAll(scope).then(function () {\n                if (funcion == 'confirm_edit_cuenta') {\n                    _this.confirm_cuenta_update();\n                } else if (funcion == 'confirm_create_cuenta') {\n                    _this.confirm_cuenta_create();\n                }\n            }).catch(function () {\n                swal({\n                    type: 'warning',\n                    title: 'Advertencia',\n                    text: 'Por favor corrija los errores del formulario'\n                });\n            });\n        }\n    },\n\n    computed: {\n\n        cuentas_empresa_disponibles: function cuentas_empresa_disponibles() {\n\n            var self = this;\n            var result = {};\n            $.each(this.tipo_cuenta_empresa, function (index, tipo_cuenta_empresa) {\n                var existe = false;\n                self.data.empresa.cuentas_empresa.forEach(function (cuenta) {\n                    if (cuenta.id_tipo_cuenta_empresa == tipo_cuenta_empresa.id) {\n                        existe = true;\n                    }\n                });\n\n                if (!existe) {\n                    result[index] = tipo_cuenta_empresa;\n                }\n            });\n            return result;\n        }\n    }\n});\n\n},{}],16:[function(require,module,exports){\n'use strict';\n\nVue.component('cuenta-fondo-index', {\n    props: ['datos_contables', 'url_cuenta_fondo_store', 'fondos'],\n    data: function data() {\n        return {\n            'data': {\n                'fondos': this.fondos,\n                'fondo_edit': {}\n            },\n            'form': {\n                'cuenta_fondo': {\n                    'id': '',\n                    'id_fondo': '',\n                    'cuenta': ''\n                }\n            },\n            'guardando': false\n        };\n    },\n    methods: {\n        editar: function editar(fondo) {\n            this.data.fondo_edit = fondo;\n            Vue.set(this.form.cuenta_fondo, 'id_fondo', fondo.id_fondo);\n            if (fondo.cuenta_fondo != null) {\n                Vue.set(this.form.cuenta_fondo, 'cuenta', fondo.cuenta_fondo.cuenta);\n                Vue.set(this.form.cuenta_fondo, 'id', fondo.cuenta_fondo.id);\n            } else {\n                Vue.set(this.form.cuenta_fondo, 'cuenta', '');\n                Vue.set(this.form.cuenta_fondo, 'id', '');\n            }\n            this.validation_errors.clear('form_edit_cuenta');\n            $('#edit_cuenta_modal').modal('show');\n            $('#cuenta_contable').focus();\n            this.validation_errors.clear('form_edit_cuenta');\n        },\n        validateForm: function validateForm(scope, funcion) {\n            var _this = this;\n\n            this.$validator.validateAll(scope).then(function () {\n                if (funcion == 'confirm_save_cuenta') {\n                    _this.confirm_save_cuenta();\n                } else if (funcion == 'confirm_update_cuenta') {\n                    _this.confirm_update_cuenta();\n                }\n            }).catch(function () {\n                swal({\n                    type: 'warning',\n                    title: 'Advertencia',\n                    text: 'Por favor corrija los errores del formulario'\n                });\n            });\n        },\n        confirm_update_cuenta: function confirm_update_cuenta() {\n            var self = this;\n            swal({\n                title: \"Actualizar Cuenta Contable\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.update_cuenta();\n            }).catch(swal.noop);\n        },\n\n        update_cuenta: function update_cuenta() {\n            var self = this;\n            var url = this.url_cuenta_fondo_store + '/' + this.form.cuenta_fondo.id;\n\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: {\n                    _method: 'PATCH',\n                    cuenta: self.form.cuenta_fondo.cuenta\n                },\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    self.data.fondo_edit.cuenta_fondo = data.data.cuenta_fondo;\n                    self.close_edit_cuenta();\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        html: 'Cuenta Contable actualizada correctamente'\n                    });\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n\n        confirm_save_cuenta: function confirm_save_cuenta() {\n            var self = this;\n            swal({\n                title: \"Registrar Cuenta Contable\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.save_cuenta();\n            }).catch(swal.noop);\n        },\n\n        save_cuenta: function save_cuenta() {\n            var self = this;\n            var url = this.url_cuenta_fondo_store;\n\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: {\n                    cuenta: self.form.cuenta_fondo.cuenta,\n                    id_fondo: self.form.cuenta_fondo.id_fondo\n                },\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    self.data.fondo_edit.cuenta_fondo = data.data.cuenta_fondo;\n                    self.close_edit_cuenta();\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        html: 'Cuenta Contable registrada correctamente'\n                    });\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n        close_edit_cuenta: function close_edit_cuenta() {\n            $('#edit_cuenta_modal').modal('hide');\n            Vue.set(this.form.cuenta_fondo, 'cuenta', '');\n            Vue.set(this.form.cuenta_fondo, 'id', '');\n            Vue.set(this.form.cuenta_fondo, 'id_fondo', '');\n        }\n\n    }\n});\n\n},{}],17:[function(require,module,exports){\n'use strict';\n\nVue.component('cuenta-material-index', {\n    props: ['material_url', 'url_store_cuenta', 'datos_contables', 'tipos_cuenta_material'],\n    data: function data() {\n        return {\n            materiales: [],\n            form: {\n                id_tipo_cuenta_material: '',\n                tipo_material: '',\n                material_edit: {},\n                cuenta: '',\n                material: '',\n                id: '',\n\n                id_material: ''\n            },\n            cargando: false\n        };\n    },\n\n    directives: {\n        treegrid: {\n            inserted: function inserted(el) {\n                $(el).treegrid({\n                    saveState: true,\n                    initialState: 'collapsed'\n                });\n            },\n            componentUpdated: function componentUpdated(el) {\n                $(el).treegrid({\n                    saveState: true,\n                    initialState: 'collapsed'\n                });\n            }\n        },\n\n        select2: {\n            inserted: function inserted(el) {\n                $(el).select2({\n                    width: '100%'\n                });\n            }\n        }\n    },\n\n    computed: {\n        materiales_ordenados: function materiales_ordenados() {\n            return this.materiales.sort(function (a, b) {\n                return a.nivel > b.nivel ? 1 : b.nivel > a.nivel ? -1 : 0;\n            });\n        }\n    },\n\n    methods: {\n        fetch_materiales: function fetch_materiales() {\n            var self = this;\n            $.ajax({\n                type: 'GET',\n                url: self.material_url + '/getFamiliasByTipo',\n                data: {\n                    tipo_material: self.form.tipo_material\n                },\n                beforeSend: function beforeSend() {\n                    self.cargando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    self.materiales = data.data.materiales;\n                },\n                complete: function complete() {\n                    self.cargando = false;\n                }\n            });\n        },\n\n        tr_class: function tr_class(material) {\n            var treegrid = \"treegrid-\" + material.id_material;\n            var treegrid_parent = material.id_padre != null ? \" treegrid-parent-\" + material.id_padre : \"\";\n            return treegrid + treegrid_parent;\n        },\n\n        tr_id: function tr_id(material) {\n            return material.id_padre == null || material.tiene_hijos > 0 ? \"tnode-\" + material.id_material : \"\";\n        },\n\n        get_hijos: function get_hijos(material) {\n            var self = this;\n\n            $.ajax({\n                type: 'GET',\n                url: self.material_url + '/' + material.id_material + '/getHijos',\n                beforeSend: function beforeSend() {\n                    self.cargando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    data.data.materiales.forEach(function (material) {\n                        self.materiales.push(material);\n                    });\n                    material.cargado = true;\n                },\n                complete: function complete() {\n                    self.cargando = false;\n                    setTimeout(function () {\n                        $('#tnode-' + material.id_material).treegrid('expandRecursive');\n                    }, 500);\n                }\n            });\n        },\n\n        edit_cuenta: function edit_cuenta(material) {\n            this.form.material_edit = material;\n            Vue.set(this.form, 'material', material.descripcion);\n            Vue.set(this.form, 'id_material', material.id_material);\n            if (material.cuenta_material != null) {\n                Vue.set(this.form, 'cuenta', material.cuenta_material.cuenta);\n                Vue.set(this.form, 'id', material.cuenta_material.id);\n                Vue.set(this.form, 'id_tipo_cuenta_material', material.cuenta_material.id_tipo_cuenta_material);\n            } else {\n                Vue.set(this.form, 'cuenta', '');\n                Vue.set(this.form, 'id', '');\n                Vue.set(this.form, 'id_tipo_cuenta_material', '');\n            }\n            this.validation_errors.clear('form_edit_cuenta');\n            $('#edit_cuenta_modal').modal('show');\n            $('#cuenta_contable').focus();\n            this.validation_errors.clear('form_edit_cuenta');\n        },\n\n        validateForm: function validateForm(scope, funcion) {\n            var _this = this;\n\n            this.$validator.validateAll(scope).then(function () {\n                if (funcion == 'confirm_save_cuenta') {\n                    _this.confirm_save_cuenta();\n                } else if (funcion == 'confirm_update_cuenta') {\n                    _this.confirm_update_cuenta();\n                }\n            }).catch(function () {\n                swal({\n                    type: 'warning',\n                    title: 'Advertencia',\n                    text: 'Por favor corrija los errores del formulario'\n                });\n            });\n        },\n\n        confirm_update_cuenta: function confirm_update_cuenta() {\n            var self = this;\n            swal({\n                title: \"Actualizar Cuenta Contable\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.update_cuenta();\n            }).catch(swal.noop);\n        },\n\n        update_cuenta: function update_cuenta() {\n            var self = this;\n            var url = this.url_store_cuenta + '/' + this.form.id;\n\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: {\n                    _method: 'PATCH',\n                    cuenta: self.form.cuenta,\n                    id_tipo_cuenta_material: self.form.id_tipo_cuenta_material\n                },\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    self.form.material_edit.cuenta_material = data.data.cuenta_material;\n                    self.close_edit_cuenta();\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        html: 'Cuenta Contable actualizada correctamente'\n                    });\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n\n        confirm_save_cuenta: function confirm_save_cuenta() {\n            var self = this;\n            swal({\n                title: \"Registrar Cuenta Contable\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.save_cuenta();\n            }).catch(swal.noop);\n        },\n\n        save_cuenta: function save_cuenta() {\n            var self = this;\n            var url = this.url_store_cuenta;\n\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: {\n                    cuenta: self.form.cuenta,\n                    id_material: self.form.id_material,\n                    id_tipo_cuenta_material: self.form.id_tipo_cuenta_material\n                },\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    self.form.material_edit.cuenta_material = data.data.cuenta_material;\n                    self.close_edit_cuenta();\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        html: 'Cuenta Contable registrada correctamente'\n                    });\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n\n        close_edit_cuenta: function close_edit_cuenta() {\n            $('#edit_cuenta_modal').modal('hide');\n            Vue.set(this.form, 'cuenta', '');\n            Vue.set(this.form, 'material', '');\n            Vue.set(this.form, 'id', '');\n            Vue.set(this.form, 'id_tipo_cuenta_material', '');\n            Vue.set(this.form, 'id_material', '');\n        }\n    }\n});\n\n},{}],18:[function(require,module,exports){\n'use strict';\n\nVue.component('datos-contables-edit', {\n    props: ['datos_contables', 'datos_contables_update_url', 'referencia'],\n    data: function data() {\n        return {\n            'data': {\n                'datos_contables': this.datos_contables\n            },\n            'guardando': false\n        };\n    },\n    mounted: function mounted() {\n        var self = this;\n\n        // Iniciar evento al dar clic en un radio button\n        $('.checkboxes').on('ifClicked', function (e) {\n            var elem = $(this),\n                value = self.toBoolean(elem.data('value')),\n                name = elem.data('name'),\n                substring = \"si\";\n\n            var id = elem.attr('id');\n            var reference = name === 'manejo' ? 'manejo_almacenes' : 'costo_en_tipo_gasto';\n            var contraparte = \"#\" + (id.indexOf(substring) !== -1 ? name + \"_no\" : name + \"_si\");\n            var parent_elem = elem.parent();\n            var parent_contraparte = $(contraparte).parent();\n\n            parent_elem.addClass('iradio_line-green').removeClass('iradio_line-grey');\n            parent_contraparte.addClass('iradio_line-grey').removeClass('iradio_line-green');\n            elem.iCheck('check');\n            $(contraparte).iCheck('uncheck');\n            Vue.set(self.data.datos_contables, reference, value);\n        });\n\n        // Cambia el estilo a los elementos previamente seleccionados\n        $('.checkboxes').each(function (index) {\n            var elem = $(this);\n            var parent = elem.parent();\n\n            if (elem.is(':checked')) {\n                parent.addClass('iradio_line-green').removeClass('iradio_line-grey');console.log(parent);\n            }\n        });\n\n        $(\"label.control-label\").css({\n            'font-size': '1.5em'\n        });\n        $(\"div.box-body > .alert-danger\").css({\n            'font-size': '1.3em'\n        });\n        $(\"div.iradio_line-grey\").css({\n            'margin': '4px'\n        });\n    },\n    created: function created() {\n        // Convierte \"0\" y \"1\" en false y true respectivamente\n        Vue.set(this.data.datos_contables, 'manejo_almacenes', this.toBoolean(this.data.datos_contables.manejo_almacenes));\n        Vue.set(this.data.datos_contables, 'costo_en_tipo_gasto', this.toBoolean(this.data.datos_contables.costo_en_tipo_gasto));\n    },\n    directives: {\n        icheck: {\n            inserted: function inserted(el, binding, vnode) {\n                var elem = $(el),\n                    label = elem.next(),\n                    label_text = label.text(),\n                    vm = vnode.context;\n\n                label.remove();\n                elem.iCheck({\n                    checkboxClass: 'icheckbox_line-grey',\n                    radioClass: 'iradio_line-grey',\n                    insert: '<div class=\"icheck_line-icon\"></div>' + label_text\n                });\n            }\n        }\n    },\n    methods: {\n        confirm_datos_obra: function confirm_datos_obra() {\n            var self = this;\n            swal({\n                title: \"Guardar Datos Contables de la Obra\",\n                html: \"<div class=\\\"alert alert-danger\\\">\\n\" + \"  <strong>Atención</strong> Una vez guardados los datos no va a ser posible editarlos\" + \"</div>\" + \"<div class=\\\"alert alert-warning\\\">\\n\" + \"¿Estás seguro de que la información es correcta? \" + \"</div>\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.save_datos_obra();\n            }).catch(swal.noop);\n        },\n\n        save_datos_obra: function save_datos_obra() {\n            var self = this;\n            $.ajax({\n                type: 'POST',\n                url: self.datos_contables_update_url,\n                data: {\n                    BDContPaq: self.data.datos_contables.BDContPaq,\n                    FormatoCuenta: self.data.datos_contables.FormatoCuenta,\n                    NumobraContPaq: self.data.datos_contables.NumobraContPaq,\n                    costo_en_tipo_gasto: self.data.datos_contables.costo_en_tipo_gasto,\n                    manejo_almacenes: self.data.datos_contables.manejo_almacenes,\n                    _method: 'PATCH'\n                },\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    self.data.datos_contables = data.data.datos_contables;\n                    var costo_en_tipo_gasto = Vue.set(self.data.datos_contables, 'costo_en_tipo_gasto', data.data.datos_contables.costo_en_tipo_gasto == 'true' ? true : false);\n                    var manejo_almacenes = Vue.set(self.data.datos_contables, 'manejo_almacenes', data.data.datos_contables.manejo_almacenes == 'true' ? true : false);\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        html: 'Datos Contables de la Obra actualizados correctamente'\n                    });\n\n                    self.referencia = \"1\";\n\n                    $('.checkboxes').each(function (index) {\n                        var elem = $(this);\n                        elem.iCheck('disable');\n                    });\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n\n        validateForm: function validateForm(scope, funcion) {\n            var _this = this;\n\n            this.$validator.validateAll(scope).then(function () {\n                if (funcion == 'save_datos_obra') {\n                    _this.confirm_datos_obra();\n                }\n            }).catch(function () {\n                swal({\n                    type: 'warning',\n                    title: 'Advertencia',\n                    text: 'Por favor corrija los errores del formulario'\n                });\n            });\n        },\n        toBoolean: function toBoolean(sVar) {\n            return Boolean(Number(sVar));\n        },\n        checkBox: function checkBox(toCheck, bVar) {\n            toCheck = toCheck == null ? false : toCheck;\n\n            return toCheck === bVar;\n        },\n        editando: function editando() {\n            return this.toBoolean(this.referencia);\n        },\n        mostrar_mensaje: function mostrar_mensaje() {\n            return this.editando() ? 'Los datos no pueden ser modificados porque ya han sido guardados previamente' : 'Una vez guardados los datos no va a ser posible editarlos';\n        }\n    }\n});\n\n},{}],19:[function(require,module,exports){\n'use strict';\n\nVue.component('emails', {\n    props: ['user', 'emails', 'notificacion_url', 'db', 'id_obra'],\n    data: function data() {\n        return {\n            data: {\n                emails: this.emails\n            }\n        };\n    },\n\n    created: function created() {\n        var socket = io(App.socket_host);\n\n        socket.on('emails-channel:Ghi\\\\Events\\\\NewEmail', function (data) {\n            console.log(data);\n            if (data.email.id_usuario == this.user.idusuario && data.db == this.db && data.email.id_obra == this.id_obra) {\n                this.data.emails.push(data.email);\n                $.notify({\n                    // options\n                    icon: 'fa fa-envelope-o fa-2x ',\n                    title: data.email.titulo,\n                    message: new Date(data.email.created_at).dateFormat(),\n                    url: App.host + '/sistema_contable/notificacion/' + data.email.id\n                }, {\n                    // settings\n                    type: 'warning',\n                    newest_on_top: true,\n                    placement: {\n                        from: \"bottom\",\n                        align: \"right\"\n                    }\n                });\n            }\n        }.bind(this));\n    }\n});\n\n},{}],20:[function(require,module,exports){\n'use strict';\n\nVue.component('revaluacion-create', {\n    props: ['facturas', 'tipo_cambio', 'url_revaluacion'],\n    data: function data() {\n        return {\n            data: {\n                facturas: this.facturas\n            },\n            guardando: false\n        };\n    },\n    directives: {\n        icheck: {\n            inserted: function inserted(el) {\n                $(el).iCheck({\n                    checkboxClass: 'icheckbox_minimal-grey'\n                });\n            }\n        }\n    },\n    methods: {\n        confirm_save_facturas: function confirm_save_facturas() {\n            var self = this;\n            swal({\n                title: \"Guardar Revaluación\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.save_facturas();\n            }).catch(swal.noop);\n        },\n        save_facturas: function save_facturas() {\n            var self = this;\n            var url = this.url_revaluacion;\n            var data = $('#form_facturas').serialize();\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: data,\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    swal({\n                        type: \"success\",\n                        title: '¡Correcto!',\n                        text: 'Revaluación guardada correctamente'\n                    });\n                    window.location = xhr.getResponseHeader('Location');\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n        validateForm: function validateForm(scope, funcion) {\n            var _this = this;\n\n            this.$validator.validateAll(scope).then(function () {\n                if (funcion == 'confirm_save_facturas') {\n                    _this.confirm_save_facturas();\n                }\n            }).catch(function () {\n                swal({\n                    type: 'warning',\n                    title: 'Advertencia',\n                    text: 'Por favor corrija los errores del formulario'\n                });\n            });\n        }\n    }\n});\n\n},{}],21:[function(require,module,exports){\n'use strict';\n\nVue.component('poliza-generada-edit', {\n    props: ['poliza', 'poliza_edit', 'datos_contables', 'url_cuenta_contable_findby', 'url_poliza_generada_update', 'tipo_cuenta_contable', 'cuentas_contables', 'movimientos_cta'],\n    data: function data() {\n        return {\n            'data': {\n                'poliza': this.poliza,\n                'poliza_edit': this.poliza_edit,\n                'cuentas_contables': this.cuentas_contables,\n                'movimientos': this.movimientos_cta,\n                'empresa': ''\n            },\n            'form': {\n                'movimiento': {\n                    'id_int_poliza': this.poliza.id_int_poliza,\n                    'cuenta_contable': '',\n                    'id_tipo_movimiento_poliza': '',\n                    'importe': '',\n                    'referencia': '',\n                    'concepto': '',\n                    'id_tipo_cuenta_contable': ''\n                },\n                'movimiento_cuenta': {\n                    'id_int_poliza_movimiento': '',\n                    'cuenta': ''\n                }\n            },\n            'guardando': false\n        };\n    },\n\n    mounted: function mounted() {\n        var self = this;\n        $(\"#fecha\").datepicker().on(\"changeDate\", function () {\n            Vue.set(self.data.poliza_edit, 'fecha', $('#fecha').val());\n        });\n    },\n\n    directives: {\n        datepicker: {\n            inserted: function inserted(el) {\n                $(el).datepicker({\n                    autoclose: true,\n                    language: 'es',\n                    todayHighlight: true,\n                    clearBtn: true,\n                    format: 'yyyy-mm-dd'\n                });\n            }\n        }\n    },\n\n    computed: {\n        color: function color() {\n            if (this.data.poliza.cuadrado) {\n                return \"bg-gray\";\n            } else {\n                return \"bg-red\";\n            }\n        },\n\n        cambio: function cambio() {\n            return JSON.stringify(this.data.poliza) !== JSON.stringify(this.data.poliza_edit);\n        },\n\n        suma_haber: function suma_haber() {\n            var suma_haber = 0;\n            this.data.poliza_edit.poliza_movimientos.forEach(function (movimiento) {\n                if (movimiento.id_tipo_movimiento_poliza == 2) {\n                    suma_haber += parseFloat(movimiento.importe);\n                }\n            });\n            return parseFloat(Math.round(suma_haber * 100) / 100).toFixed(2);\n        },\n\n        suma_debe: function suma_debe() {\n            var suma_debe = 0;\n            this.data.poliza_edit.poliza_movimientos.forEach(function (movimiento) {\n                if (movimiento.id_tipo_movimiento_poliza == 1) {\n                    suma_debe += parseFloat(movimiento.importe);\n                }\n            });\n            return (Math.round(suma_debe * 100) / 100).toFixed(2);\n        }\n    },\n\n    methods: {\n\n        obtener_numero_cuenta: function obtener_numero_cuenta(idTipoCuenta) {\n            var self = this;\n            this.data.cuentas_contables.forEach(function (cuenta) {\n                if (cuenta.id_int_tipo_cuenta_contable == idTipoCuenta) {\n                    self.form.movimiento.cuenta_contable = cuenta.cuenta_contable;\n                }\n            });\n            if (self.form.movimiento.cuenta_contable == 'NULL') {\n                self.form.movimiento.cuenta_contable = '';\n            }\n        },\n\n        show_add_movimiento: function show_add_movimiento() {\n            this.validation_errors.clear('form_add_movimiento');\n            $('#add_movimiento_modal').modal('show');\n            this.validation_errors.clear('form_add_movimiento');\n        },\n\n        validateForm: function validateForm(scope, funcion) {\n            var _this = this;\n\n            this.$validator.validateAll(scope).then(function () {\n                if (funcion == 'confirm_add_movimiento') {\n                    _this.confirm_add_movimiento();\n                } else if (funcion == 'confirm_save') {\n                    _this.confirm_save();\n                } else if (funcion == 'confirm_save_cuenta') {\n                    _this.confirm_save_cuenta();\n                }\n            }).catch(function () {\n                swal({\n                    type: 'warning',\n                    title: 'Advertencia',\n                    text: 'Por favor corrija los errores del formulario'\n                });\n            });\n        },\n\n        close_add_movimiento: function close_add_movimiento() {\n            $('#add_movimiento_modal').modal('hide');\n            this.form.movimiento = {\n                'id_int_poliza': this.poliza.id_int_poliza,\n                'cuenta_contable': '',\n                'id_tipo_movimiento_poliza': '',\n                'importe': ''\n            };\n        },\n\n        confirm_add_movimiento: function confirm_add_movimiento() {\n            var self = this;\n            swal({\n                title: \"Agregar Movimiento\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.add_movimiento();\n            }).catch(swal.noop);\n        },\n\n        add_movimiento: function add_movimiento() {\n            var self = this;\n            var url = this.url_cuenta_contable_findby;\n\n            $.ajax({\n                type: 'GET',\n                url: url,\n                data: {\n                    attribute: 'cuenta_contable',\n                    value: self.form.movimiento.cuenta_contable,\n                    with: 'tipoCuentaContable'\n                },\n                success: function success(data, textStatus, xhr) {\n                    if (data.data.cuenta_contable) {\n                        self.form.movimiento.id_tipo_cuenta_contable = data.data.cuenta_contable.id_int_tipo_cuenta_contable;\n                        self.form.movimiento.id_cuenta_contable = data.data.cuenta_contable.id_int_cuenta_contable;\n                        self.form.movimiento.descripcion_cuenta_contable = data.data.cuenta_contable.tipo_cuenta_contable.descripcion;\n                    }\n                },\n                complete: function complete() {\n\n                    self.data.poliza_edit.poliza_movimientos.push(self.form.movimiento);\n                    self.close_add_movimiento();\n                }\n            });\n        },\n\n        confirm_remove_movimiento: function confirm_remove_movimiento(index) {\n            var self = this;\n            swal({\n                title: \"Quitar Movimiento\",\n                text: \"¿Estás seguro de que deseas quitar el movimiento de la Prepóliza?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.remove_movimiento(index);\n            }).catch(swal.noop);\n        },\n\n        remove_movimiento: function remove_movimiento(index) {\n            Vue.delete(this.data.poliza_edit.poliza_movimientos, index);\n        },\n\n        confirm_save: function confirm_save() {\n            var self = this;\n            swal({\n                title: \"Guardar Cambios de la Prepóliza\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.save();\n            }).catch(swal.noop);\n        },\n        confirm_save_cuenta: function confirm_save_cuenta() {\n            var self = this;\n            swal({\n                title: \"Guardar Cambios de las cuentas faltantes\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.save_cuenta();\n            }).catch(swal.noop);\n        },\n\n        save: function save() {\n            var self = this;\n\n            Vue.set(this.data.poliza_edit, 'suma_haber', this.suma_haber);\n            Vue.set(this.data.poliza_edit, 'suma_debe', this.suma_debe);\n\n            $.ajax({\n                type: 'POST',\n                url: self.url_poliza_generada_update,\n                data: {\n                    _method: 'PATCH',\n                    poliza_generada: self.data.poliza_edit\n                },\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    swal({\n                        title: '¡Correcto!',\n                        html: 'Prepóliza  <b>' + self.data.poliza_edit.transaccion_interfaz.descripcion + '</b> actualizada correctamente',\n                        type: 'success',\n                        confirmButtonText: \"Ok\",\n                        closeOnConfirm: false\n                    }).catch(swal.noop);\n                    window.location = xhr.getResponseHeader('Location');\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n\n        ingresarCuenta: function ingresarCuenta(idPoliza) {\n            var self = this;\n            $.ajax({\n                type: 'GET',\n                url: App.host + \"/sistema_contable/poliza_movimientos/\" + idPoliza,\n                data: {\n                    id_poliza: idPoliza\n                },\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    if (self.data.movimientos.length > 0) {\n                        self.data.empresa = self.data.movimientos[0].empresa_cadeco;\n                        $('#add_cuenta_modal').modal('show');\n                    } else {\n                        swal({\n                            title: \"¡Información!\",\n                            text: \"Las cuentas están completas.\",\n                            type: \"info\",\n                            confirmButtonText: \"Aceptar\"\n                        });\n                    }\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n        save_cuenta: function save_cuenta() {\n            var self = this;\n            $.ajax({\n                type: 'POST',\n                url: App.host + \"/sistema_contable/poliza_movimientos/\" + self.data.poliza.id_int_poliza,\n                data: {\n                    _method: 'PATCH',\n                    data: self.data.movimientos,\n                    validar: true\n                },\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    if (data.data.cambio) {\n                        var datos = \"\";\n                        for (var i = 0; i < data.data.cambio.length; i++) {\n                            data.data.cambio[i];\n                            datos += \"<tr><td>\" + data.data.cambio[i].tipo_cuenta_empresa.descripcion + \"</td>\";\n                            datos += \"<td>\" + data.data.cambio[i].cuenta + \"</td>\";\n                            datos += \"<td>\" + data.data.cambio[i].nuevo + \"</td></tr>\";\n                        }\n                        swal({\n                            title: \"Advertencia\",\n                            html: \"El numero de cuenta que trata de ingresar no corresponde al actual\" + \"<table class='table table-striped small'>\" + \"   <thead>\" + \"   <tr>\" + \"       <th style='text-align: center'>Tipo de Cuenta Contable</th>\" + \"       <th style='text-align: center'>Actual</th>\" + \"       <th style='text-align: center'>Nuevo</th>\" + \"   </tr>\" + \"   </thead>\" + \"   <tbody>\" + datos + \"   </tbody>\" + \"</table>\" + \"<b>¿Deseas reemplazar la cuenta contable?</b><br>\",\n                            type: \"warning\",\n                            showCancelButton: true,\n                            cancelButtonText: 'No, Cancelar',\n                            confirmButtonText: 'Si, Continuar'\n                        }).then(function () {\n\n                            $.ajax({\n                                type: 'POST',\n                                url: App.host + \"/sistema_contable/poliza_movimientos/\" + self.data.poliza.id_int_poliza,\n                                data: {\n                                    _method: 'PATCH',\n                                    data: self.data.movimientos,\n                                    validar: false\n                                },\n                                beforeSend: function beforeSend() {\n                                    self.guardando = true;\n                                },\n                                success: function success(data, textStatus, xhr) {\n                                    self.data.poliza = data.data.poliza;\n                                    swal({\n                                        title: '¡Correcto!',\n                                        html: 'Las cuentas se configurarón exitosamente',\n                                        type: 'success',\n                                        confirmButtonText: \"Ok\",\n                                        closeOnConfirm: false\n                                    }).then(function () {}).catch(swal.noop);\n                                    window.location.reload(true);\n                                    $('#add_cuenta_modal').modal('hide');\n                                },\n                                complete: function complete() {\n                                    self.guardando = false;\n                                }\n                            });\n                        }).catch(swal.noop);\n                    } else {\n\n                        swal({\n                            title: '¡Correcto!',\n                            html: 'Las cuentas se configurarón exitosamente',\n                            type: 'success',\n                            confirmButtonText: \"Ok\",\n                            closeOnConfirm: false\n                        }).then(function () {}).catch(swal.noop);\n                        $('#add_cuenta_modal').modal('hide');\n                        window.location.reload(true);\n                    }\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n\n        close_cuenta_modal: function close_cuenta_modal() {\n            $('#add_cuenta_modal').modal('hide');\n        }\n    }\n});\n\n},{}],22:[function(require,module,exports){\n'use strict';\n\nVue.component('poliza-tipo-create', {\n    props: ['tipos_cuentas_contables', 'tipos_movimiento', 'polizas_tipo_sao'],\n    data: function data() {\n        return {\n            'form': {\n                'poliza_tipo': {\n                    'id_poliza_tipo_sao': '',\n                    'movimientos': [],\n                    'inicio_vigencia': ''\n                },\n                'movimiento': {\n                    'id_tipo_cuenta_contable': '',\n                    'id_tipo_movimiento': ''\n                },\n                'errors': []\n            },\n            'guardando': false\n        };\n    },\n\n    mounted: function mounted() {\n        var self = this;\n        $(\"#inicio_vigencia\").datepicker().on(\"changeDate\", function () {\n            Vue.set(self.form.poliza_tipo, 'inicio_vigencia', $('#inicio_vigencia').val());\n        });\n    },\n\n    computed: {\n        check_movimientos: function check_movimientos() {\n            var a = false;\n            var b = false;\n            this.form.poliza_tipo.movimientos.forEach(function (movimiento) {\n                if (movimiento.id_tipo_movimiento == '1') {\n                    a = true;\n                } else if (movimiento.id_tipo_movimiento == '2') {\n                    b = true;\n                }\n            });\n\n            return a && b;\n        },\n\n        tipos_cuentas_contables_disponibles: function tipos_cuentas_contables_disponibles() {\n            return this.tipos_cuentas_contables;\n        }\n    },\n\n    directives: {\n        datepicker: {\n            inserted: function inserted(el) {\n                $(el).datepicker({\n                    autoclose: true,\n                    language: 'es',\n                    todayHighlight: true,\n                    clearBtn: true,\n                    format: 'yyyy-mm-dd'\n                });\n            }\n        }\n    },\n\n    methods: {\n        show_add_movimiento: function show_add_movimiento() {\n            this.validation_errors.clear('form_save_cuenta');\n            $('#modal-add-movimiento').modal('show');\n            this.validation_errors.clear('form_save_cuenta');\n        },\n\n        close_add_movimiento: function close_add_movimiento() {\n            $('#modal-add-movimiento').modal('hide');\n            this.reset_movimiento();\n        },\n\n        add_movimiento: function add_movimiento() {\n            var id_tipo_cuenta_contable = $('#id_tipo_cuenta_contable').val();\n            var id_tipo_movimiento = $('#id_tipo_movimiento').val();\n\n            this.form.poliza_tipo.movimientos.push({\n                id_tipo_cuenta_contable: id_tipo_cuenta_contable,\n                id_tipo_movimiento: id_tipo_movimiento\n            });\n            this.reset_movimiento();\n            this.validation_errors.clear('form_save_cuenta');\n            $('#modal-add-movimiento').modal('hide');\n            this.validation_errors.clear('form_save_cuenta');\n        },\n\n        reset_movimiento: function reset_movimiento() {\n            Vue.set(this.form.movimiento, 'id_tipo_cuenta_contable', '');\n            Vue.set(this.form.movimiento, 'id_tipo_movimiento', '');\n        },\n\n        check_duplicity: function check_duplicity() {\n            var self = this;\n            var id = self.form.poliza_tipo.id_poliza_tipo_sao;\n            var url = App.host + '/sistema_contable/poliza_tipo/findBy';\n            $.ajax({\n                type: 'GET',\n                url: url,\n                data: {\n                    'attribute': 'id_poliza_tipo_sao',\n                    'value': id,\n                    'with': 'movimientos'\n                },\n                success: function success(response) {\n                    if (response.data.poliza_tipo != null) {\n                        var body = \"\";\n                        $.each(response.data.poliza_tipo.movimientos, function (index, movimiento) {\n                            body += \"<tr><td>\" + (index + 1) + \"</td><td style='text-align: left'>\" + self.getTipoCuentaDescription(movimiento.id_tipo_cuenta_contable) + \"</td><td>\" + self.tipos_movimiento[movimiento.id_tipo_movimiento] + \"</td></tr>\";\n                        });\n\n                        swal({\n                            title: \"Advertencia\",\n                            html: \"Ya existe una Plantilla para el tipo de Póliza seleccionado con un estado <b>\" + response.data.poliza_tipo.vigencia + \"</b><br>\" + \"Con un inicio de vigencia el día <b>\" + response.data.poliza_tipo.inicio_vigencia.split(\" \")[0] + \"</b><br><br>\" + \"<table class='table table-striped small'>\" + \"   <thead>\" + \"   <tr>\" + \"       <th style='text-align: center'>#</th>\" + \"       <th style='text-align: center'>Tipo de Cuenta Contable</th>\" + \"       <th style='text-align: center'>Tipo</th>\" + \"   </tr>\" + \"   </thead>\" + \"   <tbody>\" + body + \"   </tbody>\" + \"</table>\" + \"<b>¿Deseas continuar con el registro?</b><br>\" + \"<small><small>(Se establecerá el fin de vigencia para la plantilla existente)</small></small>\",\n                            type: \"warning\",\n                            showCancelButton: true,\n                            cancelButtonText: 'No, Cancelar',\n                            confirmButtonText: 'Si, Continuar'\n\n                        }).then(function () {\n                            self.confirm_save();\n                        }).catch(swal.noop);\n                    } else {\n                        self.confirm_save();\n                    }\n                }\n            });\n        },\n\n        confirm_save: function confirm_save() {\n            var self = this;\n            swal({\n                title: \"Guardar Plantilla\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.save();\n            }).catch(swal.noop);\n        },\n\n        save: function save() {\n            var self = this;\n            var url = App.host + '/sistema_contable/poliza_tipo';\n            var data = self.form.poliza_tipo;\n\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: data,\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    swal({\n                        title: '¡Correcto!',\n                        html: \"Se ha creado la plantilla para el Tipo de Póliza<br>\" + \"<b>\" + self.polizas_tipo_sao[self.form.poliza_tipo.id_poliza_tipo_sao] + \"</b>\",\n                        type: \"success\"\n                    });\n                    window.location = xhr.getResponseHeader('Location');\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n\n        remove_movimiento: function remove_movimiento(e) {\n            Vue.delete(this.form.poliza_tipo.movimientos, e);\n        },\n\n        getTipoCuentaDescription: function getTipoCuentaDescription(id) {\n            var result = \"\";\n            $.each(this.tipos_cuentas_contables, function (index, tipo_cuenta_contable) {\n                if (tipo_cuenta_contable.id_tipo_cuenta_contable == id) {\n                    result = tipo_cuenta_contable.descripcion;\n                }\n            });\n            return result;\n        },\n\n        validateForm: function validateForm(scope, funcion) {\n            var _this = this;\n\n            this.$validator.validateAll(scope).then(function () {\n                if (funcion == 'save_cuenta') {\n                    _this.add_movimiento();\n                } else if (funcion == 'save') {\n                    _this.check_duplicity();\n                }\n            }).catch(function () {\n                swal({\n                    type: 'warning',\n                    title: 'Advertencia',\n                    text: 'Por favor corrija los errores del formulario'\n                });\n            });\n        }\n    }\n});\n\n},{}],23:[function(require,module,exports){\n'use strict';\n\n/**\r\n * Created by LERDES2 on 23/06/2017.\r\n */\n\nVue.component('tipo-cuenta-contable-create', {\n    data: function data() {\n        return {\n            'form': {\n                'tipo_cuenta_contable': {\n                    'descripcion': '',\n                    'id_naturaleza_poliza': ''\n                }\n            },\n            'guardando': false\n        };\n    },\n\n    methods: {\n        confirm_save: function confirm_save() {\n            var self = this;\n            swal({\n                title: \"Guardar Tipo Cuenta Contable\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.save();\n            }).catch(swal.noop);\n        },\n\n        save: function save() {\n\n            var self = this;\n            var url = App.host + '/sistema_contable/tipo_cuenta_contable';\n            var data = self.form.tipo_cuenta_contable;\n\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: data,\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    swal({\n                        title: '¡Correcto!',\n                        html: \"Se ha creado el Tipo de Cuenta Contable con éxito\",\n                        type: \"success\",\n                        confirmButtonText: \"Ok\",\n                        closeOnConfirm: false\n                    }).then(function () {\n                        window.location = xhr.getResponseHeader('Location');\n                    }).catch(swal.noop);\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        }\n    }\n\n});\n\n},{}],24:[function(require,module,exports){\n'use strict';\n\n/**\r\n * Created by LERDES2 on 23/06/2017.\r\n */\n\nVue.component('tipo-cuenta-contable-update', {\n    props: ['tipo_cuenta_contable'],\n    data: function data() {\n        return {\n            'form': {\n                'tipo_cuenta_contable': {\n                    'id_tipo_cuenta_contable': this.tipo_cuenta_contable.id_tipo_cuenta_contable,\n                    'descripcion': this.tipo_cuenta_contable.descripcion,\n                    'id_naturaleza_poliza': this.tipo_cuenta_contable.id_naturaleza_poliza\n                }\n            },\n            'guardando': false\n        };\n    },\n\n    methods: {\n        confirm_save: function confirm_save() {\n            var self = this;\n            swal({\n                title: \"Actualizar Tipo Cuenta Contable\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.save();\n            }).catch(swal.noop);\n        },\n\n        save: function save() {\n\n            var self = this;\n            var url = App.host + '/sistema_contable/tipo_cuenta_contable/' + self.form.tipo_cuenta_contable.id_tipo_cuenta_contable;\n\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: {\n                    _method: 'PATCH',\n                    id_naturaleza_poliza: self.form.tipo_cuenta_contable.id_naturaleza_poliza\n                },\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    swal({\n                        title: '¡Correcto!',\n                        html: \"Se ha actualizado el Tipo de Cuenta Contable con éxito\",\n                        type: \"success\",\n                        confirmButtonText: \"Ok\",\n                        closeOnConfirm: false\n                    }).then(function () {\n                        window.location = App.host + '/sistema_contable/tipo_cuenta_contable/' + data.data.tipo_cuenta_contable.id_tipo_cuenta_contable;\n                    }).catch(swal.noop);\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        }\n    }\n\n});\n\n},{}],25:[function(require,module,exports){\n'use strict';\n\nVue.component('solicitar_reclasificacion-index', {\n    props: ['url_solicitar_reclasificacion_index', 'max_niveles', 'filtros', 'operadores'],\n    data: function data() {\n        return {\n            'data': {\n                'condicionante': '',\n                'temp_filtro': '',\n                'filtros': this.filtros,\n                'operadores': this.operadores,\n                'agrega': {\n                    'nivel': '',\n                    'operador': '',\n                    'texto': ''\n                },\n                'resultados': [],\n                'resumen': [],\n                'detalles': [],\n                'desglosar_descripcion': '',\n                'subtotal': 0,\n                'subimporte': 0,\n                'total_resultados': 0,\n                'desglosar': [],\n                'loading': false\n            }\n        };\n    },\n    computed: {\n        niveles: function niveles() {\n            var self = this,\n                niveles = [],\n                paso = 1;\n\n            for (paso; paso <= self.max_niveles; paso++) {\n                niveles.push({ numero: paso, nombre: \"Nivel \" + paso });\n            }\n\n            return niveles;\n        },\n        niveles_n: function niveles_n() {\n            var result = 0;\n            this.data.resultados.forEach(function (t) {\n                var cont = Object.keys(t).filter(function (t2) {\n                    return t[t2] != null;\n                });\n                if (cont.length - 4 > result) {\n                    result = cont.length - 4;\n                }\n            });\n\n            return result;\n        }\n    },\n    methods: {\n        agregar_filtro: function agregar_filtro() {\n            var self = this,\n                vacios = [],\n                temp = [];\n\n            // Los campos  no puedene star vacios\n            $.each(self.data.agrega, function (index, value) {\n                if (value === \"\") {\n                    vacios.push(index);\n                }\n            });\n\n            // Manda error si están vacios\n            if (vacios.length > 0) {\n                return swal({\n                    type: 'warning',\n                    title: 'Los siguientes campos no pueden estar vacios:',\n                    html: '<ul class=\"list-group\"><li class=\"list-group-item list-group-item-danger\">' + vacios.join(\"<li class=\\\"list-group-item list-group-item-danger\\\">\") + '</ul>'\n                });\n            }\n\n            if (self.data.condicionante.length > 0) {\n                temp = self.data.temp_filtro;\n                self.data.temp_filtro.condicionante = self.data.condicionante;\n                Vue.set(self.data.filtros, self.data.filtros.indexOf(temp), self.data.temp_filtro);\n            }\n\n            self.filtros.push(self.data.agrega);\n\n            self.close_modal_agregar();\n        },\n        eliminar_filtro: function eliminar_filtro(index) {\n            var self = this,\n                anterior_index = index - 1,\n                anterior = self.data.filtros[anterior_index];\n\n            if (anterior_index >= 0 && anterior.condicionante != null) {\n                var anterior = self.data.filtros[anterior_index];\n\n                delete anterior.condicionante;\n\n                Vue.set(self.data.filtros, anterior_index, anterior);\n            }\n\n            self.data.filtros.splice(index, 1);\n        },\n        reset_agregar: function reset_agregar() {\n            var self = this;\n\n            Vue.set(self.data, 'agrega', {\n                'nivel': '',\n                'operador': '',\n                'texto': ''\n            });\n\n            Vue.set(self.data, 'temp_filtro', '');\n            Vue.set(self.data, 'condicionante', '');\n        },\n        open_modal_agregar: function open_modal_agregar(condicionante, item) {\n            var self = this;\n\n            if (condicionante) {\n                self.data.condicionante = condicionante;\n                self.data.temp_filtro = item;\n            }\n\n            $('#agregar_filtro_modal').modal('show');\n            $('#nivel').focus();\n        },\n        close_modal_agregar: function close_modal_agregar() {\n            var self = this;\n\n            $('#agregar_filtro_modal').modal('hide');\n            self.reset_agregar();\n        },\n        buscar: function buscar() {\n            var self = this,\n                str = { 'data': JSON.stringify(self.data.filtros) },\n                total_resultados = 0;\n\n            Vue.set(self.data, 'total_resultados', 0);\n\n            if (self.data.filtros.length == 0) {\n                return swal({\n                    type: 'warning',\n                    title: 'Agrega un filtro',\n                    html: 'Por favor agrega un filtro antes de buscar'\n                });\n            }\n\n            $.ajax({\n                type: 'GET',\n                url: self.url_solicitar_reclasificacion_index + '/find',\n                data: str,\n                beforeSend: function beforeSend() {},\n                success: function success(data, textStatus, xhr) {\n\n                    if (data.data.resultados.length > 0) {\n                        $.each(data.data.resultados, function (key, value) {\n                            total_resultados = total_resultados + parseInt(value.total);\n                        });\n\n                        Vue.set(self.data, 'total_resultados', parseInt(total_resultados).formatMoney(2, '.', ','));\n                        Vue.set(self.data, 'resultados', data.data.resultados);\n                        swal({\n                            type: 'success',\n                            title: '',\n                            html: 'Se encontraron resultados'\n                        });\n                    } else {\n                        swal({\n                            type: 'warning',\n                            title: '',\n                            html: 'No se encontraron resultados'\n                        });\n                    }\n                },\n                complete: function complete() {}\n            });\n        },\n        confirm_eliminar: function confirm_eliminar(index, tipo) {\n            var self = this;\n            swal({\n                title: \"Eliminar \" + tipo,\n                text: \"¿Estás seguro/a de que deseas eliminar este \" + tipo + \"?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                if (tipo == \"resultado\") {\n                    self.eliminar_resultado(index);\n                } else if (tipo == \"filtro\") {\n                    self.eliminar_filtro(index);\n                }\n            }).catch(swal.noop);\n        },\n        eliminar_resultado: function eliminar_resultado(index) {\n            var self = this;\n\n            self.data.resultados.splice(index, 1);\n        },\n        confirm_solicitar: function confirm_solicitar(item) {\n            var self = this;\n            swal({\n                title: \"Solicitar reclasificación\",\n                text: \"¿Estás seguro/a de querer solicitar esta reclasificación?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.solicitar(item);\n            }).catch(swal.noop);\n        },\n        solicitar: function solicitar(item) {\n            var self = this;\n\n            $.ajax({\n                type: 'POST',\n                url: self.url_solicitar_reclasificacion_index,\n                data: item,\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n\n                    var new_item = item;\n\n                    // marcar el item como \"enviado\" y no dejar que se envie de nuevo\n                    Vue.set(new_item, 'solicitado', 1);\n                    Vue.set(self.data.resultados, self.data.resultados.indexOf(item), new_item);\n\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        html: 'Solicitud enviada correctamente'\n                    });\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n        open_modal_tipos_transaccion: function open_modal_tipos_transaccion(id_concepto) {\n            var self = this,\n                subtotal = 0,\n                subimporte = 0;\n\n            Vue.set(self.data, 'subtotal', 0);\n            Vue.set(self.data, 'subimporte', 0);\n            Vue.set(self.data, 'resumen', []);\n            Vue.set(self.data, 'detalles', []);\n\n            $.ajax({\n                type: 'GET',\n                url: self.url_solicitar_reclasificacion_index + '/tipos',\n                data: { id_concepto: id_concepto },\n                beforeSend: function beforeSend() {},\n                success: function success(data, textStatus, xhr) {\n                    if (data.resumen) {\n                        $.each(data.resumen, function (key, value) {\n                            subtotal = subtotal + parseInt(value.cantidad);\n                            subimporte = subimporte + parseInt(value.monto);\n                        });\n\n                        Vue.set(self.data, 'subtotal', subtotal);\n                        Vue.set(self.data, 'subimporte', subimporte);\n                        Vue.set(self.data, 'resumen', data.resumen);\n                        Vue.set(self.data, 'detalles', data.detalles);\n                        $('#tipos_transaccion').modal('show');\n                    } else {\n                        swal({\n                            type: 'warning',\n                            title: '',\n                            html: 'No se encontraron resultados'\n                        });\n                    }\n                },\n                complete: function complete() {}\n            });\n        },\n        close_modal_tipos_transaccion: function close_modal_tipos_transaccion() {\n            var self = this;\n\n            Vue.set(self.data, 'desglosar', []);\n            Vue.set(self.data, 'resumen', []);\n            $('#tipos_transaccion').modal('hide');\n        },\n        clean_desglosar: function clean_desglosar() {\n            var self = this;\n\n            Vue.set(self.data, 'desglosar', []);\n            Vue.set(self.data, 'desglosar_descripcion', '');\n        },\n        desglosar_tipos: function desglosar_tipos(item) {\n            var self = this,\n                todos = [];\n\n            self.clean_desglosar();\n\n            $.each(self.data.detalles, function (index, value) {\n\n                if (item !== false && index == item.id_transaccion) {\n\n                    Vue.set(self.data, 'desglosar', value);\n                    Vue.set(self.data, 'desglosar_descripcion', value.descripcion);\n                } else {\n                    todos.concat(value.transacciones);\n                }\n            });\n\n            if (todos.length > 0) {\n                Vue.set(self.data, 'desglosar', todos);\n            }\n        },\n        mostrar_items: function mostrar_items(id_transaccion, id_concepto) {\n            var self = this;\n\n            swal({\n                title: \"Mostrar items\",\n                text: \"¿Estás seguro/a de querer mostrar los items para esta transacción? Se abrirá una nueva pantalla\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                window.location.href = self.url_solicitar_reclasificacion_index + '/items/' + id_concepto + '/' + id_transaccion;\n            }).catch(swal.noop);\n        }\n    },\n    directives: {}\n});\n\n},{}],26:[function(require,module,exports){\n'use strict';\n\nVue.component('solicitar_reclasificacion-items', {\n    props: ['url_solicitar_reclasificacion_index', 'id_transaccion', 'id_concepto_antiguo', 'items', 'max_niveles', 'filtros', 'operadores'],\n    data: function data() {\n        return {\n            'data': {\n                'items': this.items,\n                'filtros': this.filtros,\n                'operadores': this.operadores,\n                'agrega': {\n                    'nivel': '',\n                    'operador': '',\n                    'texto': ''\n                },\n                'resultados': [],\n                'subtotal': 0,\n                'subimporte': 0,\n                'total_resultados': 0,\n                'temp_index': false,\n                'id_concepto_antiguo': false\n            }\n        };\n    },\n    computed: {\n        niveles: function niveles() {\n            var self = this,\n                niveles = [],\n                paso = 1;\n\n            for (paso; paso <= self.max_niveles; paso++) {\n                niveles.push({ numero: paso, nombre: \"Nivel \" + paso });\n            }\n\n            return niveles;\n        },\n        niveles_n: function niveles_n() {\n            var result = 0;\n            this.data.resultados.forEach(function (t) {\n                var cont = Object.keys(t).filter(function (t2) {\n                    return t[t2] != null;\n                });\n                if (cont.length - 4 > result) {\n                    result = cont.length - 4;\n                }\n            });\n\n            return result;\n        }\n    },\n    methods: {\n        agregar_filtro: function agregar_filtro() {\n            var self = this,\n                vacios = [],\n                temp = [];\n\n            // Los campos  no puedene star vacios\n            $.each(self.data.agrega, function (index, value) {\n                if (value === \"\") {\n                    vacios.push(index);\n                }\n            });\n\n            // Manda error si están vacios\n            if (vacios.length > 0) {\n                return swal({\n                    type: 'warning',\n                    title: 'Los siguientes campos no pueden estar vacios:',\n                    html: '<ul class=\"list-group\"><li class=\"list-group-item list-group-item-danger\">' + vacios.join(\"<li class=\\\"list-group-item list-group-item-danger\\\">\") + '</ul>'\n                });\n            }\n\n            self.data.filtros.push(self.data.agrega);\n        },\n        buscar: function buscar() {\n            var self = this,\n                str = { 'data': JSON.stringify(self.data.filtros) },\n                total_resultados = 0;\n\n            Vue.set(self.data, 'total_resultados', 0);\n\n            if (self.data.filtros.length == 0) {\n                return swal({\n                    type: 'warning',\n                    title: 'Agrega un filtro',\n                    html: 'Por favor agrega un filtro antes de buscar'\n                });\n            }\n\n            $.ajax({\n                type: 'GET',\n                url: self.url_solicitar_reclasificacion_index + '/find',\n                data: str,\n                beforeSend: function beforeSend() {},\n                success: function success(data, textStatus, xhr) {\n\n                    if (data.data.resultados.length > 0) {\n                        $.each(data.data.resultados, function (key, value) {\n                            total_resultados = total_resultados + parseInt(value.total);\n                        });\n\n                        Vue.set(self.data, 'total_resultados', parseInt(total_resultados).formatMoney(2, '.', ','));\n                        Vue.set(self.data, 'resultados', data.data.resultados);\n                        swal({\n                            type: 'success',\n                            title: '',\n                            html: 'Se encontraron resultados'\n                        });\n                    } else {\n                        swal({\n                            type: 'warning',\n                            title: '',\n                            html: 'No se encontraron resultados'\n                        });\n                    }\n                },\n                complete: function complete() {}\n            });\n        },\n        confirm_eliminar: function confirm_eliminar(index, tipo) {\n            var self = this;\n            swal({\n                title: \"Eliminar \" + tipo,\n                text: \"¿Estás seguro/a de que deseas eliminar este \" + tipo + \"?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                if (tipo == \"resultado\") {\n                    self.eliminar_resultado(index);\n                } else if (tipo == \"filtro\") {\n                    self.eliminar_filtro(index);\n                }\n            }).catch(swal.noop);\n        },\n        eliminar_resultado: function eliminar_resultado(index) {\n            var self = this;\n\n            self.data.resultados.splice(index, 1);\n        },\n        eliminar_filtro: function eliminar_filtro(index) {\n            var self = this;\n\n            self.data.filtros.splice(index, 1);\n\n            if (self.data.filtros.length == 0) {\n                self.reset_agregar();\n            }\n        },\n        reset_agregar: function reset_agregar() {\n            var self = this;\n\n            Vue.set(self.data, 'agrega', {\n                'nivel': '',\n                'operador': '',\n                'texto': ''\n            });\n\n            self.active_item();\n            Vue.set(self.data, 'resultados', []);\n            Vue.set(self.data, 'filtros', []);\n            Vue.set(self.data, 'total_resultados', 0);\n            Vue.set(self.data, 'id_concepto_antiguo', false);\n        },\n        active_item: function active_item() {\n            var self = this;\n\n            $('.items').each(function () {\n                var _this = $(this);\n\n                _this.removeClass('bg-navy disabled');\n\n                if (self.data.temp_index !== false && _this.hasClass('item_' + self.data.temp_index)) {\n                    $('.item_' + self.data.temp_index).removeClass('items item_' + self.data.temp_index).addClass('bg-navy disabled items item_' + self.data.temp_index);\n                }\n            });\n        },\n        open_modal_agregar: function open_modal_agregar(item, index) {\n            var self = this;\n\n            Vue.set(self.data, 'temp_index', index);\n            Vue.set(self.data, 'id_concepto_antiguo', item.id_concepto);\n\n            $('#agregar_filtro_modal').modal('show');\n            $('#nivel').focus();\n\n            self.active_item();\n        },\n        close_modal_agregar: function close_modal_agregar() {\n            var self = this;\n\n            $('#agregar_filtro_modal').modal('hide');\n\n            self.reset_agregar();\n        },\n        aplicar: function aplicar(item) {\n            var self = this;\n\n            Vue.set(self.data.items[self.data.temp_index], 'destino_final', item['filtro' + self.niveles_n]);\n            Vue.set(self.data.items[self.data.temp_index], 'id_concepto_nuevo', item['id_concepto']);\n\n            this.close_modal_agregar();\n        },\n        confirm_solicitar: function confirm_solicitar(item) {\n            var self = this;\n\n            // Se debe de haber seleccionado un nuevo concepto\n            if (item.destino_final == undefined) {\n                return swal({\n                    type: 'warning',\n                    title: 'Agrega un nuevo concepto',\n                    html: 'Por favor agrega un nuevo concepto antes de solicitar'\n                });\n            }\n\n            swal({\n                title: \"Aplicar concepto\",\n                text: \"¿Estás seguro/a de que deseas aplicar el concepto \" + item.descripcion + \" a \" + item.destino_final + \"?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.solicitar(item);\n            }).catch(swal.noop);\n        },\n        solicitar: function solicitar(item) {\n            var self = this;\n\n            $.ajax({\n                type: 'POST',\n                url: self.url_solicitar_reclasificacion_index,\n                data: {\n                    'id_concepto_nuevo': item.id_concepto_nuevo,\n                    'id_concepto': item.id_concepto\n                },\n                beforeSend: function beforeSend() {},\n                success: function success(data, textStatus, xhr) {\n                    console.log(data);\n                    swal({\n                        type: 'success',\n                        title: '',\n                        html: 'Solicitud elaborada con éxito'\n                    });\n                },\n                complete: function complete() {}\n            });\n        }\n    },\n    directives: {}\n});\n\n},{}],27:[function(require,module,exports){\n'use strict';\n\nVue.component('control_presupuesto-index', {\n    props: ['max_niveles', 'operadores'],\n    data: function data() {\n        return {\n            conceptos: [],\n            filtros: [],\n            form: {\n                filtro: {\n                    nivel: '',\n                    operador: '',\n                    texto: ''\n                }\n            },\n            cargando: false\n        };\n    },\n    computed: {\n        niveles: function niveles() {\n            var niveles = [],\n                paso = 1;\n            for (paso; paso <= this.max_niveles; paso++) {\n                niveles.push({ numero: paso, nombre: \"Nivel \" + paso });\n            }\n            return niveles;\n        }\n    },\n    mounted: function mounted() {\n        var self = this;\n        $('#conceptos_table').DataTable({\n            \"processing\": true,\n            \"serverSide\": true,\n            \"ordering\": false,\n            \"ajax\": {\n                \"url\": App.host + '/conceptos/getPaths',\n                \"type\": \"POST\",\n                \"beforeSend\": function beforeSend() {\n                    self.cargando = true;\n                },\n                \"data\": function data(d) {\n                    d.filtros = self.filtros;\n                },\n                \"complete\": function complete() {\n                    self.cargando = false;\n                },\n                \"dataSrc\": function dataSrc(json) {\n                    for (var i = 0; i < json.data.length; i++) {\n                        json.data[i].monto_presupuestado = '$' + parseInt(json.data[i].monto_presupuestado).formatMoney(2, ',', '.');\n                        json.data[i].monto = '$' + parseInt(json.data[i].monto).formatMoney(2, ',', '.');\n                        json.data[i].precio_unitario = '$' + parseInt(json.data[i].precio_unitario).formatMoney(2, ',', '.');\n                    }\n                    return json.data;\n                }\n            },\n            \"columns\": [{ data: 'filtro1' }, { data: 'filtro2' }, { data: 'filtro3' }, { data: 'filtro4' }, { data: 'filtro5' }, { data: 'filtro6' }, { data: 'filtro7' }, { data: 'filtro8' }, { data: 'filtro9' }, { data: 'filtro10' }, { data: 'filtro11' }, { data: 'unidad' }, { data: 'cantidad_presupuestada', className: 'text-right' }, { data: 'precio_unitario', className: 'text-right' }, { data: 'monto', className: 'text-right' }, { data: 'monto_presupuestado', className: 'text-right' }],\n            language: {\n                \"sProcessing\": \"Procesando...\",\n                \"sLengthMenu\": \"Mostrar _MENU_ registros\",\n                \"sZeroRecords\": \"No se encontraron resultados\",\n                \"sEmptyTable\": \"Ningún dato disponible en esta tabla\",\n                \"sInfo\": \"Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros\",\n                \"sInfoEmpty\": \"Mostrando registros del 0 al 0 de un total de 0 registros\",\n                \"sInfoFiltered\": \"(filtrado de un total de _MAX_ registros)\",\n                \"sInfoPostFix\": \"\",\n                \"sSearch\": \"Buscar:\",\n                \"sUrl\": \"\",\n                \"sInfoThousands\": \",\",\n                \"sLoadingRecords\": \"Cargando...\",\n                \"oPaginate\": {\n                    \"sFirst\": \"Primero\",\n                    \"sLast\": \"Último\",\n                    \"sNext\": \"Siguiente\",\n                    \"sPrevious\": \"Anterior\"\n                },\n                \"oAria\": {\n                    \"sSortAscending\": \": Activar para ordenar la columna de manera ascendente\",\n                    \"sSortDescending\": \": Activar para ordenar la columna de manera descendente\"\n                }\n            }\n        });\n    },\n    methods: {\n        set_filtro: function set_filtro() {\n            var nivel = this.form.filtro.nivel;\n            var result = this.filtros.filter(function (filtro) {\n                return filtro.nivel == nivel;\n            });\n\n            if (result.length) {\n                result[0].operadores.push({\n                    sql: this.form.filtro.operador.replace('{texto}', this.form.filtro.texto),\n                    operador: this.operadores[this.form.filtro.operador],\n                    texto: this.form.filtro.texto\n                });\n            } else {\n                this.filtros.push({\n                    nivel: this.form.filtro.nivel,\n                    operadores: [{\n                        sql: this.form.filtro.operador.replace('{texto}', this.form.filtro.texto),\n                        operador: this.operadores[this.form.filtro.operador],\n                        texto: this.form.filtro.texto\n                    }]\n                });\n            }\n\n            this.close_modal();\n        },\n\n        close_modal: function close_modal() {\n            $('#agregar_filtro_modal').modal('hide');\n            Vue.set(this.form, 'filtro', { nivel: '', operador: '', texto: '' });\n        },\n\n        eliminar: function eliminar(filtro, operador) {\n            Vue.delete(filtro.operadores, filtro.operadores.indexOf(operador));\n            if (!filtro.operadores.length) {\n                Vue.delete(this.filtros, this.filtros.indexOf(filtro));\n            }\n\n            if (!this.filtros.length) {\n                var table = $('#conceptos_table').DataTable();\n                table.ajax.reload();\n            }\n        },\n\n        get_conceptos: function get_conceptos() {\n            var table = $('#conceptos_table').DataTable();\n            table.ajax.reload();\n        }\n    }\n});\n\n},{}],28:[function(require,module,exports){\n'use strict';\n\nVue.component('comprobante-fondo-fijo-create', {\n    props: ['url_comprobante_fondo_fijo_create'],\n\n    data: function data() {\n        return {\n            'form': {\n                'comprobante': {\n                    'id_referente': '',\n                    'referencia': '',\n                    'cumplimiento': '',\n                    'fecha': '',\n                    'id_naturaleza': '',\n                    'id_concepto': '',\n                    'id_transaccion': '',\n                    'observaciones': ''\n                },\n                'items': [],\n                'total': '',\n                'subtotal': '',\n                'iva': '',\n                'cambio_iva': false\n            },\n            current_item: {},\n            guardando: false\n        };\n    },\n\n    computed: {\n\n        total: function total() {\n\n            var self = this;\n            var impuesto = 0;\n            if (self.form.iva > 0) {\n                impuesto = parseFloat(self.form.iva);\n            }\n\n            var subtotal = parseFloat(this.subtotal);\n            var total = impuesto + subtotal;\n\n            if (total > 0) {\n                self.form.total = total.toFixed(2);\n                total = total.toFixed(2);\n\n                return total;\n            } else {\n                return 0;\n            }\n        },\n        subtotal: function subtotal() {\n            var self = this;\n            var total = 0;\n\n            if (self.form.comprobante.id_naturaleza == 0) {\n                if (this.form.items) {\n                    this.form.items.forEach(function (item) {\n                        total += parseFloat(item.importe);\n                    });\n                }\n            } else {\n                if (this.form.items) {\n                    this.form.items.forEach(function (item) {\n                        total += parseFloat(item.cantidad * item.precio_unitario);\n                    });\n                }\n            }\n\n            if (total > 0) {\n                total = total.toFixed(2);\n                return parseFloat(total);\n            } else {\n                return 0;\n            }\n        }\n\n    },\n\n    mounted: function mounted() {\n        var self = this;\n        var jstree = \"\";\n        var jstree2 = \"\";\n        var auxiliar = 0;\n\n        $('#concepto_select').on('select2:select', function () {\n\n            if (auxiliar == 1) {\n                jstree.destroy();\n                jstree2.destroy();\n            }\n            carga_arbol();\n            $('#id_concepto').val($('#concepto_select option:selected').data().data.id);\n            self.form.comprobante.id_concepto = $('#concepto_select option:selected').data().data.id;\n            $.each(self.form.items, function (key, item) {\n                item.destino = '';\n            });\n        });\n\n        $(\"#cumplimiento\").datepicker().on(\"changeDate\", function () {\n            Vue.set(self.form.comprobante, 'cumplimiento', $('#cumplimiento').val());\n        });\n\n        $(\"#fecha\").datepicker().on(\"changeDate\", function () {\n            Vue.set(self.form.comprobante, 'fecha', $('#fecha').val());\n        });\n\n        function carga_arbol() {\n            // JsTree Configuration\n            auxiliar = 1;\n            var jstreeConf = {\n                'core': {\n                    'multiple': false,\n                    'data': {\n                        \"url\": function url(node) {\n\n                            var conceptos = \"\";\n                            var materiales = \"\";\n\n                            if (node.id === \"#\") {\n                                return App.host + '/conceptos/' + $('#id_concepto').val() + '/jstree';\n                            }\n\n                            return App.host + '/conceptos/' + node.id + '/jstree';\n                        },\n                        \"data\": function data(node) {\n                            return {\n                                \"id\": node.id\n                            };\n                        }\n                    }\n                },\n                'types': {\n                    'default': {\n                        'icon': 'fa fa-folder-o text-success'\n                    },\n                    'medible': {\n                        'icon': 'fa fa-file-text'\n                    },\n                    'material': {\n                        'icon': 'fa fa-briefcase'\n                    },\n                    'opened': {\n                        'icon': 'fa fa-folder-open-o text-success'\n                    },\n                    'inactivo': {\n                        'icon': 'fa fa-exclamation-triangle'\n                    }\n                },\n                'plugins': ['types']\n            };\n\n            $('#jstree').on(\"after_open.jstree\", function (e, data) {\n                if (data.instance.get_type(data.node) == 'default') {\n                    data.instance.set_type(data.node, 'opened');\n                }\n            }).on(\"after_close.jstree\", function (e, data) {\n                if (data.instance.get_type(data.node) == 'opened') {\n                    data.instance.set_type(data.node, 'default');\n                }\n                estilos_nodos();\n            });\n\n            /////////Arbol Materiales\n\n            // JsTree Configuration\n            var jstreeConfM = {\n                'core': {\n                    'multiple': false,\n                    'data': {\n                        \"url\": function url(node) {\n                            if (node.id === \"#\") {\n                                return App.host + '/almacen/jstree';\n                            }\n                            return App.host + '/almacen/' + node.id + '/jstree';\n                        },\n                        \"data\": function data(node) {\n                            return {\n                                \"id\": node.id\n                            };\n                        }\n                    }\n                },\n                'types': {\n                    'folder': {\n                        'icon': 'fa fa-folder-o text-success'\n                    },\n                    'almacen': {\n                        'icon': 'fa fa-briefcase'\n                    },\n                    'inactivo': {\n                        'icon': 'fa fa-exclamation-triangle'\n                    }\n\n                },\n                'plugins': ['types']\n            };\n\n            $('#jstreeM').on(\"select_node.jstree\", function (e, data) {\n                var jstreeD = $('#jstree').jstree(true);\n                var node = jstreeD.get_selected(true)[0];\n                $('#jstree').jstree(true).deselect_node(node);\n                if (data.node.original.type == 'concepto' || data.node.original.type == 'inactivo') {\n                    $('#jstreeM').jstree(true).deselect_node(data.node);\n                }\n            });\n\n            $('#jstree').on(\"select_node.jstree\", function (e, data) {\n\n                var jstreeM = $('#jstreeM').jstree(true);\n                var node = jstreeM.get_selected(true)[0];\n                $('#jstreeM').jstree(true).deselect_node(node);\n\n                if (data.node.original.type == 'concepto' || data.node.original.type == 'inactivo') {\n                    $('#jstree').jstree(true).deselect_node(data.node);\n                }\n            });\n\n            $('#jstreeM').on(\"after_open.jstree\", function (e, data) {\n                if (data.instance.get_type(data.node) == 'default') {\n                    data.instance.set_type(data.node, 'opened');\n                }\n                estilos_nodos();\n            }).on(\"after_close.jstree\", function (e, data) {\n                if (data.instance.get_type(data.node) == 'opened') {\n                    data.instance.set_type(data.node, 'default');\n                }\n            });\n\n            $('#jstreeM').on(\"loaded.jstree\", function (e, data) {\n                estilos_nodos();\n            });\n\n            $('#jstree').on(\"loaded.jstree\", function (e, data) {\n                estilos_nodos();\n            });\n\n            // On hide the BS modal, get the selected node and destroy the jstree\n            $('#myModal').on('shown.bs.modal', function (e) {\n                $('#jstreeM').jstree(jstreeConfM);\n                $('#jstree').jstree(jstreeConf);\n            }).on('hidden.bs.modal', function (e) {\n\n                jstree = $('#jstree').jstree(true);\n                var node = jstree.get_selected(true)[0];\n                jstree2 = $('#jstreeM').jstree(true);\n                var node2 = jstree2.get_selected(true)[0];\n\n                if (node) {\n                    self.current_item.id_concepto = node.id;\n                    self.current_item.tipo_concepto = \"\";\n                    self.current_item.destino = node.text;\n                } else {\n\n                    if (node2) {\n                        if (node2.type == 'almacen') self.current_item.id_concepto = node2.id;\n                        self.current_item.tipo_concepto = node2.type;\n                        self.current_item.destino = node2.text;\n                    }\n                }\n            });\n        }\n        function estilos_nodos() {\n            $(\".fa-folder-o\").parent(\"a\").css(\"color\", \"gray\");\n            $(\".fa-folder-o\").parent(\"a\").css(\"cursor\", \"not-allowed\");\n            $(\".fa-folder-open-o\").parent(\"a\").css(\"color\", \"gray\");\n            $(\".fa-folder-open-o\").parent(\"a\").css(\"cursor\", \"not-allowed\");\n            $(\".fa-exclamation-triangle\").parent(\"a\").css(\"color\", \"gray\");\n            $(\".fa-exclamation-triangle\").parent(\"a\").css(\"text-decoration\", \"line-through\");\n            $(\".fa-exclamation-triangle\").parent(\"a\").css(\"cursor\", \"not-allowed\");\n        }\n    },\n\n    directives: {\n        datepicker: {\n            inserted: function inserted(el) {\n                $(el).datepicker({\n                    autoclose: true,\n                    language: 'es',\n                    todayHighlight: true,\n                    clearBtn: true,\n                    format: 'yyyy-mm-dd'\n                });\n            }\n        },\n        select2: {\n            inserted: function inserted(el) {\n                $(el).select2({\n                    width: '100%',\n                    ajax: {\n                        url: App.host + '/sistema_contable/concepto/getBy',\n                        dataType: 'json',\n                        delay: 500,\n                        data: function data(params) {\n                            return {\n                                attribute: 'descripcion',\n                                operator: 'like',\n                                value: '%' + params.term + '%'\n                            };\n                        },\n                        processResults: function processResults(data) {\n                            return {\n                                results: $.map(data.data.conceptos, function (item) {\n                                    return {\n                                        text: item.path,\n                                        id: item.id_concepto\n                                    };\n                                })\n                            };\n                        },\n                        error: function error(_error) {},\n                        cache: true\n                    },\n                    escapeMarkup: function escapeMarkup(markup) {\n                        return markup;\n                    }, // let our custom formatter work\n                    minimumInputLength: 1\n                });\n            }\n        },\n        select_material: {\n\n            inserted: function inserted(el) {\n                $(el).select2({\n                    width: '100%',\n                    ajax: {\n                        url: App.host + '/finanzas/material/getBy',\n                        dataType: 'json',\n                        delay: 500,\n                        data: function data(params) {\n                            return {\n                                attribute: 'descripcion',\n                                operator: 'like',\n                                value: '%' + params.term + '%'\n                            };\n                        },\n                        processResults: function processResults(data) {\n                            return {\n                                results: $.map(data.data.materiales, function (item) {\n                                    return {\n                                        text: item.descripcion,\n                                        id: item.id_material,\n                                        unidad: item.unidad\n                                    };\n                                })\n                            };\n                        },\n                        error: function error(_error2) {},\n                        cache: true\n                    },\n                    escapeMarkup: function escapeMarkup(markup) {\n                        return markup;\n                    }, // let our custom formatter work\n                    minimumInputLength: 1\n                }).on('select2:select', function () {\n                    var id = el.id;\n\n                    $('#I' + id).val($('#' + id + ' option:selected').data().data.id);\n                    $('#L' + id).text($('#' + id + ' option:selected').data().data.unidad);\n                    $('#UL' + id).text($('#' + id + ' option:selected').data().data.unidad);\n\n                    $('#btn' + id).click();\n                });\n            }\n        }\n    },\n    methods: {\n\n        validateForm: function validateForm(scope, funcion) {\n            var _this = this;\n\n            this.$validator.validateAll(scope).then(function () {\n                if (funcion == 'confirm_save_fondo') {\n                    _this.confirm_add_movimiento();\n                }\n            }).catch(function () {\n                swal({\n                    type: 'warning',\n                    title: 'Advertencia',\n                    text: 'Por favor corrija los errores del formulario'\n                });\n            });\n        },\n\n        confirm_add_movimiento: function confirm_add_movimiento() {\n            var self = this;\n            swal({\n                title: \"Guardar Comprobante de Fondo Fijo\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.save_comprobante_fondo_fijo();\n            }).catch(swal.noop);\n        },\n\n        add_item: function add_item() {\n            var self = this;\n            self.form.items.push({\n                'id_transaccion': '',\n                'id_concepto': '',\n                'id_material': '',\n                'cantidad': '',\n                'precio_unitario': '',\n                'importe': '',\n                'destino': '',\n                'unidad': '',\n                'gastos_varios': '',\n                'tipo_concepto': ''\n            });\n        },\n\n        item_material: function item_material(id, item) {\n            var idELemnt = id + 1;\n            this.current_item = item;\n            this.current_item.id_material = $('#I' + idELemnt).val();\n        },\n\n        curent_item: function curent_item(item) {\n            this.current_item = item;\n        },\n\n        confirm_remove_item: function confirm_remove_item(index) {\n            var self = this;\n            swal({\n                title: \"Quitar Item\",\n                text: \"¿Estás seguro de que deseas quitar el Item del comprobante?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.remove_item(index);\n            }).catch(swal.noop);\n        },\n        remove_item: function remove_item(index) {\n            Vue.delete(this.form.items, index);\n        },\n        habilitaIva: function habilitaIva() {\n            var self = this;\n            self.form.iva = self.subtotal * .16;\n        },\n        save_comprobante_fondo_fijo: function save_comprobante_fondo_fijo() {\n            var self = this;\n            var url = this.url_comprobante_fondo_fijo_create;\n            var data = self.form;\n            console.log(url);\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: data,\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    swal({\n                        title: '¡Correcto!',\n                        html: 'Comprobante de Fondo Fijo guardado correctamente',\n                        type: 'success',\n                        confirmButtonText: \"Ok\",\n                        closeOnConfirm: false\n                    }).catch(swal.noop);\n                    window.location = App.host + \"/finanzas/comprobante_fondo_fijo/\" + data.data.comprobante.id_transaccion;\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        }\n\n    }\n});\n\n},{}],29:[function(require,module,exports){\n'use strict';\n\nVue.component('comprobante-fondo-fijo-edit', {\n    props: ['url_comprobante_fondo_fijo_update', 'url_comprobante_fondo_fijo_show', 'comprobante_items', 'comprobante'],\n\n    data: function data() {\n        return {\n            'form': {\n                'comprobante': this.comprobante,\n                'items': this.comprobante_items,\n                'total': '',\n                'subtotal': '',\n                'iva': this.comprobante.impuesto,\n                'cambio_iva': false\n            },\n            current_item: {},\n            guardando: false\n        };\n    },\n\n    computed: {\n\n        total: function total() {\n            var self = this;\n            var impuesto = parseFloat(self.form.iva);\n            var subtotal = parseFloat(this.subtotal);\n            var total = impuesto + subtotal;\n            self.form.total = total.toFixed(2);\n\n            total = total.toFixed(2);\n            return total;\n        },\n        subtotal: function subtotal() {\n            var self = this;\n            var total = 0;\n            if (this.form.items) {\n                this.form.items.forEach(function (item) {\n\n                    if (self.form.comprobante.id_naturaleza == 1) {\n                        total += parseFloat(item.cantidad * item.precio_unitario);\n                    } else {\n                        total += parseFloat(item.importe);\n                    }\n                });\n            }\n            total = total.toFixed(2);\n            return parseFloat(total);\n        }\n\n    },\n\n    mounted: function mounted() {\n        var self = this;\n        var jstree = \"\";\n        var jstree2 = \"\";\n\n        $('#id_concepto').val(self.form.comprobante.id_concepto);\n        $.each(self.form.items, function (key, item) {\n            $('#I' + (key + 1)).val(item.id_material);\n            $('#L' + (key + 1)).text(item.unidad);\n        });\n\n        $('#concepto_select').on('select2:select', function () {\n            jstree.destroy();\n            jstree2.destroy();\n            carga_arbol();\n\n            $('#id_concepto').val($('#concepto_select option:selected').data().data.id);\n            self.form.comprobante.id_concepto = $('#concepto_select option:selected').data().data.id;\n            $.each(self.form.items, function (key, item) {\n                item.destino = '';\n            });\n        });\n\n        $(\"#cumplimiento\").datepicker().on(\"changeDate\", function () {\n            Vue.set(self.form.comprobante, 'cumplimiento', $('#cumplimiento').val());\n        });\n\n        $(\"#fecha\").datepicker().on(\"changeDate\", function () {\n            Vue.set(self.form.comprobante, 'fecha', $('#fecha').val());\n        });\n\n        function carga_arbol() {\n            // JsTree Configuration\n            var jstreeConf = {\n                'core': {\n                    'multiple': false,\n                    'data': {\n                        \"url\": function url(node) {\n\n                            var conceptos = \"\";\n                            var materiales = \"\";\n\n                            if (node.id === \"#\") {\n                                return App.host + '/conceptos/' + $('#id_concepto').val() + '/jstree';\n                            }\n\n                            return App.host + '/conceptos/' + node.id + '/jstree';\n                        },\n                        \"data\": function data(node) {\n                            return {\n                                \"id\": node.id\n                            };\n                        }\n                    }\n                },\n                'types': {\n                    'default': {\n                        'icon': 'fa fa-folder-o text-success'\n                    },\n                    'medible': {\n                        'icon': 'fa fa-file-text'\n                    },\n                    'material': {\n                        'icon': 'fa fa-briefcase'\n                    },\n                    'opened': {\n                        'icon': 'fa fa-folder-open-o text-success'\n                    },\n                    'inactivo': {\n                        'icon': 'fa fa-exclamation-triangle'\n                    }\n                },\n                'plugins': ['types']\n            };\n\n            $('#jstreeM').on(\"select_node.jstree\", function (e, data) {\n                if (data.node.original.type == 'folder') {\n                    $('#jstreeM').jstree(true).deselect_node(data.node);\n                }\n            });\n\n            $('#jstree').on(\"after_open.jstree\", function (e, data) {\n                if (data.instance.get_type(data.node) == 'default') {\n                    data.instance.set_type(data.node, 'opened');\n                }\n            }).on(\"after_close.jstree\", function (e, data) {\n                if (data.instance.get_type(data.node) == 'opened') {\n                    data.instance.set_type(data.node, 'default');\n                }\n            });\n\n            /////////Arbol Materiales\n\n            // JsTree Configuration\n            var jstreeConfM = {\n                'core': {\n                    'multiple': false,\n                    'data': {\n                        \"url\": function url(node) {\n                            if (node.id === \"#\") {\n                                return App.host + '/almacen/jstree';\n                            }\n                            return App.host + '/almacen/' + node.id + '/jstree';\n                        },\n                        \"data\": function data(node) {\n                            return {\n                                \"id\": node.id\n                            };\n                        }\n                    }\n                },\n                'types': {\n                    'folder': {\n                        'icon': 'fa fa-folder-o text-success'\n                    },\n                    'almacen': {\n                        'icon': 'fa fa-briefcase'\n                    },\n                    'inactivo': {\n                        'icon': 'fa fa-exclamation-triangle'\n                    }\n\n                },\n                'plugins': ['types']\n            };\n\n            $('#jstreeM').on(\"select_node.jstree\", function (e, data) {\n                var jstreeD = $('#jstree').jstree(true);\n                var node = jstreeD.get_selected(true)[0];\n                $('#jstree').jstree(true).deselect_node(node);\n                if (data.node.original.type == 'concepto' || data.node.original.type == 'inactivo') {\n                    $('#jstreeM').jstree(true).deselect_node(data.node);\n                }\n            });\n\n            $('#jstree').on(\"select_node.jstree\", function (e, data) {\n\n                var jstreeM = $('#jstreeM').jstree(true);\n                var node = jstreeM.get_selected(true)[0];\n                $('#jstreeM').jstree(true).deselect_node(node);\n\n                if (data.node.original.type == 'concepto' || data.node.original.type == 'inactivo') {\n                    $('#jstree').jstree(true).deselect_node(data.node);\n                }\n            });\n            $('#jstree').on(\"after_open.jstree\", function (e, data) {\n                if (data.instance.get_type(data.node) == 'default') {\n                    data.instance.set_type(data.node, 'opened');\n                }\n                estilos_nodos();\n            }).on(\"after_close.jstree\", function (e, data) {\n                if (data.instance.get_type(data.node) == 'opened') {\n                    data.instance.set_type(data.node, 'default');\n                }\n            });\n\n            $('#jstreeM').on(\"loaded.jstree\", function (e, data) {\n                estilos_nodos();\n            });\n\n            $('#jstree').on(\"loaded.jstree\", function (e, data) {\n                estilos_nodos();\n            });\n\n            $('#jstreeM').on(\"after_open.jstree\", function (e, data) {\n                if (data.instance.get_type(data.node) == 'default') {\n                    data.instance.set_type(data.node, 'opened');\n                }\n                estilos_nodos();\n            }).on(\"after_close.jstree\", function (e, data) {\n                if (data.instance.get_type(data.node) == 'opened') {\n                    data.instance.set_type(data.node, 'default');\n                }\n            });\n\n            // On hide the BS modal, get the selected node and destroy the jstree\n            $('#myModal').on('shown.bs.modal', function (e) {\n                $('#jstreeM').jstree(jstreeConfM);\n                $('#jstree').jstree(jstreeConf);\n            }).on('hidden.bs.modal', function (e) {\n\n                jstree = $('#jstree').jstree(true);\n                var node = jstree.get_selected(true)[0];\n                jstree2 = $('#jstreeM').jstree(true);\n                var node2 = jstree2.get_selected(true)[0];\n\n                if (node) {\n                    self.current_item.id_concepto = node.id;\n                    self.current_item.tipo_concepto = \"\";\n                    self.current_item.destino = node.text;\n                } else {\n                    if (node2) {\n                        if (node2.type == 'almacen') self.current_item.id_concepto = node2.id;\n                        self.current_item.tipo_concepto = node2.type;\n                        self.current_item.destino = node2.text;\n                    }\n                }\n                //   jstree.destroy();\n                //  jstree2.destroy();\n            });\n        }\n\n        function estilos_nodos() {\n            $(\".fa-folder-o\").parent(\"a\").css(\"color\", \"gray\");\n            $(\".fa-folder-o\").parent(\"a\").css(\"cursor\", \"not-allowed\");\n            $(\".fa-folder-open-o\").parent(\"a\").css(\"color\", \"gray\");\n            $(\".fa-folder-open-o\").parent(\"a\").css(\"cursor\", \"not-allowed\");\n            $(\".fa-exclamation-triangle\").parent(\"a\").css(\"color\", \"gray\");\n            $(\".fa-exclamation-triangle\").parent(\"a\").css(\"text-decoration\", \"line-through\");\n            $(\".fa-exclamation-triangle\").parent(\"a\").css(\"cursor\", \"not-allowed\");\n            $(\".fa-folder-o\").parent(\"a\").unbind(\"click\");\n        }\n        carga_arbol();\n    },\n\n    directives: {\n        datepicker: {\n            inserted: function inserted(el) {\n                $(el).datepicker({\n                    autoclose: true,\n                    language: 'es',\n                    todayHighlight: true,\n                    clearBtn: true,\n                    format: 'yyyy-mm-dd'\n                });\n            }\n        },\n        select2: {\n            inserted: function inserted(el) {\n                $(el).select2({\n                    width: '100%',\n                    ajax: {\n                        url: App.host + '/sistema_contable/concepto/getBy',\n                        dataType: 'json',\n                        delay: 500,\n                        data: function data(params) {\n                            return {\n                                attribute: 'descripcion',\n                                operator: 'like',\n                                value: '%' + params.term + '%'\n                            };\n                        },\n                        processResults: function processResults(data) {\n                            return {\n                                results: $.map(data.data.conceptos, function (item) {\n                                    return {\n                                        text: item.path,\n                                        id: item.id_concepto\n                                    };\n                                })\n                            };\n                        },\n                        error: function error(_error) {},\n                        cache: true\n                    },\n                    escapeMarkup: function escapeMarkup(markup) {\n                        return markup;\n                    }, // let our custom formatter work\n                    minimumInputLength: 1\n                });\n            }\n        },\n        select_material: {\n\n            inserted: function inserted(el) {\n                $(el).select2({\n                    width: '100%',\n                    ajax: {\n                        url: App.host + '/finanzas/material/getBy',\n                        dataType: 'json',\n                        delay: 500,\n                        data: function data(params) {\n                            return {\n                                attribute: 'descripcion',\n                                operator: 'like',\n                                value: '%' + params.term + '%'\n                            };\n                        },\n                        processResults: function processResults(data) {\n                            return {\n                                results: $.map(data.data.materiales, function (item) {\n                                    return {\n                                        text: item.descripcion,\n                                        id: item.id_material,\n                                        unidad: item.unidad\n                                    };\n                                })\n                            };\n                        },\n                        error: function error(_error2) {},\n                        cache: true\n                    },\n                    escapeMarkup: function escapeMarkup(markup) {\n                        return markup;\n                    }, // let our custom formatter work\n                    minimumInputLength: 1\n                }).on('select2:select', function () {\n                    var id = el.id;\n\n                    $('#I' + id).val($('#' + id + ' option:selected').data().data.id);\n                    $('#L' + id).text($('#' + id + ' option:selected').data().data.unidad);\n                    $('#UL' + id).text($('#' + id + ' option:selected').data().data.unidad);\n\n                    $('#btn' + id).click();\n                });\n            }\n        }\n    },\n    methods: {\n\n        validateForm: function validateForm(scope, funcion) {\n            var _this = this;\n\n            this.$validator.validateAll(scope).then(function () {\n                if (funcion == 'confirm_save_fondo') {\n                    _this.confirm_add_movimiento();\n                }\n            }).catch(function () {\n                swal({\n                    type: 'warning',\n                    title: 'Advertencia',\n                    text: 'Por favor corrija los errores del formulario'\n                });\n            });\n        },\n\n        confirm_add_movimiento: function confirm_add_movimiento() {\n            var self = this;\n            swal({\n                title: \"Actualizar Comprobante de Fondo Fijo\",\n                text: \"¿Estás seguro de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.save_comprobante_fondo_fijo();\n            }).catch(swal.noop);\n        },\n\n        add_item: function add_item() {\n            var self = this;\n            self.form.items.push({\n                'id_transaccion': '',\n                'id_concepto': '',\n                'id_material': '',\n                'cantidad': '',\n                'precio_unitario': '',\n                'importe': '',\n                'destino': '',\n                'unidad': '',\n\n                'gastos_varios': ''\n            });\n        },\n\n        item_material: function item_material(id, item) {\n            var idELemnt = id + 1;\n            this.current_item = item;\n            this.current_item.id_material = $('#I' + idELemnt).val();\n        },\n\n        curent_item: function curent_item(item) {\n            this.current_item = item;\n        },\n\n        habilitaIva: function habilitaIva() {\n            var self = this;\n            self.form.iva = self.subtotal * .16;\n        },\n        save_comprobante_fondo_fijo: function save_comprobante_fondo_fijo() {\n            var self = this;\n            var url = this.url_comprobante_fondo_fijo_update;\n            var data = self.form;\n            data['_method'] = 'PATCH';\n\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: data,\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    swal({\n                        title: '¡Correcto!',\n                        html: 'Comprobante de Fondo Fijo actualizado correctamente',\n                        type: 'success',\n                        confirmButtonText: \"Ok\",\n                        closeOnConfirm: false\n                    }).catch(swal.noop);\n                    window.location = self.url_comprobante_fondo_fijo_show;\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        }\n\n    }\n});\n\n},{}],30:[function(require,module,exports){\n'use strict';\n\nVue.component('subcontratos-estimacion', {\n    props: ['subcontratos_url', 'estimaciones_url'],\n    data: function data() {\n        return {\n            'form': {\n                id_empresa: '',\n                id_subcontrato: '',\n                id_estimacion: ''\n            },\n            'empresas': [],\n            'subcontratos': [],\n            'estimaciones': [],\n            'cargando': false\n        };\n    },\n\n    methods: {\n        fetchSubcontratos: function fetchSubcontratos(id_empresa) {\n            var self = this;\n\n            $.ajax({\n                type: 'GET',\n                data: {\n                    attribute: 'id_empresa',\n                    operator: '=',\n                    value: id_empresa\n                },\n                url: self.subcontratos_url + '/getBy',\n                beforeSend: function beforeSend() {\n                    self.cargando = true;\n                },\n                success: function success(response) {\n                    self.subcontratos = response.data.subcontratos;\n                    self.estimaciones = [];\n\n                    Vue.set(self.form, 'id_subcontrato', '');\n                    Vue.set(self.form, 'id_estimacion', '');\n                },\n                complete: function complete() {\n                    self.cargando = false;\n                }\n            });\n        },\n\n        fetchEstimaciones: function fetchEstimaciones(id_subcontrato) {\n            var self = this;\n\n            $.ajax({\n                type: 'GET',\n                data: {\n                    attribute: 'id_antecedente',\n                    operator: '=',\n                    value: id_subcontrato\n                },\n                url: self.estimaciones_url + '/getBy',\n                beforeSend: function beforeSend() {\n                    self.cargando = true;\n                },\n                success: function success(response) {\n                    self.estimaciones = response.data.estimaciones;\n                    Vue.set(self.form, 'id_estimacion', '');\n                },\n                complete: function complete() {\n                    self.cargando = false;\n                }\n            });\n        },\n\n        pdf: function pdf(id_estimacion) {\n            var url = App.host + '/reportes/subcontratos/estimacion/' + id_estimacion;\n            $(\"#PDFModal .modal-body\").html('<iframe src=\"' + url + '\"  frameborder=\"0\" height=\"100%\" width=\"99.6%\">d</iframe>');\n            $(\"#PDFModal\").modal(\"show\");\n        }\n    }\n});\n\n},{}],31:[function(require,module,exports){\n'use strict';\n\nVue.component('movimientos_bancarios-index', {\n    props: ['url_movimientos_bancarios_index', 'cuentas', 'tipos', 'movimientos'],\n    data: function data() {\n        return {\n            'data': {\n                'cuentas': this.cuentas,\n                'tipos': this.tipos,\n                'movimientos': this.movimientos,\n                'ver': []\n            },\n            'form': {\n                'id_tipo_movimiento': '',\n                'estatus': '',\n                'id_cuenta': '',\n                'impuesto': '0',\n                'importe': '',\n                'observaciones': '',\n                'fecha': moment().format('YYYY-MM-DD'),\n                'cumplimiento': '',\n                'vencimiento': '',\n                'referencia': ''\n            },\n            'movimiento_edit': {\n                'id_movimiento_bancario': '',\n                'id_tipo_movimiento': '',\n                'estatus': '',\n                'id_cuenta': '',\n                'impuesto': 0,\n                'importe': 0,\n                'observaciones': '',\n                'fecha': '',\n                'cumplimiento': '',\n                'vencimiento': '',\n                'referencia': ''\n            },\n            'movimiento_ver': {\n                'id_movimiento_bancario': '',\n                'id_tipo_movimiento': '',\n                'estatus': '',\n                'id_cuenta': '',\n                'impuesto': 0,\n                'importe': 0,\n                'observaciones': '',\n                'fecha': '',\n                'cumplimiento': '',\n                'vencimiento': '',\n                'referencia': ''\n            },\n            'guardando': false\n        };\n    },\n    computed: {},\n    mounted: function mounted() {\n        var self = this;\n\n        $(\"#Cumplimiento\").datepicker().on(\"changeDate\", function () {\n            Vue.set(self.form, 'vencimiento', $('#Cumplimiento').val());\n            Vue.set(self.form, 'cumplimiento', $('#Cumplimiento').val());\n        });\n        $(\"#edit_cumplimiento\").datepicker().on(\"changeDate\", function () {\n            Vue.set(self.movimiento_edit, 'vencimiento', $('#edit_cumplimiento').val());\n            Vue.set(self.movimiento_edit, 'cumplimiento', $('#edit_cumplimiento').val());\n        });\n        $(\"#Fecha\").datepicker().on(\"changeDate\", function () {\n            var thisElement = $(this);\n\n            Vue.set(self.form, 'fecha', thisElement.val());\n            thisElement.datepicker('hide');\n            thisElement.blur();\n            self.$validator.validate('required', self.form.fecha);\n        });\n        $(\".fechas_edit\").datepicker().on(\"changeDate\", function () {\n            var thisElement = $(this);\n            var id = thisElement.attr('id').replace('edit_', '');\n\n            Vue.set(self.traspaso_edit, id, thisElement.val());\n        });\n    },\n    directives: {\n        datepicker: {\n            inserted: function inserted(el) {\n                $(el).datepicker({\n                    autoclose: true,\n                    language: 'es',\n                    todayHighlight: true,\n                    clearBtn: true,\n                    format: 'yyyy-mm-dd'\n                });\n            }\n        }\n    },\n    methods: {\n        datos_cuenta: function datos_cuenta(id) {\n            return this.cuentas[id];\n        },\n        modal_movimiento_ver: function modal_movimiento_ver(item) {\n            Vue.set(this.data, 'ver', item);\n            Vue.set(this.data.ver, 'tipo_texto', item.tipo.descripcion);\n            Vue.set(this.data.ver, 'importe', this.comma_format(item.importe));\n            Vue.set(this.data.ver, 'impuesto', this.comma_format(item.impuesto));\n            Vue.set(this.data.ver, 'cuenta_texto', item.cuenta.numero + ' ' + item.cuenta.abreviatura + ' (' + item.cuenta.empresa.razon_social + ')');\n            Vue.set(this.data.ver, 'referencia', item.movimiento_transaccion.transaccion.referencia);\n            Vue.set(this.data.ver, 'cumplimiento', this.trim_fecha(item.movimiento_transaccion.transaccion.cumplimiento));\n            Vue.set(this.data.ver, 'vencimiento', this.trim_fecha(item.movimiento_transaccion.transaccion.vencimiento));\n\n            $('#ver_movimiento_modal').modal('show');\n        },\n        close_modal_movimiento_ver: function close_modal_movimiento_ver() {\n\n            $('#ver_movimiento_modal').modal('hide');\n            Vue.set(this.data, 'ver', {});\n        },\n        confirm_guardar: function confirm_guardar() {\n            var self = this;\n            swal({\n                title: \"Guardar movimiento\",\n                text: \"¿Estás seguro/a de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.guardar();\n            }).catch(swal.noop);\n        },\n        guardar: function guardar() {\n            var self = this;\n\n            $.ajax({\n                type: 'POST',\n                url: self.url_movimientos_bancarios_index,\n                data: self.form,\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n                    if (typeof data.data.movimiento === 'string') {\n                        swal({\n                            type: 'warning',\n                            title: 'Error',\n                            html: data.data.movimiento\n                        });\n                    } else {\n                        self.data.movimientos.push(data.data.movimiento);\n                        swal({\n                            type: 'success',\n                            title: 'Correcto',\n                            html: 'Movimiento guardado correctamente'\n                        });\n                    }\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                    self.close_modal_movimiento();\n                }\n            });\n        },\n        modal_movimiento: function modal_movimiento() {\n            $('#movimiento_modal').modal('show');\n            $('#id_tipo_movimiento').focus();\n        },\n        close_modal_movimiento: function close_modal_movimiento() {\n            this.reset_form();\n            $('#movimiento_modal').modal('hide');\n        },\n        confirm_eliminar: function confirm_eliminar(id_movimiento_bancario) {\n            var self = this;\n            swal({\n                title: \"Eliminar movimiento\",\n                text: \"¿Estás seguro/a de que deseas eliminar este movimiento?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.eliminar(id_movimiento_bancario);\n            }).catch(swal.noop);\n        },\n        eliminar: function eliminar(id_movimiento_bancario) {\n            var self = this;\n            $.ajax({\n                type: 'GET',\n                url: self.url_movimientos_bancarios_index + '/' + id_movimiento_bancario,\n                beforeSend: function beforeSend() {},\n                success: function success(data, textStatus, xhr) {\n                    self.data.movimientos.forEach(function (movimiento) {\n                        if (movimiento.id_movimiento_bancario == data.data.id_movimiento_bancario) {\n                            self.data.movimientos.splice(self.data.movimientos.indexOf(movimiento), 1);\n                        }\n                    });\n\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        html: 'Movimiento eliminado'\n                    });\n                },\n                complete: function complete() {}\n            });\n        },\n        modal_editar: function modal_editar(movimiento) {\n            Vue.set(this.movimiento_edit, 'id_movimiento_bancario', movimiento.id_movimiento_bancario);\n            Vue.set(this.movimiento_edit, 'id_tipo_movimiento', movimiento.id_tipo_movimiento);\n            Vue.set(this.movimiento_edit, 'estatus', movimiento.estatus);\n            Vue.set(this.movimiento_edit, 'id_cuenta', movimiento.id_cuenta);\n            Vue.set(this.movimiento_edit, 'impuesto', movimiento.impuesto);\n            Vue.set(this.movimiento_edit, 'importe', movimiento.importe);\n            Vue.set(this.movimiento_edit, 'observaciones', movimiento.observaciones);\n            Vue.set(this.movimiento_edit, 'fecha', this.trim_fecha(movimiento.movimiento_transaccion.transaccion.fecha));\n            Vue.set(this.movimiento_edit, 'cumplimiento', this.trim_fecha(movimiento.movimiento_transaccion.transaccion.cumplimiento));\n            Vue.set(this.movimiento_edit, 'vencimiento', this.trim_fecha(movimiento.movimiento_transaccion.transaccion.vencimiento));\n            Vue.set(this.movimiento_edit, 'referencia', movimiento.movimiento_transaccion.transaccion.referencia);\n\n            this.validation_errors.clear('form_editar_movimiento');\n            $('#edit_movimiento_modal').modal('show');\n            $('#edit_id_cuenta').focus();\n        },\n        confirm_editar: function confirm_editar() {\n            var self = this;\n            swal({\n                title: \"Editar movimiento\",\n                text: \"¿Estás seguro/a de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.editar();\n            }).catch(swal.noop);\n        },\n        editar: function editar() {\n            var self = this;\n\n            self.movimiento_edit._method = 'PATCH';\n            $.ajax({\n                type: 'POST',\n                url: self.url_movimientos_bancarios_index + '/' + self.movimiento_edit.id_movimiento_bancario,\n                data: self.movimiento_edit,\n                beforeSend: function beforeSend() {},\n                success: function success(data, textStatus, xhr) {\n                    if (typeof data.data.movimiento === 'string') {\n                        swal({\n                            type: 'warning',\n                            title: 'Error',\n                            html: data.data.movimiento\n                        });\n                    } else {\n                        self.data.movimientos.forEach(function (movimiento) {\n                            if (movimiento.id_movimiento_bancario === data.data.movimiento.id_movimiento_bancario) {\n                                Vue.set(self.data.movimientos, self.data.movimientos.indexOf(movimiento), data.data.movimiento);\n                            }\n                        });\n                        swal({\n                            type: 'success',\n                            title: 'Correcto',\n                            html: 'movimiento guardado correctamente'\n                        });\n                    }\n\n                    self.close_edit_movimiento();\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n        close_edit_movimiento: function close_edit_movimiento() {\n            $('#edit_movimiento_modal').modal('hide');\n        },\n        validateForm: function validateForm(scope, funcion) {\n            self = this;\n            this.$validator.validateAll(scope).then(function () {\n                if (funcion === 'confirm_guardar') {\n                    self.confirm_guardar();\n                } else if (funcion === 'confirm_editar') {\n                    self.confirm_editar();\n                }\n            }).catch(function () {\n                swal({\n                    type: 'warning',\n                    title: 'Advertencia',\n                    text: 'Por favor corrija los errores del formulario'\n                });\n            });\n        },\n        trim_fecha: function trim_fecha(fecha) {\n            return fecha.substring(0, 10);\n        },\n        reset_form: function reset_form() {\n            Vue.set(this.form, 'id_tipo_movimiento', '');\n            Vue.set(this.form, 'estatus', '');\n            Vue.set(this.form, 'id_cuenta', '');\n            Vue.set(this.form, 'impuesto', '');\n            Vue.set(this.form, 'observaciones', '');\n            Vue.set(this.form, 'importe', '');\n            Vue.set(this.form, 'fecha', '');\n            Vue.set(this.form, 'cumplimiento', '');\n            Vue.set(this.form, 'vencimiento', '');\n            Vue.set(this.form, 'referencia', '');\n        },\n        total_edit: function total_edit() {\n            var importe = this.movimiento_edit.importe == null ? 0 : this.movimiento_edit.importe,\n                impuesto = this.movimiento_edit.impuesto == null ? 0 : this.movimiento_edit.impuesto;\n\n            return impuesto > 0 ? parseFloat(importe) + parseFloat(impuesto) : importe;\n        },\n        total_create: function total_create() {\n            var importe = this.form.importe == null ? 0 : this.form.importe,\n                impuesto = this.form.impuesto == null ? 0 : this.form.impuesto;\n\n            return impuesto > 0 ? parseFloat(importe) + parseFloat(impuesto) : importe;\n        },\n        total: function total(importe, impuesto) {\n            var importe = importe == null ? 0 : importe,\n                impuesto = impuesto == null ? 0 : impuesto;\n\n            return impuesto > 0 ? parseFloat(importe) + parseFloat(impuesto) : importe;\n        },\n        comma_format: function comma_format(number) {\n            var n = !isFinite(+number) ? 0 : +number,\n                decimals = 4,\n                prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),\n                sep = typeof thousands_sep === 'undefined' ? ',' : thousands_sep,\n                dec = typeof dec_point === 'undefined' ? '.' : dec_point,\n                toFixedFix = function toFixedFix(n, prec) {\n                // Fix for IE parseFloat(0.55).toFixed(0) = 0;\n                var k = Math.pow(10, prec);\n                return Math.round(n * k) / k;\n            },\n                s = (prec ? toFixedFix(n, prec) : Math.round(n)).toString().split('.');\n            if (s[0].length > 3) {\n                s[0] = s[0].replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, sep);\n            }\n            if ((s[1] || '').length < prec) {\n                s[1] = s[1] || '';\n                s[1] += new Array(prec - s[1].length + 1).join('0');\n            }\n            return s.join(dec);\n        }\n    }\n});\n\n},{}],32:[function(require,module,exports){\n'use strict';\n\nVue.component('traspaso-cuentas-index', {\n    props: ['url_traspaso_cuentas_index', 'cuentas', 'traspasos', 'monedas'],\n    data: function data() {\n        return {\n            'data': {\n                'traspasos': this.traspasos,\n                'cuentas': this.cuentas,\n                'monedas': this.monedas,\n                'ver': []\n            },\n            'form': {\n                'id_cuenta_origen': '',\n                'id_cuenta_destino': '',\n                'observaciones': '',\n                'importe': '',\n                'fecha': moment().format('YYYY-MM-DD'),\n                'cumplimiento': '',\n                'vencimiento': '',\n                'referencia': ''\n            },\n            'traspaso_edit': {\n                'id_traspaso': '',\n                'id_cuenta_origen': '',\n                'id_cuenta_destino': '',\n                'observaciones': '',\n                'importe': '',\n                'fecha': '',\n                'cumplimiento': '',\n                'vencimiento': '',\n                'referencia': ''\n            },\n            'guardando': false\n        };\n    },\n    computed: {\n        cuentas_disponibles: function cuentas_disponibles() {\n            var self = this;\n            return this.cuentas.filter(function (cuenta) {\n                return cuenta.id_cuenta != self.form.id_cuenta_origen;\n            });\n        }\n    },\n    mounted: function mounted() {\n        var self = this;\n\n        $(\"#cumplimiento\").datepicker().on(\"changeDate\", function () {\n            Vue.set(self.form, 'vencimiento', $('#cumplimiento').val());\n            Vue.set(self.form, 'cumplimiento', $('#cumplimiento').val());\n        });\n        $(\"#Fecha\").datepicker().on(\"changeDate\", function () {\n            var thisElement = $(this);\n\n            Vue.set(self.form, 'fecha', thisElement.val());\n            thisElement.datepicker('hide');\n            thisElement.blur();\n            self.$validator.validate('required', self.form.fecha);\n        });\n        $(\".fechas_edit\").datepicker().on(\"changeDate\", function () {\n            var thisElement = $(this);\n            var id = thisElement.attr('id').replace('edit_', '');\n\n            Vue.set(self.traspaso_edit, id, thisElement.val());\n        });\n    },\n    directives: {\n        datepicker: {\n            inserted: function inserted(el) {\n                $(el).datepicker({\n                    autoclose: true,\n                    language: 'es',\n                    todayHighlight: true,\n                    clearBtn: true,\n                    format: 'yyyy-mm-dd'\n                });\n            }\n        }\n    },\n    methods: {\n        datos_cuenta: function datos_cuenta(id) {\n            return this.cuentas[id];\n        },\n        confirm_guardar: function confirm_guardar() {\n            var self = this;\n            swal({\n                title: \"Guardar traspaso\",\n                text: \"¿Estás seguro/a de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.guardar();\n            }).catch(swal.noop);\n        },\n        guardar: function guardar() {\n            var self = this;\n\n            $.ajax({\n                type: 'POST',\n                url: self.url_traspaso_cuentas_index,\n                data: self.form,\n                beforeSend: function beforeSend() {\n                    self.guardando = true;\n                },\n                success: function success(data, textStatus, xhr) {\n\n                    // Si data.traspaso es un string hubo un error al guardar el traspaso\n                    if (typeof data.data.traspaso === 'string') {\n                        swal({\n                            type: 'warning',\n                            title: 'Error',\n                            html: data.data.traspaso\n                        });\n                    } else {\n                        self.data.traspasos.push(data.data.traspaso);\n                        swal({\n                            type: 'success',\n                            title: 'Correcto',\n                            html: 'Traspaso guardado correctamente'\n                        });\n                    }\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                    self.close_traspaso();\n                }\n            });\n        },\n        confirm_eliminar: function confirm_eliminar(id_traspaso) {\n            var self = this;\n            swal({\n                title: \"Eliminar traspaso\",\n                text: \"¿Estás seguro/a de que deseas eliminar este traspaso?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.eliminar(id_traspaso);\n            }).catch(swal.noop);\n        },\n        eliminar: function eliminar(id_traspaso) {\n            var self = this;\n            $.ajax({\n                type: 'GET',\n                url: self.url_traspaso_cuentas_index + '/' + id_traspaso,\n                beforeSend: function beforeSend() {},\n                success: function success(data, textStatus, xhr) {\n                    self.data.traspasos.forEach(function (traspaso) {\n                        if (traspaso.id_traspaso === id_traspaso) {\n                            self.data.traspasos.splice(self.data.traspasos.indexOf(traspaso), 1);\n                        }\n                    });\n\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        html: 'Traspaso eliminado'\n                    });\n                },\n                complete: function complete() {}\n            });\n        },\n        modal_ver_traspaso: function modal_ver_traspaso(item) {\n            Vue.set(this.data, 'ver', item);\n            Vue.set(this.data.ver, 'fecha', this.trim_fecha(item.traspaso_transaccion.transaccion_debito.fecha));\n            Vue.set(this.data.ver, 'importe', this.comma_format(item.importe));\n            Vue.set(this.data.ver, 'cumplimiento', this.trim_fecha(item.traspaso_transaccion.transaccion_debito.cumplimiento));\n            Vue.set(this.data.ver, 'vencimiento', this.trim_fecha(item.traspaso_transaccion.transaccion_debito.vencimiento));\n            Vue.set(this.data.ver, 'referencia', item.traspaso_transaccion.transaccion_debito.referencia);\n            Vue.set(this.data.ver, 'cuenta_origen_texto', item.cuenta_origen.numero + ' ' + item.cuenta_origen.abreviatura + ' (' + item.cuenta_origen.empresa.razon_social + ')');\n            Vue.set(this.data.ver, 'cuenta_destino_texto', item.cuenta_destino.numero + ' ' + item.cuenta_destino.abreviatura + ' (' + item.cuenta_destino.empresa.razon_social + ')');\n\n            $('#ver_traspaso_modal').modal('show');\n        },\n        close_modal_ver_traspaso: function close_modal_ver_traspaso() {\n            $('#ver_traspaso_modal').modal('hide');\n            Vue.set(this.data, 'ver', []);\n        },\n        modal_traspaso: function modal_traspaso() {\n            this.validation_errors.clear('form_guardar_traspaso');\n            this.$validator.clean();\n            $('#traspaso_modal').modal('show');\n            $('#id_cuenta_origen').focus();\n        },\n        close_traspaso: function close_traspaso() {\n            this.reset_form();\n            $('#traspaso_modal').modal('hide');\n        },\n        modal_editar: function modal_editar(traspaso) {\n\n            Vue.set(this.traspaso_edit, 'id_traspaso', traspaso.id_traspaso);\n            Vue.set(this.traspaso_edit, 'id_cuenta_origen', traspaso.id_cuenta_origen);\n            Vue.set(this.traspaso_edit, 'id_cuenta_destino', traspaso.id_cuenta_destino);\n            Vue.set(this.traspaso_edit, 'observaciones', traspaso.observaciones);\n            Vue.set(this.traspaso_edit, 'importe', traspaso.importe);\n            Vue.set(this.traspaso_edit, 'fecha', this.trim_fecha(traspaso.traspaso_transaccion.transaccion_debito.fecha));\n            Vue.set(this.traspaso_edit, 'cumplimiento', this.trim_fecha(traspaso.traspaso_transaccion.transaccion_debito.cumplimiento));\n            Vue.set(this.traspaso_edit, 'vencimiento', this.trim_fecha(traspaso.traspaso_transaccion.transaccion_debito.vencimiento));\n            Vue.set(this.traspaso_edit, 'referencia', traspaso.traspaso_transaccion.transaccion_debito.referencia);\n\n            this.validation_errors.clear('form_editar_traspaso');\n            $('#edit_traspaso_modal').modal('show');\n            $('#edit_id_cuenta_origen').focus();\n        },\n        confirm_editar: function confirm_editar() {\n            var self = this;\n            swal({\n                title: \"Editar traspaso\",\n                text: \"¿Estás seguro/a de que la información es correcta?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonText: \"Si, Continuar\",\n                cancelButtonText: \"No, Cancelar\"\n            }).then(function () {\n                self.editar();\n            }).catch(swal.noop);\n        },\n        editar: function editar() {\n            var self = this;\n\n            self.traspaso_edit._method = 'PATCH';\n            $.ajax({\n                type: 'POST',\n                url: self.url_traspaso_cuentas_index + '/' + self.traspaso_edit.id_traspaso,\n                data: self.traspaso_edit,\n                beforeSend: function beforeSend() {},\n                success: function success(data, textStatus, xhr) {\n\n                    self.data.traspasos.forEach(function (traspaso) {\n                        if (traspaso.id_traspaso === data.data.traspaso.id_traspaso) {\n                            Vue.set(self.data.traspasos, self.data.traspasos.indexOf(traspaso), data.data.traspaso);\n                        }\n                    });\n                    swal({\n                        type: 'success',\n                        title: 'Correcto',\n                        html: 'Traspaso guardado correctamente'\n                    });\n\n                    self.close_edit_traspaso();\n                },\n                complete: function complete() {\n                    self.guardando = false;\n                }\n            });\n        },\n        close_edit_traspaso: function close_edit_traspaso() {\n            $('#edit_traspaso_modal').modal('hide');\n        },\n        validateForm: function validateForm(scope, funcion) {\n            self = this;\n            this.$validator.validateAll(scope).then(function () {\n                if (funcion === 'confirm_guardar') {\n                    self.confirm_guardar();\n                } else if (funcion === 'confirm_editar') {\n                    self.confirm_editar();\n                }\n            }).catch(function () {\n                swal({\n                    type: 'warning',\n                    title: 'Advertencia',\n                    text: 'Por favor corrija los errores del formulario'\n                });\n            });\n        },\n        trim_fecha: function trim_fecha(fecha) {\n            return fecha.substring(0, 10);\n        },\n        reset_form: function reset_form() {\n            Vue.set(this.form, 'id_traspaso', '');\n            Vue.set(this.form, 'id_cuenta_origen', '');\n            Vue.set(this.form, 'id_cuenta_destino', '');\n            Vue.set(this.form, 'observaciones', '');\n            Vue.set(this.form, 'importe', '');\n            Vue.set(this.form, 'fecha', '');\n            Vue.set(this.form, 'cumplimiento', '');\n            Vue.set(this.form, 'vencimiento', '');\n            Vue.set(this.form, 'referencia', '');\n        },\n        comma_format: function comma_format(number) {\n            var n = !isFinite(+number) ? 0 : +number,\n                decimals = 4,\n                prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),\n                sep = typeof thousands_sep === 'undefined' ? ',' : thousands_sep,\n                dec = typeof dec_point === 'undefined' ? '.' : dec_point,\n                toFixedFix = function toFixedFix(n, prec) {\n                // Fix for IE parseFloat(0.55).toFixed(0) = 0;\n                var k = Math.pow(10, prec);\n                return Math.round(n * k) / k;\n            },\n                s = (prec ? toFixedFix(n, prec) : Math.round(n)).toString().split('.');\n            if (s[0].length > 3) {\n                s[0] = s[0].replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, sep);\n            }\n            if ((s[1] || '').length < prec) {\n                s[1] = s[1] || '';\n                s[1] += new Array(prec - s[1].length + 1).join('0');\n            }\n            return s.join(dec);\n        }\n    }\n});\n\n},{}],33:[function(require,module,exports){\n'use strict';\n\nVue.component('app-errors', {\n    props: ['form'],\n\n    template: require('./templates/errors.html')\n});\n\n},{\"./templates/errors.html\":37}],34:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nVue.component('global-errors', {\n\n  data: function data() {\n    return {\n      errors: []\n    };\n  },\n\n  template: require('./templates/global-errors.html'),\n\n  events: {\n    displayGlobalErrors: function displayGlobalErrors(errors) {\n      if ((typeof errors === 'undefined' ? 'undefined' : _typeof(errors)) === 'object') {\n        this.errors = _.flatten(_.toArray(errors));\n      } else {\n        this.errors.push('Un error grave ocurrio. Por favor intente otra vez.');\n      }\n    }\n  }\n});\n\n},{\"./templates/global-errors.html\":38}],35:[function(require,module,exports){\n'use strict';\n\nVue.component('kardex-material-index', {\n    props: ['materiales'],\n    data: function data() {\n        return {\n            'data': {\n                'items': [],\n                'materiales': ''\n            },\n            'form': {\n                'material': {\n                    'id_material': '',\n                    'nivel': '',\n                    'descripcion': '',\n                    'unidad': '',\n                    'n_padre': '',\n                    'd_padre': '',\n                    'usuario_registro': ''\n                },\n                'totales': {\n                    'entrada_material': '',\n                    'entrada_valor': '',\n                    'salida_material': '',\n                    'salida_valor': '',\n                    'existencia': ''\n                }\n            },\n            valor: -1,\n            'cargando': false\n        };\n    },\n    directives: {\n        select2: {\n\n            inserted: function inserted(el) {\n\n                $(el).select2({\n                    width: '100%',\n                    ajax: {\n                        url: App.host + '/sistema_contable/kardex_material/getBy',\n                        dataType: 'json',\n                        delay: 500,\n                        data: function data(params) {\n                            return {\n                                attribute: 'descripcion',\n                                operator: 'like',\n                                value: '%' + params.term + '%'\n                            };\n                        },\n\n                        processResults: function processResults(data) {\n\n                            return {\n\n                                results: $.map(data.data.materiales, function (item) {\n                                    return {\n                                        text: item.descripcion,\n                                        id: item.id_material\n                                    };\n                                })\n                            };\n                        },\n                        error: function error(_error) {},\n                        cache: true\n                    },\n                    escapeMarkup: function escapeMarkup(markup) {\n                        return markup;\n                    }, // let our custom formatter work\n                    minimumInputLength: 1\n                }).on('select2:select', function () {\n                    $('#material_select').val($('#material_select option:selected').data().data.id);\n                });\n            }\n        }\n    },\n    methods: {\n\n        datos: function datos() {\n            var self = this;\n            var material = self.valor;\n            var url = App.host + '/sistema_contable/kardex_material/';\n            var ematerial = 0;\n            var evalor = 0;\n            var smaterial = 0;\n            var svalor = 0;\n            // Consulta de datos de kardex por material\n            if (self.valor >= 0) {\n                url = url + material;\n                $.ajax({\n                    type: 'GET',\n                    url: url,\n                    beforeSend: function beforeSend() {\n                        self.cargando = true;\n                    },\n                    success: function success(response) {\n\n                        material = response.data.material;\n                        // Asignación de datos para vista de detalle\n                        self.form.material.id_material = material.id_material;\n                        self.form.material.nivel = material.nivel;\n                        self.form.material.n_padre = self.form.material.nivel.substr(0, 4);\n                        self.form.material.descripcion = material.descripcion;\n                        self.form.material.unidad = material.unidad;\n                        self.form.material.d_padre = response.data.padre.descripcion;\n                        self.form.material.usuario_registro = material.UsuarioRegistro;\n\n                        self.data.items = response.data.items;\n\n                        response.data.items.forEach(function (item) {\n                            if (item.transaccion.tipo_transaccion == 33) {\n                                ematerial += parseFloat(item.cantidad);\n                                evalor += parseFloat(item.precio_unitario);\n                            }\n                            if (item.transaccion.tipo_transaccion == 34) {\n                                smaterial += parseFloat(item.cantidad);\n                                svalor += parseFloat(item.precio_unitario);\n                            }\n                        });\n                        // Asignacion de valores totales de Transacciones\n                        self.form.totales.entrada_material = ematerial;\n                        self.form.totales.entrada_valor = evalor;\n                        self.form.totales.salida_material = smaterial;\n                        self.form.totales.salida_valor = svalor;\n                        self.form.totales.existencia = ematerial - smaterial;\n                    },\n                    complete: function complete() {\n                        self.cargando = false;\n                    }\n                });\n            } else {\n                self.form.material.id_material = '';\n                self.form.material.nivel = '';\n                self.form.material.n_padre = '';\n                self.form.material.descripcion = '';\n                self.form.material.unidad = '';\n                self.form.material.d_padre = '';\n                self.form.totales.existencia = '';\n                self.form.totales.entrada_material = '';\n                self.form.totales.entrada_valor = '';\n                self.form.totales.salida_material = '';\n                self.form.totales.salida_valor = '';\n                self.form.totales.existencia = '';\n            }\n        }\n    }\n\n});\n\n},{}],36:[function(require,module,exports){\n'use strict';\n\nVue.component('select2', {\n    props: ['options', 'value', 'name'],\n    template: '<select><slot></slot></select>',\n    mounted: function mounted() {\n        var vm = this;\n        var data = [];\n\n        $.each(this.options, function (id, text) {\n            data.push({ id: id, text: text });\n        });\n\n        function SortByName(a, b) {\n            var aName = a.text.toLowerCase();\n            var bName = b.text.toLowerCase();\n            return aName < bName ? -1 : aName > bName ? 1 : 0;\n        }\n\n        data = data.sort(SortByName);\n        $(this.$el).attr('name', this.name);\n        $(this.$el).select2({\n            data: data,\n            width: '100%'\n        }).val(this.value).trigger('change')\n        // emit event on change.\n        .on('change', function () {\n            vm.$emit('input', this.value);\n        });\n    },\n    watch: {\n        value: function value(_value) {\n            // update value\n            $(this.$el).val(_value).trigger('change');\n        },\n        options: function options(_options) {\n            // update options\n            $(this.$el).select2({\n                data: _options,\n                width: '100%'\n            });\n        }\n    },\n    destroyed: function destroyed() {\n        $(this.$el).off().select2('destroy');\n    }\n});\n\n},{}],37:[function(require,module,exports){\nmodule.exports = '<div id=\"form-errors\" v-cloak>\\n  <div class=\"alert alert-danger\" v-if=\"form.errors.length\">\\n    <ul>\\n      <li v-for=\"error in form.errors\">{{ error }}</li>\\n    </ul>\\n  </div>\\n</div>';\n},{}],38:[function(require,module,exports){\nmodule.exports = '<div class=\"alert alert-danger\" v-show=\"errors.length\">\\n  <ul>\\n    <li v-for=\"error in errors\">{{ error }}</li>\\n  </ul>\\n</div>';\n},{}]},{},[4]);\n"],"file":"app-vue.js"}